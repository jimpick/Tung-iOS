//
//  TungPodcastStyleKit.m
//  Tung
//
//  Created by Jamie Perkins on 10/7/15.
//  Copyright (c) 2015 Inorganik Produce, Inc. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "TungPodcastStyleKit.h"


@implementation TungPodcastStyleKit

#pragma mark Cache

static UIColor* _tungColor = nil;
static UIColor* _tungColorMediumLight = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _tungColor = [UIColor colorWithRed: 0.341 green: 0.353 blue: 0.843 alpha: 1];
    _tungColorMediumLight = [UIColor colorWithRed: 0.447 green: 0.506 blue: 0.953 alpha: 1];

}

#pragma mark Colors

+ (UIColor*)tungColor { return _tungColor; }
+ (UIColor*)tungColorMediumLight { return _tungColorMediumLight; }

#pragma mark Drawing Methods

+ (void)drawSubscribeIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group3 = CGRectMake(CGRectGetMinX(frame) + 1.5, CGRectGetMinY(frame) + 1.59, CGRectGetWidth(frame) - 3, CGRectGetHeight(frame) - 3);


    //// Group 3
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.76732 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.47629 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.63380 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.34053 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.76732 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40131 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.70763 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.34053 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.50046 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.47629 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.56008 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.34053 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.50046 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40131 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.36701 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.34053 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.50046 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40131 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.44080 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.34053 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.23348 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.47629 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.29314 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.34053 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.23348 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40131 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.28031 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.57889 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.23348 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.51766 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.25196 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.55400 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.50083 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.80328 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.72517 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.57505 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.76732 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.47629 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.75101 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.55039 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.76732 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.51533 * CGRectGetHeight(group3))];
        [bezierPath closePath];
        bezierPath.lineCapStyle = kCGLineCapRound;

        bezierPath.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.77580 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.26693 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.86710 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.49132 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.83212 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.32439 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.86710 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40378 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.77587 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.71567 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.86710 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.57897 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.83212 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.65836 * CGRectGetHeight(group3))];
        bezier2Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.84490 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.78592 * CGRectGetHeight(group3))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.96485 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.49135 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.91896 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.71056 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.96485 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.60632 * CGRectGetHeight(group3))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.84490 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.19673 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.96485 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.37626 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.91896 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.27205 * CGRectGetHeight(group3))];
        bezier3Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier3Path.lineWidth = 1;
        [bezier3Path stroke];


        //// Bezier 4 Drawing
        UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
        [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.22507 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.71567 * CGRectGetHeight(group3))];
        [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.13369 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.49132 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.16866 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.65836 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.13369 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.57897 * CGRectGetHeight(group3))];
        [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.22507 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.26689 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.13369 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40378 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.16866 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.32436 * CGRectGetHeight(group3))];
        bezier4Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier4Path.lineWidth = 1;
        [bezier4Path stroke];


        //// Bezier 5 Drawing
        UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
        [bezier5Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.15596 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.19672 * CGRectGetHeight(group3))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.03608 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.49133 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.08183 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.27203 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.03608 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.37628 * CGRectGetHeight(group3))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.15588 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.78598 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.03608 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.60634 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.08183 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.71054 * CGRectGetHeight(group3))];
        bezier5Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier5Path.lineWidth = 1;
        [bezier5Path stroke];


        //// Rectangle Drawing
    }
}

+ (void)drawDonateIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group = CGRectMake(CGRectGetMinX(frame) + 1.72, CGRectGetMinY(frame) + 6.74, floor((CGRectGetWidth(frame) - 1.72) * 0.97101 + 1.33) - 0.83, floor((CGRectGetHeight(frame) - 6.74) * 0.74094 + 6.98) - 6.48);


    //// Group
    {
        //// Bezier 5 Drawing
        UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
        [bezier5Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.88045 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.01788 * CGRectGetHeight(group))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.87651 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.06079 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.87797 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.03083 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.87651 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.04526 * CGRectGetHeight(group))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.96450 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.28585 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.87651 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.14605 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.91591 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.23046 * CGRectGetHeight(group))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.31834 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.97716 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.30023 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.98911 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.31118 * CGRectGetHeight(group))];
        [bezier5Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.09592 * CGRectGetHeight(group))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.88045 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.01788 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.95904 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.05774 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.91934 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.03283 * CGRectGetHeight(group))];
        [bezier5Path closePath];
        bezier5Path.lineCapStyle = kCGLineCapRound;

        bezier5Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier5Path.lineWidth = 1;
        [bezier5Path stroke];


        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.88694 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.90400 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.63659 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.54772 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.36334 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.24322 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.11313 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.09596 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.36334 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.45219 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.63659 * CGRectGetWidth(group), CGRectGetMinY(group) + -0.24315 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.88694 * CGRectGetHeight(group))];
        [bezierPath closePath];
        bezierPath.lineCapStyle = kCGLineCapRound;

        bezierPath.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.12342 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.93913 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.03550 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.71423 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.12342 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.85398 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.08406 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.76968 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.68164 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.02284 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.69975 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.01089 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.68885 * CGRectGetHeight(group))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.90401 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.11952 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.98210 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.04086 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.94229 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.08066 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.96720 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.12342 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.93913 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.12200 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.96920 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.12342 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.95488 * CGRectGetHeight(group))];
        [bezier2Path closePath];
        bezier2Path.lineCapStyle = kCGLineCapRound;

        bezier2Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.03550 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.37183 * CGRectGetHeight(group))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.12342 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.27915 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.08406 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.43354 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.12342 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.37388 * CGRectGetHeight(group))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.11182 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.18805 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.12342 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.24840 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.11912 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.21754 * CGRectGetHeight(group))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.11312 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.07541 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.17283 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.03815 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.14882 * CGRectGetHeight(group))];
        [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.30616 * CGRectGetHeight(group))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.03550 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.37183 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.01090 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.33302 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.02284 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.35566 * CGRectGetHeight(group))];
        [bezier3Path closePath];
        bezier3Path.lineCapStyle = kCGLineCapRound;

        bezier3Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier3Path.lineWidth = 1;
        [bezier3Path stroke];


        //// Bezier 4 Drawing
        UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
        [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.96449 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.64566 * CGRectGetHeight(group))];
        [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.87649 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.72881 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.91589 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.59021 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.87649 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.64382 * CGRectGetHeight(group))];
        [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.88854 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.81211 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.87649 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.75698 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.88101 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.78515 * CGRectGetHeight(group))];
        [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.99998 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.88694 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.92485 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.82728 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.96184 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.85134 * CGRectGetHeight(group))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.99998 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.70453 * CGRectGetHeight(group))];
        [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.96449 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.64566 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.98912 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.68052 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.97718 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.66004 * CGRectGetHeight(group))];
        [bezier4Path closePath];
        bezier4Path.lineCapStyle = kCGLineCapRound;

        bezier4Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier4Path.lineWidth = 1;
        [bezier4Path stroke];


        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPath];
        [ovalPath moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.62073 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55082 * CGRectGetHeight(group))];
        [ovalPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.45104 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.80606 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.59375 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.71651 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.51777 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.83078 * CGRectGetHeight(group))];
        [ovalPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.37906 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.46129 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.38430 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.78133 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.35207 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.62697 * CGRectGetHeight(group))];
        [ovalPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.54875 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.20605 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.40604 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.29560 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.48201 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.18132 * CGRectGetHeight(group))];
        [ovalPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.62073 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55082 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.61549 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.23077 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.64771 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.38513 * CGRectGetHeight(group))];
        [ovalPath closePath];
        [color setStroke];
        ovalPath.lineWidth = 1;
        [ovalPath stroke];


        //// Bezier 6 Drawing
        UIBezierPath* bezier6Path = [UIBezierPath bezierPath];
        [bezier6Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.58956 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.39667 * CGRectGetHeight(group))];
        [bezier6Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.54904 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.34085 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.59112 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.34791 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.57304 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.32284 * CGRectGetHeight(group))];
        [bezier6Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.50279 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.46202 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.52505 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.35896 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.50439 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.41325 * CGRectGetHeight(group))];
        [bezier6Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.46231 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.40630 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.50439 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.41325 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.48630 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.38814 * CGRectGetHeight(group))];
        [bezier6Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.41602 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.52736 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.43828 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.42431 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.41761 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.47866 * CGRectGetHeight(group))];
        [bezier6Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.42908 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.58281 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.41514 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55432 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.42036 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.57349 * CGRectGetHeight(group))];
        [bezier6Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.49600 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.67502 * CGRectGetHeight(group))];
        [bezier6Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.57378 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.47139 * CGRectGetHeight(group))];
        [bezier6Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.58956 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.39667 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.58271 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.44896 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.58875 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.42205 * CGRectGetHeight(group))];
        [bezier6Path closePath];
        bezier6Path.lineCapStyle = kCGLineCapRound;

        bezier6Path.lineJoinStyle = kCGLineJoinRound;

        [color setFill];
        [bezier6Path fill];
    }
}

+ (void)drawRecommendIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group3 = CGRectMake(CGRectGetMinX(frame) + 9.66, CGRectGetMinY(frame) + 4.68, CGRectGetWidth(frame) - 18.54, CGRectGetHeight(frame) - 10.42);


    //// Group 3
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.64882 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 1.00000 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.26005 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 1.00000 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.76155 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.13182 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 1.00000 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.92162 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.00129 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.62100 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.74430 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.63217 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.32213 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.23730 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.02650 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40288 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.20592 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.31668 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.50439 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.00002 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.48593 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.12537 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.50321 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.03240 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.66841 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.13872 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.55230 * CGRectGetWidth(group3), CGRectGetMinY(group3) + -0.00074 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.66975 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.01667 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.51303 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.37345 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.66696 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.26641 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.48593 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.32071 * CGRectGetHeight(group3))];
        bezierPath.lineCapStyle = kCGLineCapRound;

        bezierPath.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.52721 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.52771 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.44748 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.61411 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.48091 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.53961 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.44748 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.57670 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.52721 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.70040 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.44748 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.65145 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.48091 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.68850 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.44748 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.78156 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.48102 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.71064 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.44748 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.74515 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.52721 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.86272 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.44748 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.81631 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.48434 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.85119 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.43997 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.93106 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.48231 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.86860 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.43997 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.89731 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.53628 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 1.00000 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.43997 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.96916 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.48300 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 1.00000 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.78475 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 1.00000 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.88094 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.93106 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.83792 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 1.00000 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.88094 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.96916 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.78475 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.86223 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.88094 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.89312 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.83792 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.86223 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.76033 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.86223 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.76033 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.86272 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.85390 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.86272 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.96738 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.78156 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.91641 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.86272 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.96738 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.82639 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.85390 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.70040 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.96738 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.73676 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.91641 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.70040 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.76033 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.70040 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.87944 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.70040 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 1.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.61411 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.94603 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.70040 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 1.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.66177 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.87944 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.52783 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 1.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.56642 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.94603 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.52783 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.76033 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.52783 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.85390 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.52783 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.96738 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.44659 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.91641 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.52783 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.96738 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.49143 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.85390 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.36543 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.96738 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40184 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.91641 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.36543 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.56091 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.36543 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.44748 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.44659 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.49829 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.36543 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.44748 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40184 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.52721 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.52771 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.44748 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.48316 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.48102 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.51751 * CGRectGetHeight(group3))];
        [bezier2Path closePath];
        bezier2Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];
    }
}

+ (void)drawCommentIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group3 = CGRectMake(CGRectGetMinX(frame) + 6.71, CGRectGetMinY(frame) + 8.72, CGRectGetWidth(frame) - 12.51, CGRectGetHeight(frame) - 16.04);


    //// Group 3
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.75997 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.00000 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.23994 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.00000 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.28181 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.10798 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.00000 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.12673 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.51912 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.23994 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.80088 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.67405 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.10798 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.80088 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.34501 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.80088 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.62742 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 1.00000 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.39765 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.94813 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.52100 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 1.00000 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.55659 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.80088 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.56752 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.95764 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.53776 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.89150 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.75997 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.80088 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 1.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.51912 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.89193 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.80088 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 1.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.67405 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 1.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.28181 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.75997 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.00000 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 1.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.12673 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.89193 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.00000 * CGRectGetHeight(group3))];
        [bezierPath closePath];
        bezierPath.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];


        //// Group
        {
            //// Bezier 2 Drawing
            UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
            [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.22155 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.25926 * CGRectGetHeight(group3))];
            [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.75863 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.25926 * CGRectGetHeight(group3))];
            bezier2Path.lineCapStyle = kCGLineCapRound;

            [color setStroke];
            bezier2Path.lineWidth = 1;
            [bezier2Path stroke];


            //// Bezier 3 Drawing
            UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
            [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.22155 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40389 * CGRectGetHeight(group3))];
            [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.62977 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40389 * CGRectGetHeight(group3))];
            bezier3Path.lineCapStyle = kCGLineCapRound;

            [color setStroke];
            bezier3Path.lineWidth = 1;
            [bezier3Path stroke];


            //// Bezier 4 Drawing
            UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
            [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.22155 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.54853 * CGRectGetHeight(group3))];
            [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.70275 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.54853 * CGRectGetHeight(group3))];
            bezier4Path.lineCapStyle = kCGLineCapRound;

            [color setStroke];
            bezier4Path.lineWidth = 1;
            [bezier4Path stroke];
        }
    }
}

+ (void)drawClipIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group3 = CGRectMake(CGRectGetMinX(frame) + 6.8, CGRectGetMinY(frame) + 5.52, CGRectGetWidth(frame) - 14.21, CGRectGetHeight(frame) - 11.79);


    //// Group 3
    {
        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40661 * CGRectGetHeight(group3))];
        [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.59339 * CGRectGetHeight(group3))];
        bezier3Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier3Path.lineWidth = 1;
        [bezier3Path stroke];


        //// Bezier 4 Drawing
        UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
        [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.10000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.27438 * CGRectGetHeight(group3))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.10000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.72562 * CGRectGetHeight(group3))];
        bezier4Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier4Path.lineWidth = 1;
        [bezier4Path stroke];


        //// Bezier 5 Drawing
        UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
        [bezier5Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.19998 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.33780 * CGRectGetHeight(group3))];
        [bezier5Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.19998 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.66221 * CGRectGetHeight(group3))];
        bezier5Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier5Path.lineWidth = 1;
        [bezier5Path stroke];


        //// Bezier 6 Drawing
        UIBezierPath* bezier6Path = [UIBezierPath bezierPath];
        [bezier6Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.29998 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.19670 * CGRectGetHeight(group3))];
        [bezier6Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.29998 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.80330 * CGRectGetHeight(group3))];
        bezier6Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier6Path.lineWidth = 1;
        [bezier6Path stroke];


        //// Bezier 7 Drawing
        UIBezierPath* bezier7Path = [UIBezierPath bezierPath];
        [bezier7Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.39998 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.41223 * CGRectGetHeight(group3))];
        [bezier7Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.39998 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.58778 * CGRectGetHeight(group3))];
        bezier7Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier7Path.lineWidth = 1;
        [bezier7Path stroke];


        //// Bezier 8 Drawing
        UIBezierPath* bezier8Path = [UIBezierPath bezierPath];
        [bezier8Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.49998 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.28732 * CGRectGetHeight(group3))];
        [bezier8Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.49998 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.71270 * CGRectGetHeight(group3))];
        bezier8Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier8Path.lineWidth = 1;
        [bezier8Path stroke];


        //// Bezier 9 Drawing
        UIBezierPath* bezier9Path = [UIBezierPath bezierPath];
        [bezier9Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.59998 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.10910 * CGRectGetHeight(group3))];
        [bezier9Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.59998 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.89090 * CGRectGetHeight(group3))];
        bezier9Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier9Path.lineWidth = 1;
        [bezier9Path stroke];


        //// Bezier 10 Drawing
        UIBezierPath* bezier10Path = [UIBezierPath bezierPath];
        [bezier10Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.69996 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.00000 * CGRectGetHeight(group3))];
        [bezier10Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.69996 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 1.00000 * CGRectGetHeight(group3))];
        bezier10Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier10Path.lineWidth = 1;
        [bezier10Path stroke];


        //// Bezier 11 Drawing
        UIBezierPath* bezier11Path = [UIBezierPath bezierPath];
        [bezier11Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.79996 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.27438 * CGRectGetHeight(group3))];
        [bezier11Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.79996 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.72562 * CGRectGetHeight(group3))];
        bezier11Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier11Path.lineWidth = 1;
        [bezier11Path stroke];


        //// Bezier 12 Drawing
        UIBezierPath* bezier12Path = [UIBezierPath bezierPath];
        [bezier12Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.89996 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.15040 * CGRectGetHeight(group3))];
        [bezier12Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.89996 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.84960 * CGRectGetHeight(group3))];
        bezier12Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier12Path.lineWidth = 1;
        [bezier12Path stroke];


        //// Bezier 13 Drawing
        UIBezierPath* bezier13Path = [UIBezierPath bezierPath];
        [bezier13Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.99996 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.36698 * CGRectGetHeight(group3))];
        [bezier13Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.99996 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.63302 * CGRectGetHeight(group3))];
        bezier13Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier13Path.lineWidth = 1;
        [bezier13Path stroke];
    }
}

+ (void)drawQueueIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group = CGRectMake(CGRectGetMinX(frame) + 6.59, CGRectGetMinY(frame) + 5.59, CGRectGetWidth(frame) - 11.36, CGRectGetHeight(frame) - 12.36);


    //// Group
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.36959 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.23314 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.48195 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.11663 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.36977 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00022 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.36959 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
        bezierPath.lineCapStyle = kCGLineCapRound;

        bezierPath.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.34461 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.33862 * CGRectGetHeight(group))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.34461 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77781 * CGRectGetHeight(group))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.56677 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55824 * CGRectGetHeight(group))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.34461 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.33862 * CGRectGetHeight(group))];
        [bezier2Path closePath];
        [color setFill];
        [bezier2Path fill];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.61331 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.27640 * CGRectGetHeight(group))];
        [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.27640 * CGRectGetHeight(group))];
        bezier3Path.lineCapStyle = kCGLineCapRound;

        bezier3Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier3Path.lineWidth = 1;
        [bezier3Path stroke];


        //// Bezier 4 Drawing
        UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
        [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.61331 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.42580 * CGRectGetHeight(group))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.42580 * CGRectGetHeight(group))];
        bezier4Path.lineCapStyle = kCGLineCapRound;

        bezier4Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier4Path.lineWidth = 1;
        [bezier4Path stroke];


        //// Bezier 5 Drawing
        UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
        [bezier5Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.85002 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.59679 * CGRectGetHeight(group))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.42571 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.83120 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.82277 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.64834 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55830 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.19055 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.80227 * CGRectGetHeight(group))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.42571 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.11660 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.31433 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.19055 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.11660 * CGRectGetHeight(group))];
        [bezier5Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.48197 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.11660 * CGRectGetHeight(group))];
        bezier5Path.lineCapStyle = kCGLineCapRound;

        bezier5Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier5Path.lineWidth = 1;
        [bezier5Path stroke];


        //// Bezier 6 Drawing
        UIBezierPath* bezier6Path = [UIBezierPath bezierPath];
        [bezier6Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.61331 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.12705 * CGRectGetHeight(group))];
        [bezier6Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.12705 * CGRectGetHeight(group))];
        bezier6Path.lineCapStyle = kCGLineCapRound;

        bezier6Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier6Path.lineWidth = 1;
        [bezier6Path stroke];
    }
}

+ (void)drawSaveIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group2 = CGRectMake(CGRectGetMinX(frame) + 6.27, CGRectGetMinY(frame) + 8.3, CGRectGetWidth(frame) - 12.54, CGRectGetHeight(frame) - 16.59);


    //// Group 2
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group2) + 0.00000 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 1.00000 * CGRectGetHeight(group2))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 1.00000 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 1.00000 * CGRectGetHeight(group2))];
        bezierPath.lineCapStyle = kCGLineCapRound;

        bezierPath.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group2) + 0.75751 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.56360 * CGRectGetHeight(group2))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 0.49990 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.86239 * CGRectGetHeight(group2))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 0.24295 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.56415 * CGRectGetHeight(group2))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 0.24237 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.56360 * CGRectGetHeight(group2))];
        bezier2Path.lineCapStyle = kCGLineCapRound;

        bezier2Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(group2) + 0.49989 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.86240 * CGRectGetHeight(group2))];
        [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 0.49989 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.00000 * CGRectGetHeight(group2))];
        bezier3Path.lineCapStyle = kCGLineCapRound;

        bezier3Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier3Path.lineWidth = 1;
        [bezier3Path stroke];
    }
}

+ (void)drawCancelIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group2 = CGRectMake(CGRectGetMinX(frame) + 10.61, CGRectGetMinY(frame) + 10.61, CGRectGetWidth(frame) - 21.04, CGRectGetHeight(frame) - 21.04);


    //// Group 2
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group2) + 0.00001 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.00000 * CGRectGetHeight(group2))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 1.00000 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 1.00000 * CGRectGetHeight(group2))];
        bezierPath.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group2) + 0.99999 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.00000 * CGRectGetHeight(group2))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 0.00000 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 1.00000 * CGRectGetHeight(group2))];
        bezier2Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];
    }
}

+ (void)drawCheckmarkIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group3 = CGRectMake(CGRectGetMinX(frame) + 4, CGRectGetMinY(frame) + 4, CGRectGetWidth(frame) - 8, CGRectGetHeight(frame) - 8);


    //// Group 3
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.39092 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.81052 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.33412 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.79001 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.37015 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.81052 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.35002 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.80325 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.14169 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.62898 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.13245 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.50962 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.10520 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.59855 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.10111 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.54512 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.25518 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.50066 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.16383 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.47422 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.21876 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.47014 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.38030 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.60534 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.74711 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.17297 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.86966 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.16159 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.77771 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.13699 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.83250 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.13171 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.88137 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.28084 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.90672 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.19132 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.91197 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.24473 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.45801 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.77979 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.39832 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.81018 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.44313 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.79725 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.42159 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.80829 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.39092 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.81052 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.39585 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.81038 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.39335 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.81052 * CGRectGetHeight(group3))];
        [bezierPath closePath];
        [color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];


        //// Rectangle Drawing
    }
}

+ (void)drawShareIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group3 = CGRectMake(CGRectGetMinX(frame) + 11.59, CGRectGetMinY(frame) + 6.59, CGRectGetWidth(frame) - 22.95, CGRectGetHeight(frame) - 15.14);


    //// Group 3
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.36355 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.32269 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.32269 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 1.00000 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 1.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 1.00000 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 1.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.32269 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.63645 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.32269 * CGRectGetHeight(group3))];
        bezierPath.lineCapStyle = kCGLineCapRound;

        bezierPath.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.75757 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.17444 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.49991 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.00000 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.24294 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.17410 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.24238 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.17444 * CGRectGetHeight(group3))];
        bezier2Path.lineCapStyle = kCGLineCapRound;

        bezier2Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.49992 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.00000 * CGRectGetHeight(group3))];
        [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.49992 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.50344 * CGRectGetHeight(group3))];
        bezier3Path.lineCapStyle = kCGLineCapRound;

        bezier3Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier3Path.lineWidth = 1;
        [bezier3Path stroke];
    }
}

+ (void)drawWebsiteIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group3 = CGRectMake(CGRectGetMinX(frame) + 13.5, CGRectGetMinY(frame) + 7.5, CGRectGetWidth(frame) - 25.48, CGRectGetHeight(frame) - 16.01);


    //// Group 3
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group3) + 1.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.60128 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.00000 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.00248 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.84343 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.31260 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.64534 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.55135 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 1.00000 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.78611 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.94218 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.55004 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.59160 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 1.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.60128 * CGRectGetHeight(group3))];
        [bezierPath closePath];
        bezierPath.lineCapStyle = kCGLineCapRound;

        bezierPath.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];
    }
}

+ (void)drawPlayIconWithColor: (UIColor*)color
{

    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(14, 7)];
    [bezierPath addLineToPoint: CGPointMake(14, 32)];
    [bezierPath addLineToPoint: CGPointMake(29, 19.5)];
    [bezierPath addLineToPoint: CGPointMake(14, 7)];
    [bezierPath closePath];
    [color setFill];
    [bezierPath fill];
}

+ (void)drawStopIconWithColor: (UIColor*)color
{

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(12, 10, 19, 19)];
    [color setFill];
    [rectanglePath fill];
}

+ (void)drawRecordIconWithColor: (UIColor*)color
{

    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(10, 9, 21, 21)];
    [color setFill];
    [ovalPath fill];
}

+ (void)drawSubscribeIconSolidWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group3 = CGRectMake(CGRectGetMinX(frame) + 1.52, CGRectGetMinY(frame) + 1.59, CGRectGetWidth(frame) - 3, CGRectGetHeight(frame) - 3);


    //// Group 3
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.76685 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.47629 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.63333 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.34053 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.76685 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40131 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.70716 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.34053 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.49999 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.47629 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.55961 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.34053 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.49999 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40131 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.36654 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.34053 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.49999 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40131 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.44033 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.34053 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.23301 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.47629 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.29267 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.34053 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.23301 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40131 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.27984 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.57889 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.23301 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.51766 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.25149 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.55400 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.50036 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.80328 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.72470 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.57505 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.76685 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.47629 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.75055 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.55039 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.76685 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.51533 * CGRectGetHeight(group3))];
        [bezierPath closePath];
        bezierPath.lineCapStyle = kCGLineCapRound;

        bezierPath.lineJoinStyle = kCGLineJoinRound;

        [color setFill];
        [bezierPath fill];
        [color setStroke];
        bezierPath.lineWidth = 0;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.77533 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.26693 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.86663 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.49132 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.83166 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.32439 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.86663 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40378 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.77540 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.71567 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.86663 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.57897 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.83166 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.65836 * CGRectGetHeight(group3))];
        bezier2Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.84444 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.78592 * CGRectGetHeight(group3))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.96438 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.49135 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.91849 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.71056 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.96438 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.60632 * CGRectGetHeight(group3))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.84444 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.19673 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.96438 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.37626 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.91849 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.27205 * CGRectGetHeight(group3))];
        bezier3Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier3Path.lineWidth = 1;
        [bezier3Path stroke];


        //// Bezier 4 Drawing
        UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
        [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.22460 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.71567 * CGRectGetHeight(group3))];
        [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.13322 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.49132 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.16819 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.65836 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.13322 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.57897 * CGRectGetHeight(group3))];
        [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.22460 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.26689 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.13322 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40378 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.16819 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.32436 * CGRectGetHeight(group3))];
        bezier4Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier4Path.lineWidth = 1;
        [bezier4Path stroke];


        //// Bezier 5 Drawing
        UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
        [bezier5Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.15549 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.19672 * CGRectGetHeight(group3))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.03562 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.49133 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.08136 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.27203 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.03562 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.37628 * CGRectGetHeight(group3))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.15541 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.78598 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.03562 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.60634 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.08136 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.71054 * CGRectGetHeight(group3))];
        bezier5Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier5Path.lineWidth = 1;
        [bezier5Path stroke];


        //// Rectangle Drawing
    }
}

+ (void)drawHideIconWithColor: (UIColor*)color
{

    //// Rectangle Drawing


    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
    [bezier2Path moveToPoint: CGPointMake(5, 3)];
    [bezier2Path addLineToPoint: CGPointMake(17, 7.5)];
    [bezier2Path addLineToPoint: CGPointMake(29, 3)];
    bezier2Path.lineCapStyle = kCGLineCapRound;

    [color setStroke];
    bezier2Path.lineWidth = 5;
    [bezier2Path stroke];
}

+ (void)drawShowIconWithColor: (UIColor*)color
{

    //// Rectangle Drawing


    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
    [bezier2Path moveToPoint: CGPointMake(5, 8)];
    [bezier2Path addLineToPoint: CGPointMake(17, 3.5)];
    [bezier2Path addLineToPoint: CGPointMake(29, 8)];
    bezier2Path.lineCapStyle = kCGLineCapRound;

    [color setStroke];
    bezier2Path.lineWidth = 5;
    [bezier2Path stroke];
}

+ (void)drawAddCircleIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group = CGRectMake(CGRectGetMinX(frame) + 6.56, CGRectGetMinY(frame) + 6.56, CGRectGetWidth(frame) - 13.12, CGRectGetHeight(frame) - 13.12);


    //// Group
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPath];
        [ovalPath moveToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group))];
        [ovalPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.50000 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77614 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.77614 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
        [ovalPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.22386 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + -0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77614 * CGRectGetHeight(group))];
        [ovalPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.50000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22386 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.22386 * CGRectGetWidth(group), CGRectGetMinY(group) + -0.00000 * CGRectGetHeight(group))];
        [ovalPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.77614 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22386 * CGRectGetHeight(group))];
        [ovalPath closePath];
        [color setStroke];
        ovalPath.lineWidth = 1;
        [ovalPath stroke];


        //// Bezier 4 Drawing
        UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
        [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.22098 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50001 * CGRectGetHeight(group))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.77902 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50001 * CGRectGetHeight(group))];
        bezier4Path.lineCapStyle = kCGLineCapRound;

        bezier4Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier4Path.lineWidth = 1;
        [bezier4Path stroke];


        //// Bezier 6 Drawing
        UIBezierPath* bezier6Path = [UIBezierPath bezierPath];
        [bezier6Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.49999 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77902 * CGRectGetHeight(group))];
        [bezier6Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.49999 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22098 * CGRectGetHeight(group))];
        bezier6Path.lineCapStyle = kCGLineCapRound;

        bezier6Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier6Path.lineWidth = 1;
        [bezier6Path stroke];
    }
}

+ (void)drawOptionsIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group = CGRectMake(CGRectGetMinX(frame) + floor((CGRectGetWidth(frame) - 25) * 0.50000) + 0.5, CGRectGetMinY(frame) + floor((CGRectGetHeight(frame) - 4.44) * 0.50000 - 0.28) + 0.78, 25, 4.44);


    //// Group
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group) + 4.25, CGRectGetMinY(group) + 2.22)];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 2.12, CGRectGetMinY(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 4.25, CGRectGetMinY(group) + 0.99) controlPoint2: CGPointMake(CGRectGetMinX(group) + 3.3, CGRectGetMinY(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group), CGRectGetMinY(group) + 2.22) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.95, CGRectGetMinY(group)) controlPoint2: CGPointMake(CGRectGetMinX(group), CGRectGetMinY(group) + 0.99)];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 2.12, CGRectGetMinY(group) + 4.44) controlPoint1: CGPointMake(CGRectGetMinX(group), CGRectGetMinY(group) + 3.44) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.95, CGRectGetMinY(group) + 4.44)];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 4.25, CGRectGetMinY(group) + 2.22) controlPoint1: CGPointMake(CGRectGetMinX(group) + 3.3, CGRectGetMinY(group) + 4.44) controlPoint2: CGPointMake(CGRectGetMinX(group) + 4.25, CGRectGetMinY(group) + 3.44)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group) + 14.62, CGRectGetMinY(group) + 2.22)];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 12.5, CGRectGetMinY(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 14.62, CGRectGetMinY(group) + 0.99) controlPoint2: CGPointMake(CGRectGetMinX(group) + 13.67, CGRectGetMinY(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 10.38, CGRectGetMinY(group) + 2.22) controlPoint1: CGPointMake(CGRectGetMinX(group) + 11.33, CGRectGetMinY(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 10.38, CGRectGetMinY(group) + 0.99)];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 12.5, CGRectGetMinY(group) + 4.44) controlPoint1: CGPointMake(CGRectGetMinX(group) + 10.38, CGRectGetMinY(group) + 3.44) controlPoint2: CGPointMake(CGRectGetMinX(group) + 11.33, CGRectGetMinY(group) + 4.44)];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 14.62, CGRectGetMinY(group) + 2.22) controlPoint1: CGPointMake(CGRectGetMinX(group) + 13.67, CGRectGetMinY(group) + 4.44) controlPoint2: CGPointMake(CGRectGetMinX(group) + 14.62, CGRectGetMinY(group) + 3.44)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group) + 25, CGRectGetMinY(group) + 2.22)];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 22.88, CGRectGetMinY(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 25, CGRectGetMinY(group) + 0.99) controlPoint2: CGPointMake(CGRectGetMinX(group) + 24.05, CGRectGetMinY(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 20.75, CGRectGetMinY(group) + 2.22) controlPoint1: CGPointMake(CGRectGetMinX(group) + 21.7, CGRectGetMinY(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 20.75, CGRectGetMinY(group) + 0.99)];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 22.88, CGRectGetMinY(group) + 4.44) controlPoint1: CGPointMake(CGRectGetMinX(group) + 20.75, CGRectGetMinY(group) + 3.44) controlPoint2: CGPointMake(CGRectGetMinX(group) + 21.7, CGRectGetMinY(group) + 4.44)];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 25, CGRectGetMinY(group) + 2.22) controlPoint1: CGPointMake(CGRectGetMinX(group) + 24.05, CGRectGetMinY(group) + 4.44) controlPoint2: CGPointMake(CGRectGetMinX(group) + 25, CGRectGetMinY(group) + 3.44)];
        [bezierPath closePath];
        [color setFill];
        [bezierPath fill];
    }
}

+ (void)drawTwitterIconWithFrame: (CGRect)frame color: (UIColor*)color on: (BOOL)on
{

    //// Variable Declarations
    BOOL notOn = !on;

    if (notOn)
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.91250 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.25050 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.81974 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.27582 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.88354 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.26325 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.85241 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.27193 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.89077 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.18680 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.85310 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.25587 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.87868 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22438 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.78813 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22586 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.85953 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.20522 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.82497 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.21864 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.67021 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.17500 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.75872 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.19458 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.71669 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.17500 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.50864 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.33597 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.58100 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.17500 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.50864 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.24708 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.51284 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.37262 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.50864 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.34854 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.51010 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.36084 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.17986 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.20451 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.37856 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.36595 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.25955 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.30183 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.15797 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.28537 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.16594 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22822 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.15797 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.25587 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.22988 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.41935 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.15797 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.34124 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.18650 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.39045 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.15666 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.39919 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.20336 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.41850 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.17845 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.41125 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.15666 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.40123 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.28627 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.55905 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.15666 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.47921 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.21234 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.54428 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.24366 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.56471 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.27267 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.56272 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.25846 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.56471 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.21333 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.56182 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.23330 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.56471 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.22318 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.56368 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.36419 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.67357 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.23386 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.62573 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.29352 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.67228 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.16357 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.74248 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.30893 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.71673 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.23925 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.74248 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.12500 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.74021 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.15053 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.74248 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.13767 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.74169 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.37266 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.81250 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.19651 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.78585 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.28144 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.81250 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.83238 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.35463 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.66983 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.81250 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.83238 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.56730 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.83188 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.33380 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.83238 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.34761 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.83220 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.34071 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.91250 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.25050 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.86346 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.31109 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.89088 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.28275 * CGRectGetHeight(frame))];
        [bezierPath closePath];
        [color setFill];
        [bezierPath fill];
    }
}

+ (void)drawFacebookIconWithFrame: (CGRect)frame color: (UIColor*)color on: (BOOL)on
{

    //// Variable Declarations
    BOOL notOn = !on;

    if (notOn)
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.81269 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.15020 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.21202 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.15020 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.17471 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.18809 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.19141 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.15020 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.17471 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.16717 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.17471 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.79958 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.21202 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.83750 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.17471 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.82051 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.19141 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.83750 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.53540 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.83750 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.53540 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.57133 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.44741 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.57133 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.44741 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.46760 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.53540 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.46760 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.53540 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.39110 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.66649 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.25399 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.53540 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.30234 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.58868 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.25399 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.74511 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.25808 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.70372 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.25399 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.73579 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.25680 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.74511 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.35083 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.69113 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.35086 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.64067 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.40135 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.64880 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.35086 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.64067 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.37132 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.64067 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.46760 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.74156 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.46760 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.72838 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.57133 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.64067 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.57133 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.64067 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.83750 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.81269 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.83750 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.85000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.79958 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.83333 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.83750 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.85000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.82051 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.85000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.18809 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.81269 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.15020 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.85000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.16717 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.83333 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.15020 * CGRectGetHeight(frame))];
        [bezierPath closePath];
        [color setFill];
        [bezierPath fill];
    }
}

+ (void)drawNowPlayingIconWithFrame: (CGRect)frame color: (UIColor*)color
{

    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.55086 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.31459 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.46065 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50035 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.50071 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.31477 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.46029 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.39789 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.55199 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.68571 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.46087 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.60281 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.50173 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.68574 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.66681 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.49352 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.60202 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.68549 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.66703 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.59606 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.55086 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.31459 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.66652 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.39103 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.60097 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.31444 * CGRectGetHeight(frame))];
    [bezierPath closePath];
    [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.64084 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.91330 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.43053 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50002 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.52686 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.91330 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.43053 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.72406 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.64084 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.08670 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.43053 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.27594 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.52686 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.08670 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.85108 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50002 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.75479 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.08670 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.85108 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.27594 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.64084 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.91330 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.85108 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.72406 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.75479 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.91330 * CGRectGetHeight(frame))];
    [bezierPath closePath];
    [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.64084 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.05000 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.50646 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.12094 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.59088 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.05000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.54492 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.07609 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.33752 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.27983 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.26374 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.27998 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.11250 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50053 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.17995 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.28017 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.11221 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.37895 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.26502 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.72042 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.11290 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.62222 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.18118 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.72057 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.33636 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.72035 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.51469 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.88809 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.64084 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.95000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.55144 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.92728 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.59434 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.95000 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.88750 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50002 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.77916 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.95000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.88750 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.75235 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.64084 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.05000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.88750 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.24769 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.77916 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.05000 * CGRectGetHeight(frame))];
    [bezierPath closePath];
    [color setFill];
    [bezierPath fill];
}

+ (void)drawAddIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group = CGRectMake(CGRectGetMinX(frame) + 6.5, CGRectGetMinY(frame) + 6.5, CGRectGetWidth(frame) - 13, CGRectGetHeight(frame) - 13);


    //// Group
    {
        //// Bezier 4 Drawing
        UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
        [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50003 * CGRectGetHeight(group))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50003 * CGRectGetHeight(group))];
        bezier4Path.lineCapStyle = kCGLineCapRound;

        bezier4Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier4Path.lineWidth = 1.2;
        [bezier4Path stroke];


        //// Bezier 6 Drawing
        UIBezierPath* bezier6Path = [UIBezierPath bezierPath];
        [bezier6Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.49997 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
        [bezier6Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.49997 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
        bezier6Path.lineCapStyle = kCGLineCapRound;

        bezier6Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier6Path.lineWidth = 1.2;
        [bezier6Path stroke];
    }
}

+ (void)drawExitIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group2 = CGRectMake(CGRectGetMinX(frame) + 1, CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.25099 + 0.46) + 0.04, floor((CGRectGetWidth(frame) - 1) * 0.59469 + 1.31) - 0.81, floor(CGRectGetHeight(frame) * 0.74901 - 0.46) - floor(CGRectGetHeight(frame) * 0.25099 + 0.46) + 0.92);


    //// Group 2
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group2) + 0.62864 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.36355 * CGRectGetHeight(group2))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 0.62864 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.00000 * CGRectGetHeight(group2))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 0.00000 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.00000 * CGRectGetHeight(group2))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 0.00000 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 1.00000 * CGRectGetHeight(group2))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 0.62864 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 1.00000 * CGRectGetHeight(group2))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 0.62864 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.63645 * CGRectGetHeight(group2))];
        bezierPath.lineCapStyle = kCGLineCapRound;

        bezierPath.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group2) + 0.80147 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.73421 * CGRectGetHeight(group2))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 1.00000 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.49994 * CGRectGetHeight(group2))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 0.80185 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.26630 * CGRectGetHeight(group2))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 0.80147 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.26579 * CGRectGetHeight(group2))];
        bezier2Path.lineCapStyle = kCGLineCapRound;

        bezier2Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(group2) + 1.00000 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.49994 * CGRectGetHeight(group2))];
        [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 0.29380 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.49994 * CGRectGetHeight(group2))];
        bezier3Path.lineCapStyle = kCGLineCapRound;

        bezier3Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier3Path.lineWidth = 1;
        [bezier3Path stroke];
    }
}

+ (void)drawSubscribeButtonWithFrame: (CGRect)frame color: (UIColor*)color on: (BOOL)on down: (BOOL)down
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.149];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notOn = !on;
    BOOL notDown = !down;
    BOOL downAndOn = down && on;


    //// Subframes
    CGRect subbed = CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame));
    CGRect notSubbed = CGRectMake(CGRectGetMinX(frame) + floor((CGRectGetWidth(frame) - 69) / 2 + 0.5), CGRectGetMinY(frame), 69, 62);


    if (on)
    {
        //// subbed
        {
            //// Oval Drawing
            UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(subbed) + floor(CGRectGetWidth(subbed) * 0.20290 + 0.5), CGRectGetMinY(subbed) + floor(CGRectGetHeight(subbed) * 0.00000 + 0.5), floor(CGRectGetWidth(subbed) * 0.79710 + 0.5) - floor(CGRectGetWidth(subbed) * 0.20290 + 0.5), floor(CGRectGetHeight(subbed) * 0.66129 + 0.5) - floor(CGRectGetHeight(subbed) * 0.00000 + 0.5))];
            [UIColor.whiteColor setFill];
            [ovalPath fill];


            //// Symbol Drawing
            CGRect symbolRect = CGRectMake(CGRectGetMinX(subbed) + floor(CGRectGetWidth(subbed) * 0.27536 + 0.5), CGRectGetMinY(subbed) + floor(CGRectGetHeight(subbed) * 0.08065 + 0.5), floor(CGRectGetWidth(subbed) * 0.72464 + 0.5) - floor(CGRectGetWidth(subbed) * 0.27536 + 0.5), floor(CGRectGetHeight(subbed) * 0.58065 + 0.5) - floor(CGRectGetHeight(subbed) * 0.08065 + 0.5));
            CGContextSaveGState(context);
            UIRectClip(symbolRect);
            CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

            [TungPodcastStyleKit drawSubscribeIconSolidWithFrame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height) color: color];
            CGContextRestoreGState(context);


            if (downAndOn)
            {
                //// Oval 4 Drawing
                UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(subbed) + floor(CGRectGetWidth(subbed) * 0.20290 + 0.5), CGRectGetMinY(subbed) + floor(CGRectGetHeight(subbed) * 0.00000 + 0.5), floor(CGRectGetWidth(subbed) * 0.79710 + 0.5) - floor(CGRectGetWidth(subbed) * 0.20290 + 0.5), floor(CGRectGetHeight(subbed) * 0.66129 + 0.5) - floor(CGRectGetHeight(subbed) * 0.00000 + 0.5))];
                [black10Alpha setFill];
                [oval4Path fill];
            }


            //// unsubscrbe Drawing
            CGRect unsubscrbeRect = CGRectMake(CGRectGetMinX(subbed) + floor(CGRectGetWidth(subbed) * 0.00000 + 0.5), CGRectGetMinY(subbed) + floor(CGRectGetHeight(subbed) * 0.66129 + 0.5), floor(CGRectGetWidth(subbed) * 1.00000 + 0.5) - floor(CGRectGetWidth(subbed) * 0.00000 + 0.5), floor(CGRectGetHeight(subbed) * 1.00000 + 0.5) - floor(CGRectGetHeight(subbed) * 0.66129 + 0.5));
            {
                NSString* textContent = @"Unsubscribe";
                NSMutableParagraphStyle* unsubscrbeStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
                unsubscrbeStyle.alignment = NSTextAlignmentCenter;

                NSDictionary* unsubscrbeFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 11], NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: unsubscrbeStyle};

                CGFloat unsubscrbeTextHeight = [textContent boundingRectWithSize: CGSizeMake(unsubscrbeRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: unsubscrbeFontAttributes context: nil].size.height;
                CGContextSaveGState(context);
                CGContextClipToRect(context, unsubscrbeRect);
                [textContent drawInRect: CGRectMake(CGRectGetMinX(unsubscrbeRect), CGRectGetMinY(unsubscrbeRect) + (CGRectGetHeight(unsubscrbeRect) - unsubscrbeTextHeight) / 2, CGRectGetWidth(unsubscrbeRect), unsubscrbeTextHeight) withAttributes: unsubscrbeFontAttributes];
                CGContextRestoreGState(context);
            }
        }
    }


    if (notOn)
    {
        //// not subbed
        {
            if (notDown)
            {
                //// Oval 2 Drawing
                UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(notSubbed) + 14, CGRectGetMinY(notSubbed), 41, 41)];
                [black15Alpha setFill];
                [oval2Path fill];
            }


            if (down)
            {
                //// Oval 3 Drawing
                UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(notSubbed) + 14, CGRectGetMinY(notSubbed), 41, 41)];
                [black25Alpha setFill];
                [oval3Path fill];
            }


            //// Symbol 2 Drawing
            CGRect symbol2Rect = CGRectMake(CGRectGetMinX(notSubbed) + 19, CGRectGetMinY(notSubbed) + 5, 31, 31);
            CGContextSaveGState(context);
            UIRectClip(symbol2Rect);
            CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);

            [TungPodcastStyleKit drawSubscribeIconWithFrame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height) color: white];
            CGContextRestoreGState(context);


            //// subscribe Drawing
            CGRect subscribeRect = CGRectMake(CGRectGetMinX(notSubbed), CGRectGetMinY(notSubbed) + 41, 69, 21);
            {
                NSString* textContent = @"Subscribe";
                NSMutableParagraphStyle* subscribeStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
                subscribeStyle.alignment = NSTextAlignmentCenter;

                NSDictionary* subscribeFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 11], NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: subscribeStyle};

                CGFloat subscribeTextHeight = [textContent boundingRectWithSize: CGSizeMake(subscribeRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: subscribeFontAttributes context: nil].size.height;
                CGContextSaveGState(context);
                CGContextClipToRect(context, subscribeRect);
                [textContent drawInRect: CGRectMake(CGRectGetMinX(subscribeRect), CGRectGetMinY(subscribeRect) + (CGRectGetHeight(subscribeRect) - subscribeTextHeight) / 2, CGRectGetWidth(subscribeRect), subscribeTextHeight) withAttributes: subscribeFontAttributes];
                CGContextRestoreGState(context);
            }
        }
    }
}

+ (void)drawClipButtonWithFrame: (CGRect)frame down: (BOOL)down
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notDown = !down;

    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }


    if (notDown)
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalPath fill];
    }


    //// Symbol Drawing
    CGRect symbolRect = CGRectMake(CGRectGetMinX(frame) + 3, CGRectGetMinY(frame) + 4, CGRectGetWidth(frame) - 7, CGRectGetHeight(frame) - 7);
    CGContextSaveGState(context);
    UIRectClip(symbolRect);
    CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

    [TungPodcastStyleKit drawClipIconWithFrame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height) color: TungPodcastStyleKit.tungColor];
    CGContextRestoreGState(context);
}

+ (void)drawRecommendButtonWithFrame: (CGRect)frame on: (BOOL)on down: (BOOL)down
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.149];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notOn = !on;
    BOOL notDown = !down;
    BOOL downAndOn = down && on;


    //// Subframes
    CGRect notReccd = CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame));
    CGRect reccd = CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame));


    if (notOn)
    {
        //// not recc'd
        {
            if (notDown)
            {
                //// Oval Drawing
                UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(notReccd) + floor(CGRectGetWidth(notReccd) * 0.00000 + 0.5), CGRectGetMinY(notReccd) + floor(CGRectGetHeight(notReccd) * 0.00000 + 0.5), floor(CGRectGetWidth(notReccd) * 1.00000 + 0.5) - floor(CGRectGetWidth(notReccd) * 0.00000 + 0.5), floor(CGRectGetHeight(notReccd) * 1.00000 + 0.5) - floor(CGRectGetHeight(notReccd) * 0.00000 + 0.5))];
                [black10Alpha setFill];
                [ovalPath fill];
            }


            if (down)
            {
                //// Oval 3 Drawing
                UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(notReccd) + floor(CGRectGetWidth(notReccd) * 0.00000 + 0.5), CGRectGetMinY(notReccd) + floor(CGRectGetHeight(notReccd) * 0.00000 + 0.5), floor(CGRectGetWidth(notReccd) * 1.00000 + 0.5) - floor(CGRectGetWidth(notReccd) * 0.00000 + 0.5), floor(CGRectGetHeight(notReccd) * 1.00000 + 0.5) - floor(CGRectGetHeight(notReccd) * 0.00000 + 0.5))];
                [black25Alpha setFill];
                [oval3Path fill];
            }


            //// Symbol Drawing
            CGRect symbolRect = CGRectMake(CGRectGetMinX(notReccd) + floor(CGRectGetWidth(notReccd) * 0.07317 + 0.5), CGRectGetMinY(notReccd) + floor(CGRectGetHeight(notReccd) * 0.04878 + 0.5), floor(CGRectGetWidth(notReccd) * 0.92683 + 0.5) - floor(CGRectGetWidth(notReccd) * 0.07317 + 0.5), floor(CGRectGetHeight(notReccd) * 0.90244 + 0.5) - floor(CGRectGetHeight(notReccd) * 0.04878 + 0.5));
            CGContextSaveGState(context);
            UIRectClip(symbolRect);
            CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

            [TungPodcastStyleKit drawRecommendIconWithFrame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height) color: TungPodcastStyleKit.tungColor];
            CGContextRestoreGState(context);
        }
    }


    if (on)
    {
        //// Recc'd
        {
            //// Oval 2 Drawing
            UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(reccd) + floor(CGRectGetWidth(reccd) * 0.00000 + 0.5), CGRectGetMinY(reccd) + floor(CGRectGetHeight(reccd) * 0.00000 + 0.5), floor(CGRectGetWidth(reccd) * 1.00000 + 0.5) - floor(CGRectGetWidth(reccd) * 0.00000 + 0.5), floor(CGRectGetHeight(reccd) * 1.00000 + 0.5) - floor(CGRectGetHeight(reccd) * 0.00000 + 0.5))];
            [TungPodcastStyleKit.tungColor setFill];
            [oval2Path fill];


            //// Symbol 2 Drawing
            CGRect symbol2Rect = CGRectMake(CGRectGetMinX(reccd) + floor(CGRectGetWidth(reccd) * 0.07317 + 0.5), CGRectGetMinY(reccd) + floor(CGRectGetHeight(reccd) * 0.04878 + 0.5), floor(CGRectGetWidth(reccd) * 0.92683 + 0.5) - floor(CGRectGetWidth(reccd) * 0.07317 + 0.5), floor(CGRectGetHeight(reccd) * 0.90244 + 0.5) - floor(CGRectGetHeight(reccd) * 0.04878 + 0.5));
            CGContextSaveGState(context);
            UIRectClip(symbol2Rect);
            CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);

            [TungPodcastStyleKit drawRecommendIconWithFrame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height) color: white];
            CGContextRestoreGState(context);


            if (downAndOn)
            {
                //// Oval 4 Drawing
                UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(reccd) + floor(CGRectGetWidth(reccd) * 0.00000 + 0.5), CGRectGetMinY(reccd) + floor(CGRectGetHeight(reccd) * 0.00000 + 0.5), floor(CGRectGetWidth(reccd) * 1.00000 + 0.5) - floor(CGRectGetWidth(reccd) * 0.00000 + 0.5), floor(CGRectGetHeight(reccd) * 1.00000 + 0.5) - floor(CGRectGetHeight(reccd) * 0.00000 + 0.5))];
                [black15Alpha setFill];
                [oval4Path fill];
            }
        }
    }
}

+ (void)drawShareButtonWithFrame: (CGRect)frame down: (BOOL)down
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notDown = !down;

    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }


    if (notDown)
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalPath fill];
    }


    //// Symbol Drawing
    CGRect symbolRect = CGRectMake(CGRectGetMinX(frame) + 2.5, CGRectGetMinY(frame) + 2.5, CGRectGetWidth(frame) - 5.5, CGRectGetHeight(frame) - 5.5);
    CGContextSaveGState(context);
    UIRectClip(symbolRect);
    CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

    [TungPodcastStyleKit drawShareIconWithFrame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height) color: TungPodcastStyleKit.tungColor];
    CGContextRestoreGState(context);
}

+ (void)drawWebsiteButtonWithFrame: (CGRect)frame down: (BOOL)down disabled: (BOOL)disabled
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];
    UIColor* tung20 = [TungPodcastStyleKit.tungColor colorWithAlphaComponent: 0.2];

    //// Variable Declarations
    BOOL notDown = !down;
    BOOL notDisabled = !disabled;

    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }


    if (notDown)
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalPath fill];
    }


    if (notDisabled)
    {
        //// Symbol Drawing
        CGRect symbolRect = CGRectMake(CGRectGetMinX(frame) + 1.5, CGRectGetMinY(frame), CGRectGetWidth(frame) - 0.5, CGRectGetHeight(frame));
        CGContextSaveGState(context);
        UIRectClip(symbolRect);
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

        [TungPodcastStyleKit drawWebsiteIconWithFrame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height) color: TungPodcastStyleKit.tungColor];
        CGContextRestoreGState(context);
    }


    if (disabled)
    {
        //// Symbol 2 Drawing
        CGRect symbol2Rect = CGRectMake(CGRectGetMinX(frame) + 1.5, CGRectGetMinY(frame), CGRectGetWidth(frame) - 0.5, CGRectGetHeight(frame));
        CGContextSaveGState(context);
        UIRectClip(symbol2Rect);
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);

        [TungPodcastStyleKit drawWebsiteIconWithFrame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height) color: tung20];
        CGContextRestoreGState(context);
    }
}

+ (void)drawSupportButtonWithFrame: (CGRect)frame color: (UIColor*)color down: (BOOL)down
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.149];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notDown = !down;

    if (down)
    {
        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.73486 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.26511 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.11869 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22386 * CGRectGetHeight(frame))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.26511 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.77611 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.11869 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.73486 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.88130 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.77611 * CGRectGetHeight(frame))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.73486 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22386 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.88130 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezier2Path closePath];
        [black25Alpha setFill];
        [bezier2Path fill];
    }


    if (notDown)
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.73486 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.26511 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.11869 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22386 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.26511 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.77611 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.11869 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.73486 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.88130 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.77611 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.73486 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22386 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.88130 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezierPath closePath];
        [black15Alpha setFill];
        [bezierPath fill];
    }


    //// Symbol Drawing
    CGRect symbolRect = CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.25974 + 0.5), CGRectGetMinY(frame) + 2, floor(CGRectGetWidth(frame) * 0.74026 + 0.5) - floor(CGRectGetWidth(frame) * 0.25974 + 0.5), CGRectGetHeight(frame) - 4);
    CGContextSaveGState(context);
    UIRectClip(symbolRect);
    CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

    [TungPodcastStyleKit drawDonateIconWithFrame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height) color: color];
    CGContextRestoreGState(context);
}

+ (void)drawClipRecordButtonWithFrame: (CGRect)frame on: (BOOL)on down: (BOOL)down disabled: (BOOL)disabled
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.149];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];
    UIColor* red = [UIColor colorWithRed: 1 green: 0 blue: 0 alpha: 1];

    //// Variable Declarations
    BOOL notOn = !on;
    BOOL notDown = !down;
    BOOL downAndOn = down && on;
    BOOL notDisabled = !disabled;


    //// Subframes
    CGRect group = CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame));
    CGRect recording = CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame));


    if (notOn)
    {
        //// Group
        {
            if (notDown)
            {
                //// Bezier Drawing
                UIBezierPath* bezierPath = [UIBezierPath bezierPath];
                [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.73486 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
                [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.26511 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
                [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.11869 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22386 * CGRectGetHeight(group))];
                [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.26511 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77611 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.11869 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
                [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.73486 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
                [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.88130 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77611 * CGRectGetHeight(group))];
                [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.73486 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22386 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.88130 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
                [bezierPath closePath];
                [black10Alpha setFill];
                [bezierPath fill];
            }


            if (down)
            {
                //// Bezier 3 Drawing
                UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
                [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.73486 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
                [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.26511 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
                [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.11869 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22386 * CGRectGetHeight(group))];
                [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.26511 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77611 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.11869 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
                [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.73486 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
                [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.88130 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77611 * CGRectGetHeight(group))];
                [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.73486 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22386 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.88130 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
                [bezier3Path closePath];
                [black25Alpha setFill];
                [bezier3Path fill];
            }


            if (notDisabled)
            {
                //// Symbol Drawing
                CGRect symbolRect = CGRectMake(CGRectGetMinX(group) + floor(CGRectGetWidth(group) * 0.01299 + 0.5), CGRectGetMinY(group) + floor(CGRectGetHeight(group) * 0.04878 + 0.5), floor(CGRectGetWidth(group) * 0.49351 + 0.5) - floor(CGRectGetWidth(group) * 0.01299 + 0.5), floor(CGRectGetHeight(group) * 0.95122 + 0.5) - floor(CGRectGetHeight(group) * 0.04878 + 0.5));
                CGContextSaveGState(context);
                UIRectClip(symbolRect);
                CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);
                CGContextScaleCTM(context, symbolRect.size.width / 40, symbolRect.size.height / 40);

                [TungPodcastStyleKit drawRecordIconWithColor: TungPodcastStyleKit.tungColor];
                CGContextRestoreGState(context);


                //// record text Drawing
                CGRect recordTextRect = CGRectMake(CGRectGetMinX(group) + floor(CGRectGetWidth(group) * 0.37662 + 0.5), CGRectGetMinY(group) + floor(CGRectGetHeight(group) * 0.24390 + 0.5), floor(CGRectGetWidth(group) * 0.94805 + 0.5) - floor(CGRectGetWidth(group) * 0.37662 + 0.5), floor(CGRectGetHeight(group) * 0.75610 + 0.5) - floor(CGRectGetHeight(group) * 0.24390 + 0.5));
                {
                    NSString* textContent = @"Record";
                    NSMutableParagraphStyle* recordTextStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
                    recordTextStyle.alignment = NSTextAlignmentCenter;

                    NSDictionary* recordTextFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 10], NSForegroundColorAttributeName: TungPodcastStyleKit.tungColor, NSParagraphStyleAttributeName: recordTextStyle};

                    CGFloat recordTextTextHeight = [textContent boundingRectWithSize: CGSizeMake(recordTextRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: recordTextFontAttributes context: nil].size.height;
                    CGContextSaveGState(context);
                    CGContextClipToRect(context, recordTextRect);
                    [textContent drawInRect: CGRectMake(CGRectGetMinX(recordTextRect), CGRectGetMinY(recordTextRect) + (CGRectGetHeight(recordTextRect) - recordTextTextHeight) / 2, CGRectGetWidth(recordTextRect), recordTextTextHeight) withAttributes: recordTextFontAttributes];
                    CGContextRestoreGState(context);
                }
            }


            if (disabled)
            {
                //// Symbol 3 Drawing
                CGRect symbol3Rect = CGRectMake(CGRectGetMinX(group) + floor(CGRectGetWidth(group) * 0.01299 + 0.5), CGRectGetMinY(group) + floor(CGRectGetHeight(group) * 0.04878 + 0.5), floor(CGRectGetWidth(group) * 0.49351 + 0.5) - floor(CGRectGetWidth(group) * 0.01299 + 0.5), floor(CGRectGetHeight(group) * 0.95122 + 0.5) - floor(CGRectGetHeight(group) * 0.04878 + 0.5));
                CGContextSaveGState(context);
                UIRectClip(symbol3Rect);
                CGContextTranslateCTM(context, symbol3Rect.origin.x, symbol3Rect.origin.y);
                CGContextScaleCTM(context, symbol3Rect.size.width / 40, symbol3Rect.size.height / 40);

                [TungPodcastStyleKit drawRecordIconWithColor: black15Alpha];
                CGContextRestoreGState(context);


                //// record text 2 Drawing
                CGRect recordText2Rect = CGRectMake(CGRectGetMinX(group) + floor(CGRectGetWidth(group) * 0.37662 + 0.5), CGRectGetMinY(group) + floor(CGRectGetHeight(group) * 0.24390 + 0.5), floor(CGRectGetWidth(group) * 0.94805 + 0.5) - floor(CGRectGetWidth(group) * 0.37662 + 0.5), floor(CGRectGetHeight(group) * 0.75610 + 0.5) - floor(CGRectGetHeight(group) * 0.24390 + 0.5));
                {
                    NSString* textContent = @"Record";
                    NSMutableParagraphStyle* recordText2Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
                    recordText2Style.alignment = NSTextAlignmentCenter;

                    NSDictionary* recordText2FontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 10], NSForegroundColorAttributeName: black15Alpha, NSParagraphStyleAttributeName: recordText2Style};

                    CGFloat recordText2TextHeight = [textContent boundingRectWithSize: CGSizeMake(recordText2Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: recordText2FontAttributes context: nil].size.height;
                    CGContextSaveGState(context);
                    CGContextClipToRect(context, recordText2Rect);
                    [textContent drawInRect: CGRectMake(CGRectGetMinX(recordText2Rect), CGRectGetMinY(recordText2Rect) + (CGRectGetHeight(recordText2Rect) - recordText2TextHeight) / 2, CGRectGetWidth(recordText2Rect), recordText2TextHeight) withAttributes: recordText2FontAttributes];
                    CGContextRestoreGState(context);
                }
            }
        }
    }


    if (on)
    {
        //// Recording
        {
            //// Bezier 2 Drawing
            UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
            [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(recording) + 0.73486 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.00000 * CGRectGetHeight(recording))];
            [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(recording) + 0.26511 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.00000 * CGRectGetHeight(recording))];
            [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(recording) + 0.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.50000 * CGRectGetHeight(recording)) controlPoint1: CGPointMake(CGRectGetMinX(recording) + 0.11869 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.00000 * CGRectGetHeight(recording)) controlPoint2: CGPointMake(CGRectGetMinX(recording) + 0.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.22386 * CGRectGetHeight(recording))];
            [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(recording) + 0.26511 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 1.00000 * CGRectGetHeight(recording)) controlPoint1: CGPointMake(CGRectGetMinX(recording) + 0.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.77611 * CGRectGetHeight(recording)) controlPoint2: CGPointMake(CGRectGetMinX(recording) + 0.11869 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 1.00000 * CGRectGetHeight(recording))];
            [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(recording) + 0.73486 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 1.00000 * CGRectGetHeight(recording))];
            [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(recording) + 1.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.50000 * CGRectGetHeight(recording)) controlPoint1: CGPointMake(CGRectGetMinX(recording) + 0.88130 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 1.00000 * CGRectGetHeight(recording)) controlPoint2: CGPointMake(CGRectGetMinX(recording) + 1.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.77611 * CGRectGetHeight(recording))];
            [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(recording) + 0.73486 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.00000 * CGRectGetHeight(recording)) controlPoint1: CGPointMake(CGRectGetMinX(recording) + 1.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.22386 * CGRectGetHeight(recording)) controlPoint2: CGPointMake(CGRectGetMinX(recording) + 0.88130 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.00000 * CGRectGetHeight(recording))];
            [bezier2Path closePath];
            [red setFill];
            [bezier2Path fill];


            //// Symbol 2 Drawing
            CGRect symbol2Rect = CGRectMake(CGRectGetMinX(recording) + floor(CGRectGetWidth(recording) * 0.03896 + 0.5), CGRectGetMinY(recording) + floor(CGRectGetHeight(recording) * 0.09756 + 0.5), floor(CGRectGetWidth(recording) * 0.48052 + 0.5) - floor(CGRectGetWidth(recording) * 0.03896 + 0.5), floor(CGRectGetHeight(recording) * 0.92683 + 0.5) - floor(CGRectGetHeight(recording) * 0.09756 + 0.5));
            CGContextSaveGState(context);
            UIRectClip(symbol2Rect);
            CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);
            CGContextScaleCTM(context, symbol2Rect.size.width / 40, symbol2Rect.size.height / 40);

            [TungPodcastStyleKit drawStopIconWithColor: white];
            CGContextRestoreGState(context);


            //// stop text Drawing
            CGRect stopTextRect = CGRectMake(CGRectGetMinX(recording) + floor(CGRectGetWidth(recording) * 0.37662 + 0.5), CGRectGetMinY(recording) + floor(CGRectGetHeight(recording) * 0.24390 + 0.5), floor(CGRectGetWidth(recording) * 0.94805 + 0.5) - floor(CGRectGetWidth(recording) * 0.37662 + 0.5), floor(CGRectGetHeight(recording) * 0.75610 + 0.5) - floor(CGRectGetHeight(recording) * 0.24390 + 0.5));
            {
                NSString* textContent = @"Stop";
                NSMutableParagraphStyle* stopTextStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
                stopTextStyle.alignment = NSTextAlignmentCenter;

                NSDictionary* stopTextFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 10], NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: stopTextStyle};

                CGFloat stopTextTextHeight = [textContent boundingRectWithSize: CGSizeMake(stopTextRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: stopTextFontAttributes context: nil].size.height;
                CGContextSaveGState(context);
                CGContextClipToRect(context, stopTextRect);
                [textContent drawInRect: CGRectMake(CGRectGetMinX(stopTextRect), CGRectGetMinY(stopTextRect) + (CGRectGetHeight(stopTextRect) - stopTextTextHeight) / 2, CGRectGetWidth(stopTextRect), stopTextTextHeight) withAttributes: stopTextFontAttributes];
                CGContextRestoreGState(context);
            }


            if (downAndOn)
            {
                //// Bezier 4 Drawing
                UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
                [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(recording) + 0.73486 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.00000 * CGRectGetHeight(recording))];
                [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(recording) + 0.26511 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.00000 * CGRectGetHeight(recording))];
                [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(recording) + 0.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.50000 * CGRectGetHeight(recording)) controlPoint1: CGPointMake(CGRectGetMinX(recording) + 0.11869 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.00000 * CGRectGetHeight(recording)) controlPoint2: CGPointMake(CGRectGetMinX(recording) + 0.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.22386 * CGRectGetHeight(recording))];
                [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(recording) + 0.26511 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 1.00000 * CGRectGetHeight(recording)) controlPoint1: CGPointMake(CGRectGetMinX(recording) + 0.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.77611 * CGRectGetHeight(recording)) controlPoint2: CGPointMake(CGRectGetMinX(recording) + 0.11869 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 1.00000 * CGRectGetHeight(recording))];
                [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(recording) + 0.73486 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 1.00000 * CGRectGetHeight(recording))];
                [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(recording) + 1.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.50000 * CGRectGetHeight(recording)) controlPoint1: CGPointMake(CGRectGetMinX(recording) + 0.88130 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 1.00000 * CGRectGetHeight(recording)) controlPoint2: CGPointMake(CGRectGetMinX(recording) + 1.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.77611 * CGRectGetHeight(recording))];
                [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(recording) + 0.73486 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.00000 * CGRectGetHeight(recording)) controlPoint1: CGPointMake(CGRectGetMinX(recording) + 1.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.22386 * CGRectGetHeight(recording)) controlPoint2: CGPointMake(CGRectGetMinX(recording) + 0.88130 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.00000 * CGRectGetHeight(recording))];
                [bezier4Path closePath];
                [black15Alpha setFill];
                [bezier4Path fill];
            }
        }
    }
}

+ (void)drawClipPlayButtonWithFrame: (CGRect)frame on: (BOOL)on down: (BOOL)down disabled: (BOOL)disabled
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.149];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notDown = !down;
    BOOL notDisabledNotOn = !disabled && !on;

    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }


    if (notDown)
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalPath fill];
    }


    if (notDisabledNotOn)
    {
        //// play Drawing
        CGRect playRect = CGRectMake(CGRectGetMinX(frame) + 3.5, CGRectGetMinY(frame) + 2.5, CGRectGetWidth(frame) - 5.5, CGRectGetHeight(frame) - 5.5);
        CGContextSaveGState(context);
        UIRectClip(playRect);
        CGContextTranslateCTM(context, playRect.origin.x, playRect.origin.y);
        CGContextScaleCTM(context, playRect.size.width / 40, playRect.size.height / 40);

        [TungPodcastStyleKit drawPlayIconWithColor: TungPodcastStyleKit.tungColor];
        CGContextRestoreGState(context);
    }


    if (disabled)
    {
        //// Symbol 2 Drawing
        CGRect symbol2Rect = CGRectMake(CGRectGetMinX(frame) + 3.5, CGRectGetMinY(frame) + 2.5, CGRectGetWidth(frame) - 5.5, CGRectGetHeight(frame) - 5.5);
        CGContextSaveGState(context);
        UIRectClip(symbol2Rect);
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);
        CGContextScaleCTM(context, symbol2Rect.size.width / 40, symbol2Rect.size.height / 40);

        [TungPodcastStyleKit drawPlayIconWithColor: black15Alpha];
        CGContextRestoreGState(context);
    }


    if (on)
    {
        //// stop Drawing
        CGRect stopRect = CGRectMake(CGRectGetMinX(frame) + 4, CGRectGetMinY(frame) + 4, CGRectGetWidth(frame) - 8, CGRectGetHeight(frame) - 8);
        CGContextSaveGState(context);
        UIRectClip(stopRect);
        CGContextTranslateCTM(context, stopRect.origin.x, stopRect.origin.y);
        CGContextScaleCTM(context, stopRect.size.width / 40, stopRect.size.height / 40);

        [TungPodcastStyleKit drawStopIconWithColor: TungPodcastStyleKit.tungColor];
        CGContextRestoreGState(context);
    }
}

+ (void)drawClipCancelButtonWithFrame: (CGRect)frame down: (BOOL)down disabled: (BOOL)disabled
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.149];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notDown = !down;
    BOOL notDisabled = !disabled;

    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }


    if (notDown)
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalPath fill];
    }


    if (notDisabled)
    {
        //// Symbol Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, CGRectGetMinX(frame) + 0.50000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame));

        CGRect symbolRect = CGRectMake(-17.5, -17.5, 35.5, 35.5);
        CGContextSaveGState(context);
        UIRectClip(symbolRect);
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

        [TungPodcastStyleKit drawCancelIconWithFrame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height) color: TungPodcastStyleKit.tungColor];
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);
    }


    if (disabled)
    {
        //// Symbol 2 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, CGRectGetMinX(frame) + 0.50000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame));

        CGRect symbol2Rect = CGRectMake(-17.5, -17.5, 35.5, 35.5);
        CGContextSaveGState(context);
        UIRectClip(symbol2Rect);
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);

        [TungPodcastStyleKit drawCancelIconWithFrame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height) color: black15Alpha];
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);
    }
}

+ (void)drawClipOkButtonWithFrame: (CGRect)frame down: (BOOL)down disabled: (BOOL)disabled
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.149];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notDown = !down;
    BOOL notDisabled = !disabled;

    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }


    if (notDown)
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalPath fill];
    }


    if (notDisabled)
    {
        //// Symbol Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, CGRectGetMinX(frame) + 0.49966 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50567 * CGRectGetHeight(frame));

        CGRect symbolRect = CGRectMake(-18.49, -18.73, 37.5, 38);
        CGContextSaveGState(context);
        UIRectClip(symbolRect);
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

        [TungPodcastStyleKit drawCheckmarkIconWithFrame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height) color: TungPodcastStyleKit.tungColor];
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);
    }


    if (disabled)
    {
        //// Symbol 2 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, CGRectGetMinX(frame) + 0.49966 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50567 * CGRectGetHeight(frame));

        CGRect symbol2Rect = CGRectMake(-18.49, -18.73, 37.5, 38);
        CGContextSaveGState(context);
        UIRectClip(symbol2Rect);
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);

        [TungPodcastStyleKit drawCheckmarkIconWithFrame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height) color: black15Alpha];
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);
    }
}

+ (void)drawHideControlsButtonWithFrame: (CGRect)frame
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* mediumGray = [UIColor colorWithRed: 0.504 green: 0.512 blue: 0.525 alpha: 1];

    //// Symbol Drawing
    CGRect symbolRect = CGRectMake(CGRectGetMinX(frame) + floor((CGRectGetWidth(frame) - 41) * 0.50000 + 0.5), CGRectGetMinY(frame) + 7, 41, 13);
    CGContextSaveGState(context);
    UIRectClip(symbolRect);
    CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);
    CGContextScaleCTM(context, symbolRect.size.width / 33, symbolRect.size.height / 11);

    [TungPodcastStyleKit drawHideIconWithColor: mediumGray];
    CGContextRestoreGState(context);
}

+ (void)drawShowControlsButtonWithFrame: (CGRect)frame
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Symbol Drawing
    CGRect symbolRect = CGRectMake(CGRectGetMinX(frame) + CGRectGetWidth(frame) - 51, CGRectGetMinY(frame) + 9, 41, 13);
    CGContextSaveGState(context);
    UIRectClip(symbolRect);
    CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);
    CGContextScaleCTM(context, symbolRect.size.width / 33, symbolRect.size.height / 11);

    [TungPodcastStyleKit drawShowIconWithColor: TungPodcastStyleKit.tungColor];
    CGContextRestoreGState(context);
}

+ (void)drawCommentButtonWithFrame: (CGRect)frame on: (BOOL)on down: (BOOL)down disabled: (BOOL)disabled
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.149];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];
    UIColor* tung20 = [TungPodcastStyleKit.tungColor colorWithAlphaComponent: 0.2];

    //// Variable Declarations
    BOOL notDown = !down;
    BOOL downAndOn = down && on;
    BOOL notDisabled = !disabled;

    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }


    if (notDown)
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalPath fill];
    }


    if (notDisabled)
    {
        //// Symbol Drawing
        CGRect symbolRect = CGRectMake(CGRectGetMinX(frame) + 3.5, CGRectGetMinY(frame) + 4, CGRectGetWidth(frame) - 7.5, CGRectGetHeight(frame) - 8);
        CGContextSaveGState(context);
        UIRectClip(symbolRect);
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

        [TungPodcastStyleKit drawCommentIconWithFrame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height) color: TungPodcastStyleKit.tungColor];
        CGContextRestoreGState(context);
    }


    if (disabled)
    {
        //// Symbol 3 Drawing
        CGRect symbol3Rect = CGRectMake(CGRectGetMinX(frame) + 3.5, CGRectGetMinY(frame) + 4, CGRectGetWidth(frame) - 7.5, CGRectGetHeight(frame) - 8);
        CGContextSaveGState(context);
        UIRectClip(symbol3Rect);
        CGContextTranslateCTM(context, symbol3Rect.origin.x, symbol3Rect.origin.y);

        [TungPodcastStyleKit drawCommentIconWithFrame: CGRectMake(0, 0, symbol3Rect.size.width, symbol3Rect.size.height) color: tung20];
        CGContextRestoreGState(context);
    }


    if (on)
    {
        //// Oval 3 Drawing
        UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [TungPodcastStyleKit.tungColor setFill];
        [oval3Path fill];


        //// Symbol 2 Drawing
        CGRect symbol2Rect = CGRectMake(CGRectGetMinX(frame) + 3.5, CGRectGetMinY(frame) + 4, CGRectGetWidth(frame) - 7.5, CGRectGetHeight(frame) - 8);
        CGContextSaveGState(context);
        UIRectClip(symbol2Rect);
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);

        [TungPodcastStyleKit drawCommentIconWithFrame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height) color: white];
        CGContextRestoreGState(context);
    }


    if (downAndOn)
    {
        //// Oval 4 Drawing
        UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black15Alpha setFill];
        [oval4Path fill];
    }
}

+ (void)drawTwitterButtonWithFrame: (CGRect)frame on: (BOOL)on down: (BOOL)down
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.149];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];
    UIColor* twitterBlue = [UIColor colorWithRed: 0.165 green: 0.663 blue: 0.878 alpha: 1];

    //// Variable Declarations
    BOOL notOn = !on;
    BOOL notDown = !down;

    if (notDown)
    {
        //// Oval off Drawing
        UIBezierPath* ovalOffPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalOffPath fill];
    }


    if (on)
    {
        //// Oval on Drawing
        UIBezierPath* ovalOnPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [twitterBlue setFill];
        [ovalOnPath fill];
    }


    if (notOn)
    {
        //// twitter off Drawing
        CGRect twitterOffRect = CGRectMake(CGRectGetMinX(frame) + 5, CGRectGetMinY(frame) + 5, CGRectGetWidth(frame) - 9, CGRectGetHeight(frame) - 9);
        CGContextSaveGState(context);
        UIRectClip(twitterOffRect);
        CGContextTranslateCTM(context, twitterOffRect.origin.x, twitterOffRect.origin.y);

        [TungPodcastStyleKit drawTwitterIconWithFrame: CGRectMake(0, 0, twitterOffRect.size.width, twitterOffRect.size.height) color: black15Alpha on: NO];
        CGContextRestoreGState(context);
    }


    if (on)
    {
        //// twitter on Drawing
        CGRect twitterOnRect = CGRectMake(CGRectGetMinX(frame) + 5, CGRectGetMinY(frame) + 5, CGRectGetWidth(frame) - 9, CGRectGetHeight(frame) - 9);
        CGContextSaveGState(context);
        UIRectClip(twitterOnRect);
        CGContextTranslateCTM(context, twitterOnRect.origin.x, twitterOnRect.origin.y);

        [TungPodcastStyleKit drawTwitterIconWithFrame: CGRectMake(0, 0, twitterOnRect.size.width, twitterOnRect.size.height) color: white on: NO];
        CGContextRestoreGState(context);
    }


    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }
}

+ (void)drawFacebookButtonWithFrame: (CGRect)frame on: (BOOL)on down: (BOOL)down
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.149];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];
    UIColor* facebookBlue = [UIColor colorWithRed: 0.239 green: 0.353 blue: 0.596 alpha: 1];

    //// Variable Declarations
    BOOL notOn = !on;

    if (notOn)
    {
        //// Oval off Drawing
        UIBezierPath* ovalOffPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalOffPath fill];
    }


    if (on)
    {
        //// Oval on Drawing
        UIBezierPath* ovalOnPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [facebookBlue setFill];
        [ovalOnPath fill];
    }


    if (notOn)
    {
        //// facebook off Drawing
        CGRect facebookOffRect = CGRectMake(CGRectGetMinX(frame) + 5, CGRectGetMinY(frame) + 5, CGRectGetWidth(frame) - 10, CGRectGetHeight(frame) - 10);
        CGContextSaveGState(context);
        UIRectClip(facebookOffRect);
        CGContextTranslateCTM(context, facebookOffRect.origin.x, facebookOffRect.origin.y);

        [TungPodcastStyleKit drawFacebookIconWithFrame: CGRectMake(0, 0, facebookOffRect.size.width, facebookOffRect.size.height) color: black15Alpha on: NO];
        CGContextRestoreGState(context);
    }


    if (on)
    {
        //// facebook on Drawing
        CGRect facebookOnRect = CGRectMake(CGRectGetMinX(frame) + 5, CGRectGetMinY(frame) + 5, CGRectGetWidth(frame) - 10, CGRectGetHeight(frame) - 10);
        CGContextSaveGState(context);
        UIRectClip(facebookOnRect);
        CGContextTranslateCTM(context, facebookOnRect.origin.x, facebookOnRect.origin.y);

        [TungPodcastStyleKit drawFacebookIconWithFrame: CGRectMake(0, 0, facebookOnRect.size.width, facebookOnRect.size.height) color: white on: NO];
        CGContextRestoreGState(context);
    }


    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }
}

+ (void)drawPillTextbuttonWithFrame: (CGRect)frame down: (BOOL)down disabled: (BOOL)disabled buttonText: (NSString*)buttonText
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* tung20 = [TungPodcastStyleKit.tungColor colorWithAlphaComponent: 0.2];

    //// Variable Declarations
    BOOL notDisabled = !disabled;

    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.73486 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.26511 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.11869 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22386 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.26511 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.77611 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.11869 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.73486 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.88130 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.77611 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.73486 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22386 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.88130 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
    [bezierPath closePath];
    [tung20 setFill];
    [bezierPath fill];


    if (down)
    {
        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.73486 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.26511 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.11869 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22386 * CGRectGetHeight(frame))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.26511 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.77611 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.11869 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame))];
        [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.73486 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.88130 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.77611 * CGRectGetHeight(frame))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.73486 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22386 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.88130 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezier3Path closePath];
        [black10Alpha setFill];
        [bezier3Path fill];
    }


    if (notDisabled)
    {
        //// pillButtonText Drawing
        CGRect pillButtonTextRect = CGRectMake(CGRectGetMinX(frame) + floor((CGRectGetWidth(frame) - 77) / 2 + 0.5), CGRectGetMinY(frame) + floor((CGRectGetHeight(frame) - 27) * 0.42857 + 0.5), 77, 27);
        NSMutableParagraphStyle* pillButtonTextStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        pillButtonTextStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* pillButtonTextFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 15], NSForegroundColorAttributeName: TungPodcastStyleKit.tungColor, NSParagraphStyleAttributeName: pillButtonTextStyle};

        CGFloat pillButtonTextTextHeight = [buttonText boundingRectWithSize: CGSizeMake(pillButtonTextRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: pillButtonTextFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, pillButtonTextRect);
        [buttonText drawInRect: CGRectMake(CGRectGetMinX(pillButtonTextRect), CGRectGetMinY(pillButtonTextRect) + (CGRectGetHeight(pillButtonTextRect) - pillButtonTextTextHeight) / 2, CGRectGetWidth(pillButtonTextRect), pillButtonTextTextHeight) withAttributes: pillButtonTextFontAttributes];
        CGContextRestoreGState(context);
    }


    if (disabled)
    {
        //// pillButtonText 2 Drawing
        CGRect pillButtonText2Rect = CGRectMake(CGRectGetMinX(frame) + floor((CGRectGetWidth(frame) - 77) / 2 + 0.5), CGRectGetMinY(frame) + floor((CGRectGetHeight(frame) - 27) * 0.42857 + 0.5), 77, 27);
        NSMutableParagraphStyle* pillButtonText2Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        pillButtonText2Style.alignment = NSTextAlignmentCenter;

        NSDictionary* pillButtonText2FontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 15], NSForegroundColorAttributeName: tung20, NSParagraphStyleAttributeName: pillButtonText2Style};

        CGFloat pillButtonText2TextHeight = [buttonText boundingRectWithSize: CGSizeMake(pillButtonText2Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: pillButtonText2FontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, pillButtonText2Rect);
        [buttonText drawInRect: CGRectMake(CGRectGetMinX(pillButtonText2Rect), CGRectGetMinY(pillButtonText2Rect) + (CGRectGetHeight(pillButtonText2Rect) - pillButtonText2TextHeight) / 2, CGRectGetWidth(pillButtonText2Rect), pillButtonText2TextHeight) withAttributes: pillButtonText2FontAttributes];
        CGContextRestoreGState(context);
    }
}

+ (void)drawSpeedButtonWithFrame: (CGRect)frame down: (BOOL)down buttonText: (NSString*)buttonText
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notDown = !down;

    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }


    if (notDown)
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalPath fill];
    }


    //// Text Drawing
    CGRect textRect = CGRectMake(CGRectGetMinX(frame) + floor((CGRectGetWidth(frame) - 41) / 2 + 0.5), CGRectGetMinY(frame) + floor((CGRectGetHeight(frame) - 32) * 0.44444 + 0.5), 41, 32);
    NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    textStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"HelveticaNeue-Light" size: UIFont.labelFontSize], NSForegroundColorAttributeName: TungPodcastStyleKit.tungColor, NSParagraphStyleAttributeName: textStyle};

    CGFloat textTextHeight = [buttonText boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textRect);
    [buttonText drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
    CGContextRestoreGState(context);
}

+ (void)drawSaveButtonWithFrame: (CGRect)frame on: (BOOL)on down: (BOOL)down
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.149];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notOn = !on;
    BOOL downAndOn = down && on;

    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }


    if (notOn)
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalPath fill];
    }


    if (on)
    {
        //// Oval 3 Drawing
        UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [TungPodcastStyleKit.tungColor setFill];
        [oval3Path fill];
    }


    if (notOn)
    {
        //// Symbol Drawing
        CGRect symbolRect = CGRectMake(CGRectGetMinX(frame) + 2.5, CGRectGetMinY(frame) + 1, CGRectGetWidth(frame) - 5.5, CGRectGetHeight(frame) - 5);
        CGContextSaveGState(context);
        UIRectClip(symbolRect);
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

        [TungPodcastStyleKit drawSaveIconWithFrame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height) color: TungPodcastStyleKit.tungColor];
        CGContextRestoreGState(context);
    }


    if (on)
    {
        //// Symbol 2 Drawing
        CGRect symbol2Rect = CGRectMake(CGRectGetMinX(frame) + 2.5, CGRectGetMinY(frame) + 1, CGRectGetWidth(frame) - 5.5, CGRectGetHeight(frame) - 5);
        CGContextSaveGState(context);
        UIRectClip(symbol2Rect);
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);

        [TungPodcastStyleKit drawSaveIconWithFrame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height) color: white];
        CGContextRestoreGState(context);
    }


    if (downAndOn)
    {
        //// Oval 4 Drawing
        UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black15Alpha setFill];
        [oval4Path fill];
    }
}

+ (void)drawTungButtonOnWhiteWithFrame: (CGRect)frame down: (BOOL)down buttonText: (NSString*)buttonText
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* tung20 = [TungPodcastStyleKit.tungColor colorWithAlphaComponent: 0.2];

    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.88648 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.26728 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.88648 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.73272 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.94107 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.39581 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.94107 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.60419 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.78763 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.82911 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.85918 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.79698 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.82341 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.82911 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.21774 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.82911 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.11890 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.73272 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.18197 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.82911 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.14619 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.79698 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.11890 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.26728 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.06431 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.60419 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.06431 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.39581 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.21774 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.17089 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.14619 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.20302 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.18197 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.17089 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.78763 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.17089 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.88648 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.26728 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.82341 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.17089 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.85918 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.20302 * CGRectGetHeight(frame))];
    [bezierPath closePath];
    [UIColor.whiteColor setFill];
    [bezierPath fill];
    [TungPodcastStyleKit.tungColor setStroke];
    bezierPath.lineWidth = 1;
    [bezierPath stroke];


    if (down)
    {
        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 164.88, CGRectGetMinY(frame) + 21.12)];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 164.88, CGRectGetMinY(frame) + 57.88) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 175.04, CGRectGetMinY(frame) + 31.27) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 175.04, CGRectGetMinY(frame) + 47.73)];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 146.5, CGRectGetMinY(frame) + 65.5) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 159.81, CGRectGetMinY(frame) + 62.96) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 153.15, CGRectGetMinY(frame) + 65.5)];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 40.5, CGRectGetMinY(frame) + 65.5)];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 22.12, CGRectGetMinY(frame) + 57.88) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 33.85, CGRectGetMinY(frame) + 65.5) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 27.19, CGRectGetMinY(frame) + 62.96)];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 22.12, CGRectGetMinY(frame) + 21.12) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 11.96, CGRectGetMinY(frame) + 47.73) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 11.96, CGRectGetMinY(frame) + 31.27)];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 40.5, CGRectGetMinY(frame) + 13.5) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 27.19, CGRectGetMinY(frame) + 16.04) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 33.85, CGRectGetMinY(frame) + 13.5)];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 146.5, CGRectGetMinY(frame) + 13.5)];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 164.88, CGRectGetMinY(frame) + 21.12) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 153.15, CGRectGetMinY(frame) + 13.5) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 159.81, CGRectGetMinY(frame) + 16.04)];
        [bezier2Path closePath];
        [tung20 setFill];
        [bezier2Path fill];
        [TungPodcastStyleKit.tungColor setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];
    }


    //// Text Drawing
    CGRect textRect = CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.08065 + 0.5), CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.32911 + 0.5), floor(CGRectGetWidth(frame) * 0.93011 + 0.5) - floor(CGRectGetWidth(frame) * 0.08065 + 0.5), floor(CGRectGetHeight(frame) * 0.68354 + 0.5) - floor(CGRectGetHeight(frame) * 0.32911 + 0.5));
    NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    textStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: UIFont.buttonFontSize], NSForegroundColorAttributeName: TungPodcastStyleKit.tungColor, NSParagraphStyleAttributeName: textStyle};

    CGFloat textTextHeight = [buttonText boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textRect);
    [buttonText drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
    CGContextRestoreGState(context);
}

+ (void)drawFollowButtonWithFrame: (CGRect)frame on: (BOOL)on down: (BOOL)down
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* white2 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.218];

    //// Variable Declarations
    BOOL notOn = !on;


    //// Subframes
    CGRect group = CGRectMake(CGRectGetMinX(frame) + 1.47, CGRectGetMinY(frame) + 1.91, floor((CGRectGetWidth(frame) - 1.47) * 0.98895 + 1.36) - 0.86, floor((CGRectGetHeight(frame) - 1.91) * 0.94686 + 0.5));


    //// Group
    {
        if (down)
        {
            //// Bezier down state Drawing
            UIBezierPath* bezierDownStatePath = [UIBezierPath bezierPath];
            [bezierDownStatePath moveToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group))];
            [bezierDownStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.87037 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77621 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.94198 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
            [bezierDownStatePath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.13122 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
            [bezierDownStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.00159 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.05963 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.00159 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77621 * CGRectGetHeight(group))];
            [bezierDownStatePath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.00159 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group))];
            [bezierDownStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.13122 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.00159 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22388 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.05963 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
            [bezierDownStatePath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.87037 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
            [bezierDownStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.94197 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00003 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22391 * CGRectGetHeight(group))];
            [bezierDownStatePath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group))];
            [bezierDownStatePath closePath];
            [white2 setFill];
            [bezierDownStatePath fill];
            [UIColor.whiteColor setStroke];
            bezierDownStatePath.lineWidth = 1;
            [bezierDownStatePath stroke];
        }


        if (notOn)
        {
            //// follow
            {
                //// Bezier up state Drawing
                UIBezierPath* bezierUpStatePath = [UIBezierPath bezierPath];
                [bezierUpStatePath moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.99841 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group))];
                [bezierUpStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.86878 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.99841 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77621 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.94039 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
                [bezierUpStatePath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.12963 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
                [bezierUpStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.05804 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77621 * CGRectGetHeight(group))];
                [bezierUpStatePath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group))];
                [bezierUpStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.12963 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22388 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.05804 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
                [bezierUpStatePath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.86878 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
                [bezierUpStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.99841 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.94038 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00003 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.99841 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22391 * CGRectGetHeight(group))];
                [bezierUpStatePath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.99841 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group))];
                [bezierUpStatePath closePath];
                [UIColor.whiteColor setStroke];
                bezierUpStatePath.lineWidth = 1;
                [bezierUpStatePath stroke];


                //// Oval 2 Drawing
                UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(group) + floor(CGRectGetWidth(group) * 0.02001 - 0.12) + 0.62, CGRectGetMinY(group) + floor(CGRectGetHeight(group) * 0.07561 - 0.07) + 0.57, floor(CGRectGetWidth(group) * 0.24007 + 0.02) - floor(CGRectGetWidth(group) * 0.02001 - 0.12) - 0.14, floor(CGRectGetHeight(group) * 0.92439 + 0.07) - floor(CGRectGetHeight(group) * 0.07561 - 0.07) - 0.14)];
                [white setFill];
                [oval2Path fill];


                //// Symbol 2 Drawing
                CGRect symbol2Rect = CGRectMake(CGRectGetMinX(group) + floor(CGRectGetWidth(group) * 0.02382 + 0.38) + 0.12, CGRectGetMinY(group) + floor(CGRectGetHeight(group) * 0.12332 - 0.07) + 0.57, floor(CGRectGetWidth(group) * 0.23151 + 0.14) - floor(CGRectGetWidth(group) * 0.02382 + 0.38) + 0.24, floor(CGRectGetHeight(group) * 0.92439 - 0.31) - floor(CGRectGetHeight(group) * 0.12332 - 0.07) + 0.24);
                CGContextSaveGState(context);
                UIRectClip(symbol2Rect);
                CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);

                [TungPodcastStyleKit drawAddIconWithFrame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height) color: TungPodcastStyleKit.tungColorMediumLight];
                CGContextRestoreGState(context);


                if (notOn)
                {
                    //// Text off Drawing
                    CGRect textOffRect = CGRectMake(CGRectGetMinX(group) + floor(CGRectGetWidth(group) * 0.24892 - 0.14) + 0.64, CGRectGetMinY(group) + floor(CGRectGetHeight(group) * 0.00000 + 0.5), floor(CGRectGetWidth(group) * 0.88794 + 0.06) - floor(CGRectGetWidth(group) * 0.24892 - 0.14) - 0.2, floor(CGRectGetHeight(group) * 1.00000 + 0.5) - floor(CGRectGetHeight(group) * 0.00000 + 0.5));
                    {
                        NSString* textContent = @"Follow";
                        NSMutableParagraphStyle* textOffStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
                        textOffStyle.alignment = NSTextAlignmentCenter;

                        NSDictionary* textOffFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 15], NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: textOffStyle};

                        CGFloat textOffTextHeight = [textContent boundingRectWithSize: CGSizeMake(textOffRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textOffFontAttributes context: nil].size.height;
                        CGContextSaveGState(context);
                        CGContextClipToRect(context, textOffRect);
                        [textContent drawInRect: CGRectMake(CGRectGetMinX(textOffRect), CGRectGetMinY(textOffRect) + (CGRectGetHeight(textOffRect) - textOffTextHeight) / 2, CGRectGetWidth(textOffRect), textOffTextHeight) withAttributes: textOffFontAttributes];
                        CGContextRestoreGState(context);
                    }
                }
            }
        }


        if (on)
        {
            //// following
            {
                if (on)
                {
                    //// Bezier on state Drawing
                    UIBezierPath* bezierOnStatePath = [UIBezierPath bezierPath];
                    [bezierOnStatePath moveToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group))];
                    [bezierOnStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.87037 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77621 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.94198 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
                    [bezierOnStatePath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.13122 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
                    [bezierOnStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.00159 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.05963 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.00159 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77621 * CGRectGetHeight(group))];
                    [bezierOnStatePath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.00159 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group))];
                    [bezierOnStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.13122 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.00159 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22388 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.05963 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
                    [bezierOnStatePath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.87037 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
                    [bezierOnStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.94197 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00003 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22391 * CGRectGetHeight(group))];
                    [bezierOnStatePath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group))];
                    [bezierOnStatePath closePath];
                    [UIColor.whiteColor setFill];
                    [bezierOnStatePath fill];
                    [UIColor.whiteColor setStroke];
                    bezierOnStatePath.lineWidth = 1;
                    [bezierOnStatePath stroke];
                }


                //// Text on Drawing
                CGRect textOnRect = CGRectMake(CGRectGetMinX(group) + floor(CGRectGetWidth(group) * 0.24780 + 0) + 0.5, CGRectGetMinY(group) + floor(CGRectGetHeight(group) * 0.00000 + 0.5), floor(CGRectGetWidth(group) * 0.93629 - 0.28) - floor(CGRectGetWidth(group) * 0.24780 + 0) + 0.29, floor(CGRectGetHeight(group) * 1.00000 + 0.5) - floor(CGRectGetHeight(group) * 0.00000 + 0.5));
                {
                    NSString* textContent = @"Following";
                    NSMutableParagraphStyle* textOnStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
                    textOnStyle.alignment = NSTextAlignmentCenter;

                    NSDictionary* textOnFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 15], NSForegroundColorAttributeName: TungPodcastStyleKit.tungColor, NSParagraphStyleAttributeName: textOnStyle};

                    CGFloat textOnTextHeight = [textContent boundingRectWithSize: CGSizeMake(textOnRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textOnFontAttributes context: nil].size.height;
                    CGContextSaveGState(context);
                    CGContextClipToRect(context, textOnRect);
                    [textContent drawInRect: CGRectMake(CGRectGetMinX(textOnRect), CGRectGetMinY(textOnRect) + (CGRectGetHeight(textOnRect) - textOnTextHeight) / 2, CGRectGetWidth(textOnRect), textOnTextHeight) withAttributes: textOnFontAttributes];
                    CGContextRestoreGState(context);
                }


                //// Oval Drawing
                UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(group) + floor(CGRectGetWidth(group) * 0.02238 - 0.43) + 0.93, CGRectGetMinY(group) + floor(CGRectGetHeight(group) * 0.07561 - 0.07) + 0.57, floor(CGRectGetWidth(group) * 0.24244 - 0.29) - floor(CGRectGetWidth(group) * 0.02238 - 0.43) - 0.14, floor(CGRectGetHeight(group) * 0.92439 + 0.07) - floor(CGRectGetHeight(group) * 0.07561 - 0.07) - 0.14)];
                [TungPodcastStyleKit.tungColorMediumLight setStroke];
                ovalPath.lineWidth = 1;
                [ovalPath stroke];


                //// Symbol Drawing
                CGRect symbolRect = CGRectMake(CGRectGetMinX(group) + floor(CGRectGetWidth(group) * 0.02856 - 0.25) + 0.75, CGRectGetMinY(group) + floor(CGRectGetHeight(group) * 0.09947 + 0.12) + 0.38, floor(CGRectGetWidth(group) * 0.23626 - 0.48) - floor(CGRectGetWidth(group) * 0.02856 - 0.25) + 0.24, floor(CGRectGetHeight(group) * 0.90053 - 0.12) - floor(CGRectGetHeight(group) * 0.09947 + 0.12) + 0.24);
                CGContextSaveGState(context);
                UIRectClip(symbolRect);
                CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

                [TungPodcastStyleKit drawCheckmarkIconWithFrame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height) color: TungPodcastStyleKit.tungColorMediumLight];
                CGContextRestoreGState(context);
            }
        }
    }
}

+ (void)drawPillButtonOnDarkWithFrame: (CGRect)frame down: (BOOL)down buttonText: (NSString*)buttonText
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white2 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.218];

    //// Variable Declarations
    BOOL notDown = !down;


    //// Subframes
    CGRect group = CGRectMake(CGRectGetMinX(frame) + 1.57, CGRectGetMinY(frame) + 1.93, CGRectGetWidth(frame) - 2.93, CGRectGetHeight(frame) - 3.82);


    //// Group
    {
        if (notDown)
        {
            //// Bezier up state Drawing
            UIBezierPath* bezierUpStatePath = [UIBezierPath bezierPath];
            [bezierUpStatePath moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.99841 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group))];
            [bezierUpStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.86878 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.99841 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77621 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.94039 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
            [bezierUpStatePath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.12963 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
            [bezierUpStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.05804 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77621 * CGRectGetHeight(group))];
            [bezierUpStatePath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group))];
            [bezierUpStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.12963 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22388 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.05804 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
            [bezierUpStatePath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.86878 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
            [bezierUpStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.99841 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.94038 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00003 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.99841 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22391 * CGRectGetHeight(group))];
            [bezierUpStatePath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.99841 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group))];
            [bezierUpStatePath closePath];
            [UIColor.whiteColor setStroke];
            bezierUpStatePath.lineWidth = 1;
            [bezierUpStatePath stroke];
        }


        if (down)
        {
            //// Bezier down state Drawing
            UIBezierPath* bezierDownStatePath = [UIBezierPath bezierPath];
            [bezierDownStatePath moveToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group))];
            [bezierDownStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.87037 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77621 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.94198 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
            [bezierDownStatePath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.13122 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
            [bezierDownStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.00159 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.05963 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.00159 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77621 * CGRectGetHeight(group))];
            [bezierDownStatePath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.00159 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group))];
            [bezierDownStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.13122 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.00159 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22388 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.05963 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
            [bezierDownStatePath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.87037 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
            [bezierDownStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.94197 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00003 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22391 * CGRectGetHeight(group))];
            [bezierDownStatePath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group))];
            [bezierDownStatePath closePath];
            [white2 setFill];
            [bezierDownStatePath fill];
            [UIColor.whiteColor setStroke];
            bezierDownStatePath.lineWidth = 1;
            [bezierDownStatePath stroke];
        }


        //// Text on Drawing
        CGRect textOnRect = CGRectMake(CGRectGetMinX(group) + floor(CGRectGetWidth(group) * 0.11746 + 0.1) + 0.4, CGRectGetMinY(group) + floor(CGRectGetHeight(group) * 0.00000 + 0.5), floor(CGRectGetWidth(group) * 0.88794 + 0.06) - floor(CGRectGetWidth(group) * 0.11746 + 0.1) + 0.04, floor(CGRectGetHeight(group) * 1.00000 + 0.5) - floor(CGRectGetHeight(group) * 0.00000 + 0.5));
        NSMutableParagraphStyle* textOnStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        textOnStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* textOnFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 15], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textOnStyle};

        CGFloat textOnTextHeight = [buttonText boundingRectWithSize: CGSizeMake(textOnRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textOnFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, textOnRect);
        [buttonText drawInRect: CGRectMake(CGRectGetMinX(textOnRect), CGRectGetMinY(textOnRect) + (CGRectGetHeight(textOnRect) - textOnTextHeight) / 2, CGRectGetWidth(textOnRect), textOnTextHeight) withAttributes: textOnFontAttributes];
        CGContextRestoreGState(context);
    }
}

+ (void)drawTextAreaBkgdWithFrame: (CGRect)frame
{
    //// Color Declarations
    UIColor* black = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    UIColor* black5 = [black colorWithAlphaComponent: 0.05];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame)) cornerRadius: 10];
    [black5 setFill];
    [rectanglePath fill];
}

+ (void)drawClipProgressWithFrame: (CGRect)frame buttonText: (NSString*)buttonText arc: (CGFloat)arc
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* white50 = [white colorWithAlphaComponent: 0.5];

    //// Oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, CGRectGetMinX(frame) + 20, CGRectGetMinY(frame) + 20);
    CGContextRotateCTM(context, -90 * M_PI / 180);

    CGRect ovalRect = CGRectMake(-19.5, -19.5, 39, 39);
    UIBezierPath* ovalPath = [UIBezierPath bezierPath];
    [ovalPath addArcWithCenter: CGPointMake(CGRectGetMidX(ovalRect), CGRectGetMidY(ovalRect)) radius: CGRectGetWidth(ovalRect) / 2 startAngle: 0 * M_PI/180 endAngle: -arc * M_PI/180 clockwise: YES];

    [white setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];

    CGContextRestoreGState(context);


    //// Text Drawing
    CGRect textRect = CGRectMake(CGRectGetMinX(frame) + 0.5, CGRectGetMinY(frame) + 9.43, 39, 21.13);
    NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    textStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 21], NSForegroundColorAttributeName: white50, NSParagraphStyleAttributeName: textStyle};

    CGFloat textTextHeight = [buttonText boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textRect);
    [buttonText drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
    CGContextRestoreGState(context);
}

@end
