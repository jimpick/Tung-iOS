//
//  TungPodcastStyleKit.m
//  Tung
//
//  Created by Jamie Perkins on 9/24/15.
//  Copyright (c) 2015 Inorganik Produce, Inc. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "TungPodcastStyleKit.h"


@implementation TungPodcastStyleKit

#pragma mark Cache

static UIColor* _tungColor = nil;
static UIColor* _tungColorMediumLight = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _tungColor = [UIColor colorWithRed: 0.341 green: 0.353 blue: 0.843 alpha: 1];
    _tungColorMediumLight = [UIColor colorWithRed: 0.447 green: 0.506 blue: 0.953 alpha: 1];

}

#pragma mark Colors

+ (UIColor*)tungColor { return _tungColor; }
+ (UIColor*)tungColorMediumLight { return _tungColorMediumLight; }

#pragma mark Drawing Methods

+ (void)drawSubscribeIconWithColor: (UIColor*)color
{

    //// Group 3
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(29.89, 19.21)];
        [bezierPath addCurveToPoint: CGPointMake(24.95, 14.19) controlPoint1: CGPointMake(29.89, 16.44) controlPoint2: CGPointMake(27.68, 14.19)];
        [bezierPath addCurveToPoint: CGPointMake(20.02, 19.21) controlPoint1: CGPointMake(22.22, 14.19) controlPoint2: CGPointMake(20.02, 16.44)];
        [bezierPath addCurveToPoint: CGPointMake(15.08, 14.19) controlPoint1: CGPointMake(20.02, 16.44) controlPoint2: CGPointMake(17.81, 14.19)];
        [bezierPath addCurveToPoint: CGPointMake(10.14, 19.21) controlPoint1: CGPointMake(12.35, 14.19) controlPoint2: CGPointMake(10.14, 16.44)];
        [bezierPath addCurveToPoint: CGPointMake(11.87, 23.01) controlPoint1: CGPointMake(10.14, 20.74) controlPoint2: CGPointMake(10.82, 22.09)];
        [bezierPath addLineToPoint: CGPointMake(20.03, 31.31)];
        [bezierPath addLineToPoint: CGPointMake(28.33, 22.86)];
        [bezierPath addCurveToPoint: CGPointMake(29.89, 19.21) controlPoint1: CGPointMake(29.29, 21.95) controlPoint2: CGPointMake(29.89, 20.66)];
        [bezierPath closePath];
        bezierPath.lineCapStyle = kCGLineCapRound;

        bezierPath.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezierPath.lineWidth = 1.22;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(30.2, 11.46)];
        [bezier2Path addCurveToPoint: CGPointMake(33.58, 19.77) controlPoint1: CGPointMake(32.29, 13.59) controlPoint2: CGPointMake(33.58, 16.53)];
        [bezier2Path addCurveToPoint: CGPointMake(30.21, 28.07) controlPoint1: CGPointMake(33.58, 23.01) controlPoint2: CGPointMake(32.29, 25.95)];
        bezier2Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier2Path.lineWidth = 1.22;
        [bezier2Path stroke];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(32.76, 30.67)];
        [bezier3Path addCurveToPoint: CGPointMake(37.2, 19.77) controlPoint1: CGPointMake(35.5, 27.88) controlPoint2: CGPointMake(37.2, 24.02)];
        [bezier3Path addCurveToPoint: CGPointMake(32.76, 8.87) controlPoint1: CGPointMake(37.2, 15.51) controlPoint2: CGPointMake(35.5, 11.65)];
        bezier3Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier3Path.lineWidth = 1.22;
        [bezier3Path stroke];


        //// Bezier 4 Drawing
        UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
        [bezier4Path moveToPoint: CGPointMake(9.83, 28.07)];
        [bezier4Path addCurveToPoint: CGPointMake(6.45, 19.77) controlPoint1: CGPointMake(7.74, 25.95) controlPoint2: CGPointMake(6.45, 23.01)];
        [bezier4Path addCurveToPoint: CGPointMake(9.83, 11.46) controlPoint1: CGPointMake(6.45, 16.53) controlPoint2: CGPointMake(7.74, 13.59)];
        bezier4Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier4Path.lineWidth = 1.22;
        [bezier4Path stroke];


        //// Bezier 5 Drawing
        UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
        [bezier5Path moveToPoint: CGPointMake(7.27, 8.87)];
        [bezier5Path addCurveToPoint: CGPointMake(2.84, 19.77) controlPoint1: CGPointMake(4.53, 11.65) controlPoint2: CGPointMake(2.84, 15.51)];
        [bezier5Path addCurveToPoint: CGPointMake(7.27, 30.67) controlPoint1: CGPointMake(2.84, 24.02) controlPoint2: CGPointMake(4.53, 27.88)];
        bezier5Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier5Path.lineWidth = 1.22;
        [bezier5Path stroke];
    }
}

+ (void)drawDonateIconWithColor: (UIColor*)color
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Group 3
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(38.89, 28.6)];
        [bezierPath addCurveToPoint: CGPointMake(1.72, 29.02) controlPoint1: CGPointMake(25.38, 20.24) controlPoint2: CGPointMake(15.22, 37.38)];
        [bezierPath addLineToPoint: CGPointMake(1.72, 9.53)];
        [bezierPath addCurveToPoint: CGPointMake(38.89, 9.1) controlPoint1: CGPointMake(15.22, 17.88) controlPoint2: CGPointMake(25.38, 0.75)];
        [bezierPath addLineToPoint: CGPointMake(38.89, 28.6)];
        [bezierPath closePath];
        bezierPath.lineCapStyle = kCGLineCapRound;

        bezierPath.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezierPath.lineWidth = 1.14;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(6.31, 29.88)];
        [bezier2Path addCurveToPoint: CGPointMake(3.04, 24.34) controlPoint1: CGPointMake(6.31, 27.78) controlPoint2: CGPointMake(4.84, 25.71)];
        [bezier2Path addCurveToPoint: CGPointMake(1.72, 23.54) controlPoint1: CGPointMake(2.57, 23.98) controlPoint2: CGPointMake(2.12, 23.71)];
        [bezier2Path addLineToPoint: CGPointMake(1.72, 29.02)];
        [bezier2Path addCurveToPoint: CGPointMake(6.16, 30.94) controlPoint1: CGPointMake(3.24, 29.96) controlPoint2: CGPointMake(4.72, 30.57)];
        [bezier2Path addCurveToPoint: CGPointMake(6.31, 29.88) controlPoint1: CGPointMake(6.25, 30.62) controlPoint2: CGPointMake(6.31, 30.27)];
        [bezier2Path closePath];
        bezier2Path.lineCapStyle = kCGLineCapRound;

        bezier2Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier2Path.lineWidth = 1.14;
        [bezier2Path stroke];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(3.04, 15.9)];
        [bezier3Path addCurveToPoint: CGPointMake(6.31, 13.62) controlPoint1: CGPointMake(4.84, 17.42) controlPoint2: CGPointMake(6.31, 15.95)];
        [bezier3Path addCurveToPoint: CGPointMake(5.87, 11.37) controlPoint1: CGPointMake(6.31, 12.86) controlPoint2: CGPointMake(6.15, 12.1)];
        [bezier3Path addCurveToPoint: CGPointMake(1.72, 9.53) controlPoint1: CGPointMake(4.52, 11) controlPoint2: CGPointMake(3.14, 10.41)];
        [bezier3Path addLineToPoint: CGPointMake(1.72, 14.28)];
        [bezier3Path addCurveToPoint: CGPointMake(3.04, 15.9) controlPoint1: CGPointMake(2.12, 14.95) controlPoint2: CGPointMake(2.57, 15.5)];
        [bezier3Path closePath];
        bezier3Path.lineCapStyle = kCGLineCapRound;

        bezier3Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier3Path.lineWidth = 1.14;
        [bezier3Path stroke];


        //// Bezier 4 Drawing
        UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
        [bezier4Path moveToPoint: CGPointMake(37.57, 22.65)];
        [bezier4Path addCurveToPoint: CGPointMake(34.3, 24.7) controlPoint1: CGPointMake(35.76, 21.28) controlPoint2: CGPointMake(34.3, 22.6)];
        [bezier4Path addCurveToPoint: CGPointMake(34.75, 26.75) controlPoint1: CGPointMake(34.3, 25.39) controlPoint2: CGPointMake(34.47, 26.09)];
        [bezier4Path addCurveToPoint: CGPointMake(38.89, 28.6) controlPoint1: CGPointMake(36.1, 27.13) controlPoint2: CGPointMake(37.47, 27.72)];
        [bezier4Path addLineToPoint: CGPointMake(38.89, 24.1)];
        [bezier4Path addCurveToPoint: CGPointMake(37.57, 22.65) controlPoint1: CGPointMake(38.49, 23.51) controlPoint2: CGPointMake(38.04, 23)];
        [bezier4Path closePath];
        bezier4Path.lineCapStyle = kCGLineCapRound;

        bezier4Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier4Path.lineWidth = 1.14;
        [bezier4Path stroke];


        //// Bezier 5 Drawing
        UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
        [bezier5Path moveToPoint: CGPointMake(34.45, 7.18)];
        [bezier5Path addCurveToPoint: CGPointMake(34.3, 8.24) controlPoint1: CGPointMake(34.35, 7.5) controlPoint2: CGPointMake(34.3, 7.85)];
        [bezier5Path addCurveToPoint: CGPointMake(37.57, 13.78) controlPoint1: CGPointMake(34.3, 10.34) controlPoint2: CGPointMake(35.76, 12.42)];
        [bezier5Path addCurveToPoint: CGPointMake(38.89, 14.58) controlPoint1: CGPointMake(38.04, 14.14) controlPoint2: CGPointMake(38.49, 14.41)];
        [bezier5Path addLineToPoint: CGPointMake(38.89, 9.1)];
        [bezier5Path addCurveToPoint: CGPointMake(34.45, 7.18) controlPoint1: CGPointMake(37.37, 8.16) controlPoint2: CGPointMake(35.89, 7.55)];
        [bezier5Path closePath];
        bezier5Path.lineCapStyle = kCGLineCapRound;

        bezier5Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier5Path.lineWidth = 1.14;
        [bezier5Path stroke];


        //// Oval Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 20.3, 19.21);
        CGContextRotateCTM(context, 13.8 * M_PI / 180);

        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-4.63, -7.61, 9.25, 15.23)];
        [color setStroke];
        ovalPath.lineWidth = 1.14;
        [ovalPath stroke];

        CGContextRestoreGState(context);


        //// Bezier 6 Drawing
        UIBezierPath* bezier6Path = [UIBezierPath bezierPath];
        [bezier6Path moveToPoint: CGPointMake(23.63, 16.51)];
        [bezier6Path addCurveToPoint: CGPointMake(22.13, 15.14) controlPoint1: CGPointMake(23.69, 15.31) controlPoint2: CGPointMake(23.02, 14.69)];
        [bezier6Path addCurveToPoint: CGPointMake(20.41, 18.12) controlPoint1: CGPointMake(21.24, 15.58) controlPoint2: CGPointMake(20.47, 16.92)];
        [bezier6Path addCurveToPoint: CGPointMake(18.9, 16.75) controlPoint1: CGPointMake(20.47, 16.92) controlPoint2: CGPointMake(19.79, 16.3)];
        [bezier6Path addCurveToPoint: CGPointMake(17.18, 19.73) controlPoint1: CGPointMake(18.01, 17.2) controlPoint2: CGPointMake(17.24, 18.53)];
        [bezier6Path addCurveToPoint: CGPointMake(17.67, 21.1) controlPoint1: CGPointMake(17.15, 20.4) controlPoint2: CGPointMake(17.34, 20.87)];
        [bezier6Path addLineToPoint: CGPointMake(20.16, 23.37)];
        [bezier6Path addLineToPoint: CGPointMake(23.05, 18.36)];
        [bezier6Path addCurveToPoint: CGPointMake(23.63, 16.51) controlPoint1: CGPointMake(23.38, 17.8) controlPoint2: CGPointMake(23.6, 17.14)];
        [bezier6Path closePath];
        bezier6Path.lineCapStyle = kCGLineCapRound;

        bezier6Path.lineJoinStyle = kCGLineJoinRound;

        [color setFill];
        [bezier6Path fill];
    }
}

+ (void)drawRecommendIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group3 = CGRectMake(CGRectGetMinX(frame) + 9.66, CGRectGetMinY(frame) + 4.68, CGRectGetWidth(frame) - 18.54, CGRectGetHeight(frame) - 10.42);


    //// Group 3
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.64882 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 1.00000 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.26005 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 1.00000 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.76155 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.13182 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 1.00000 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.92162 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.00129 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.62100 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.74430 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.63217 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.32213 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.23730 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.02650 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40288 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.20592 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.31668 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.50439 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.00002 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.48593 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.12537 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.50321 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.03240 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.66841 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.13872 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.55230 * CGRectGetWidth(group3), CGRectGetMinY(group3) + -0.00074 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.66975 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.01667 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.51303 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.37345 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.66696 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.26641 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.48593 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.32071 * CGRectGetHeight(group3))];
        bezierPath.lineCapStyle = kCGLineCapRound;

        bezierPath.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezierPath.lineWidth = 1.14;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.52721 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.52771 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.44748 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.61411 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.48091 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.53961 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.44748 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.57670 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.52721 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.70040 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.44748 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.65145 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.48091 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.68850 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.44748 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.78156 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.48102 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.71064 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.44748 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.74515 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.52721 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.86272 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.44748 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.81631 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.48434 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.85119 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.43997 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.93106 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.48231 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.86860 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.43997 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.89731 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.53628 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 1.00000 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.43997 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.96916 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.48300 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 1.00000 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.78475 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 1.00000 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.88094 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.93106 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.83792 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 1.00000 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.88094 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.96916 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.78475 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.86223 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.88094 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.89312 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.83792 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.86223 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.76033 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.86223 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.76033 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.86272 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.85390 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.86272 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.96738 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.78156 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.91641 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.86272 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.96738 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.82639 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.85390 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.70040 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.96738 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.73676 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.91641 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.70040 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.76033 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.70040 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.87944 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.70040 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 1.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.61411 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.94603 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.70040 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 1.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.66177 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.87944 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.52783 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 1.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.56642 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.94603 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.52783 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.76033 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.52783 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.85390 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.52783 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.96738 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.44659 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.91641 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.52783 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.96738 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.49143 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.85390 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.36543 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.96738 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40184 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.91641 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.36543 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.56091 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.36543 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.44748 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.44659 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.49829 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.36543 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.44748 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40184 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.52721 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.52771 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.44748 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.48316 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.48102 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.51751 * CGRectGetHeight(group3))];
        [bezier2Path closePath];
        bezier2Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier2Path.lineWidth = 1.14;
        [bezier2Path stroke];
    }
}

+ (void)drawCommentIconWithColor: (UIColor*)color
{

    //// Group 3
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(27.6, 8.72)];
        [bezierPath addLineToPoint: CGPointMake(13.31, 8.72)];
        [bezierPath addCurveToPoint: CGPointMake(6.71, 15.47) controlPoint1: CGPointMake(9.68, 8.72) controlPoint2: CGPointMake(6.71, 11.76)];
        [bezierPath addLineToPoint: CGPointMake(6.71, 21.16)];
        [bezierPath addCurveToPoint: CGPointMake(13.31, 27.91) controlPoint1: CGPointMake(6.71, 24.87) controlPoint2: CGPointMake(9.68, 27.91)];
        [bezierPath addLineToPoint: CGPointMake(16.19, 27.91)];
        [bezierPath addCurveToPoint: CGPointMake(23.96, 32.68) controlPoint1: CGPointMake(17.64, 31.44) controlPoint2: CGPointMake(21.03, 32.68)];
        [bezierPath addCurveToPoint: CGPointMake(22.01, 27.91) controlPoint1: CGPointMake(22.31, 31.67) controlPoint2: CGPointMake(21.49, 30.08)];
        [bezierPath addLineToPoint: CGPointMake(27.6, 27.91)];
        [bezierPath addCurveToPoint: CGPointMake(34.2, 21.16) controlPoint1: CGPointMake(31.23, 27.91) controlPoint2: CGPointMake(34.2, 24.87)];
        [bezierPath addLineToPoint: CGPointMake(34.2, 15.47)];
        [bezierPath addCurveToPoint: CGPointMake(27.6, 8.72) controlPoint1: CGPointMake(34.2, 11.76) controlPoint2: CGPointMake(31.23, 8.72)];
        [bezierPath closePath];
        bezierPath.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezierPath.lineWidth = 1.22;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(11.8, 13.93)];
        [bezier2Path addLineToPoint: CGPointMake(28.57, 13.93)];
        bezier2Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier2Path.lineWidth = 1.22;
        [bezier2Path stroke];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(11.8, 18.4)];
        [bezier3Path addLineToPoint: CGPointMake(24.54, 18.4)];
        bezier3Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier3Path.lineWidth = 1.22;
        [bezier3Path stroke];


        //// Bezier 4 Drawing
        UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
        [bezier4Path moveToPoint: CGPointMake(11.8, 22.86)];
        [bezier4Path addLineToPoint: CGPointMake(26.82, 22.86)];
        bezier4Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier4Path.lineWidth = 1.22;
        [bezier4Path stroke];
    }
}

+ (void)drawClipIconWithColor: (UIColor*)color
{

    //// Group 2
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(7.7, 16.91)];
        [bezierPath addLineToPoint: CGPointMake(7.7, 22.51)];
        bezierPath.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezierPath.lineWidth = 1.22;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(9.93, 12.95)];
        [bezier2Path addLineToPoint: CGPointMake(9.93, 26.47)];
        bezier2Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier2Path.lineWidth = 1.22;
        [bezier2Path stroke];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(12.17, 14.85)];
        [bezier3Path addLineToPoint: CGPointMake(12.17, 24.57)];
        bezier3Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier3Path.lineWidth = 1.22;
        [bezier3Path stroke];


        //// Bezier 4 Drawing
        UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
        [bezier4Path moveToPoint: CGPointMake(14.41, 10.62)];
        [bezier4Path addLineToPoint: CGPointMake(14.41, 28.8)];
        bezier4Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier4Path.lineWidth = 1.22;
        [bezier4Path stroke];


        //// Bezier 5 Drawing
        UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
        [bezier5Path moveToPoint: CGPointMake(16.64, 18.05)];
        [bezier5Path addLineToPoint: CGPointMake(16.64, 21.37)];
        bezier5Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier5Path.lineWidth = 1.22;
        [bezier5Path stroke];


        //// Bezier 6 Drawing
        UIBezierPath* bezier6Path = [UIBezierPath bezierPath];
        [bezier6Path moveToPoint: CGPointMake(18.88, 15.24)];
        [bezier6Path addLineToPoint: CGPointMake(18.88, 24.18)];
        bezier6Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier6Path.lineWidth = 1.22;
        [bezier6Path stroke];


        //// Bezier 7 Drawing
        UIBezierPath* bezier7Path = [UIBezierPath bezierPath];
        [bezier7Path moveToPoint: CGPointMake(21.12, 8)];
        [bezier7Path addLineToPoint: CGPointMake(21.12, 31.43)];
        bezier7Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier7Path.lineWidth = 1.22;
        [bezier7Path stroke];


        //// Bezier 8 Drawing
        UIBezierPath* bezier8Path = [UIBezierPath bezierPath];
        [bezier8Path moveToPoint: CGPointMake(23.35, 4.73)];
        [bezier8Path addLineToPoint: CGPointMake(23.35, 34.7)];
        bezier8Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier8Path.lineWidth = 1.22;
        [bezier8Path stroke];


        //// Bezier 9 Drawing
        UIBezierPath* bezier9Path = [UIBezierPath bezierPath];
        [bezier9Path moveToPoint: CGPointMake(25.59, 12.95)];
        [bezier9Path addLineToPoint: CGPointMake(25.59, 26.47)];
        bezier9Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier9Path.lineWidth = 1.22;
        [bezier9Path stroke];


        //// Bezier 10 Drawing
        UIBezierPath* bezier10Path = [UIBezierPath bezierPath];
        [bezier10Path moveToPoint: CGPointMake(27.83, 9.23)];
        [bezier10Path addLineToPoint: CGPointMake(27.83, 30.19)];
        bezier10Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier10Path.lineWidth = 1.22;
        [bezier10Path stroke];


        //// Bezier 11 Drawing
        UIBezierPath* bezier11Path = [UIBezierPath bezierPath];
        [bezier11Path moveToPoint: CGPointMake(30.07, 15.72)];
        [bezier11Path addLineToPoint: CGPointMake(30.07, 23.7)];
        bezier11Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier11Path.lineWidth = 1.22;
        [bezier11Path stroke];
    }
}

+ (void)drawQueueIconWithFrame: (CGRect)frame color: (UIColor*)color
{

    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 17.17, CGRectGetMinY(frame) + 12.03)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 20.39, CGRectGetMinY(frame) + 8.81)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 17.18, CGRectGetMinY(frame) + 5.59)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 17.17, CGRectGetMinY(frame) + 5.59)];
    bezierPath.lineCapStyle = kCGLineCapRound;

    bezierPath.lineJoinStyle = kCGLineJoinRound;

    [color setStroke];
    bezierPath.lineWidth = 1.14;
    [bezierPath stroke];


    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
    [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 16.46, CGRectGetMinY(frame) + 14.95)];
    [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 16.46, CGRectGetMinY(frame) + 27.09)];
    [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 22.82, CGRectGetMinY(frame) + 21.02)];
    [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 16.46, CGRectGetMinY(frame) + 14.95)];
    [bezier2Path closePath];
    [color setFill];
    [bezier2Path fill];


    //// Bezier 3 Drawing
    UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
    [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 24.15, CGRectGetMinY(frame) + 13.23)];
    [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 35.23, CGRectGetMinY(frame) + 13.23)];
    bezier3Path.lineCapStyle = kCGLineCapRound;

    bezier3Path.lineJoinStyle = kCGLineJoinRound;

    [color setStroke];
    bezier3Path.lineWidth = 1.14;
    [bezier3Path stroke];


    //// Bezier 4 Drawing
    UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
    [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 24.15, CGRectGetMinY(frame) + 17.36)];
    [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 35.23, CGRectGetMinY(frame) + 17.36)];
    bezier4Path.lineCapStyle = kCGLineCapRound;

    bezier4Path.lineJoinStyle = kCGLineJoinRound;

    [color setStroke];
    bezier4Path.lineWidth = 1.14;
    [bezier4Path stroke];


    //// Bezier 5 Drawing
    UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
    [bezier5Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 30.93, CGRectGetMinY(frame) + 22.09)];
    [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 18.78, CGRectGetMinY(frame) + 33.23) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 30.39, CGRectGetMinY(frame) + 28.33) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 25.16, CGRectGetMinY(frame) + 33.23)];
    [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 6.59, CGRectGetMinY(frame) + 21.02) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 12.05, CGRectGetMinY(frame) + 33.23) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 6.59, CGRectGetMinY(frame) + 27.77)];
    [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 18.78, CGRectGetMinY(frame) + 8.81) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 6.59, CGRectGetMinY(frame) + 14.28) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 12.05, CGRectGetMinY(frame) + 8.81)];
    [bezier5Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 20.39, CGRectGetMinY(frame) + 8.81)];
    bezier5Path.lineCapStyle = kCGLineCapRound;

    bezier5Path.lineJoinStyle = kCGLineJoinRound;

    [color setStroke];
    bezier5Path.lineWidth = 1.14;
    [bezier5Path stroke];


    //// Bezier 6 Drawing
    UIBezierPath* bezier6Path = [UIBezierPath bezierPath];
    [bezier6Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 24.15, CGRectGetMinY(frame) + 9.1)];
    [bezier6Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 35.23, CGRectGetMinY(frame) + 9.1)];
    bezier6Path.lineCapStyle = kCGLineCapRound;

    bezier6Path.lineJoinStyle = kCGLineJoinRound;

    [color setStroke];
    bezier6Path.lineWidth = 1.14;
    [bezier6Path stroke];
}

+ (void)drawSaveIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group2 = CGRectMake(CGRectGetMinX(frame) + 6.47, CGRectGetMinY(frame) + 8.46, CGRectGetWidth(frame) - 12.54, CGRectGetHeight(frame) - 16.59);


    //// Group 2
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group2) + 0.00000 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 1.00000 * CGRectGetHeight(group2))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 1.00000 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 1.00000 * CGRectGetHeight(group2))];
        bezierPath.lineCapStyle = kCGLineCapRound;

        bezierPath.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group2) + 0.75751 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.56360 * CGRectGetHeight(group2))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 0.49990 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.86239 * CGRectGetHeight(group2))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 0.24295 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.56415 * CGRectGetHeight(group2))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 0.24237 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.56360 * CGRectGetHeight(group2))];
        bezier2Path.lineCapStyle = kCGLineCapRound;

        bezier2Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(group2) + 0.49989 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.86240 * CGRectGetHeight(group2))];
        [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 0.49989 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.00000 * CGRectGetHeight(group2))];
        bezier3Path.lineCapStyle = kCGLineCapRound;

        bezier3Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier3Path.lineWidth = 1;
        [bezier3Path stroke];
    }
}

+ (void)drawCancelIconWithColor: (UIColor*)color
{

    //// Group 2
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(10.61, 10.61)];
        [bezierPath addLineToPoint: CGPointMake(29.57, 29.57)];
        bezierPath.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezierPath.lineWidth = 1.22;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(29.57, 10.61)];
        [bezier2Path addLineToPoint: CGPointMake(10.61, 29.57)];
        bezier2Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier2Path.lineWidth = 1.22;
        [bezier2Path stroke];
    }
}

+ (void)drawCheckmarkIconWithColor: (UIColor*)color
{

    //// Group 3
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(16.51, 29.94)];
        [bezierPath addCurveToPoint: CGPointMake(14.69, 29.28) controlPoint1: CGPointMake(15.84, 29.94) controlPoint2: CGPointMake(15.2, 29.7)];
        [bezierPath addLineToPoint: CGPointMake(8.53, 24.13)];
        [bezierPath addCurveToPoint: CGPointMake(8.24, 20.31) controlPoint1: CGPointMake(7.37, 23.15) controlPoint2: CGPointMake(7.24, 21.44)];
        [bezierPath addCurveToPoint: CGPointMake(12.17, 20.02) controlPoint1: CGPointMake(9.24, 19.18) controlPoint2: CGPointMake(11, 19.04)];
        [bezierPath addLineToPoint: CGPointMake(16.17, 23.37)];
        [bezierPath addLineToPoint: CGPointMake(27.91, 9.54)];
        [bezierPath addCurveToPoint: CGPointMake(31.83, 9.17) controlPoint1: CGPointMake(28.89, 8.38) controlPoint2: CGPointMake(30.64, 8.21)];
        [bezierPath addCurveToPoint: CGPointMake(32.2, 12.99) controlPoint1: CGPointMake(33.01, 10.12) controlPoint2: CGPointMake(33.18, 11.83)];
        [bezierPath addLineToPoint: CGPointMake(18.66, 28.95)];
        [bezierPath addCurveToPoint: CGPointMake(16.75, 29.93) controlPoint1: CGPointMake(18.18, 29.51) controlPoint2: CGPointMake(17.49, 29.87)];
        [bezierPath addCurveToPoint: CGPointMake(16.51, 29.94) controlPoint1: CGPointMake(16.67, 29.93) controlPoint2: CGPointMake(16.59, 29.94)];
        [bezierPath closePath];
        [color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];
    }
}

+ (void)drawShareIconWithColor: (UIColor*)color
{

    //// Group 3
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(17.79, 14.61)];
        [bezierPath addLineToPoint: CGPointMake(11.59, 14.61)];
        [bezierPath addLineToPoint: CGPointMake(11.59, 31.44)];
        [bezierPath addLineToPoint: CGPointMake(28.65, 31.44)];
        [bezierPath addLineToPoint: CGPointMake(28.65, 14.61)];
        [bezierPath addLineToPoint: CGPointMake(22.45, 14.61)];
        bezierPath.lineCapStyle = kCGLineCapRound;

        bezierPath.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(24.51, 10.92)];
        [bezier2Path addLineToPoint: CGPointMake(20.12, 6.59)];
        [bezier2Path addLineToPoint: CGPointMake(15.74, 10.92)];
        [bezier2Path addLineToPoint: CGPointMake(15.73, 10.92)];
        bezier2Path.lineCapStyle = kCGLineCapRound;

        bezier2Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(20.12, 6.59)];
        [bezier3Path addLineToPoint: CGPointMake(20.12, 19.1)];
        bezier3Path.lineCapStyle = kCGLineCapRound;

        bezier3Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier3Path.lineWidth = 1;
        [bezier3Path stroke];
    }
}

+ (void)drawWebsiteIconWithColor: (UIColor*)color
{

    //// Group 3
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(28.02, 21.92)];
        [bezierPath addLineToPoint: CGPointMake(13.5, 7.5)];
        [bezierPath addLineToPoint: CGPointMake(13.54, 27.73)];
        [bezierPath addLineToPoint: CGPointMake(18.04, 22.98)];
        [bezierPath addLineToPoint: CGPointMake(21.5, 31.49)];
        [bezierPath addLineToPoint: CGPointMake(24.91, 30.1)];
        [bezierPath addLineToPoint: CGPointMake(21.48, 21.69)];
        [bezierPath addLineToPoint: CGPointMake(28.02, 21.92)];
        [bezierPath closePath];
        bezierPath.lineCapStyle = kCGLineCapRound;

        bezierPath.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];
    }
}

+ (void)drawPlayIconWithColor: (UIColor*)color
{

    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(14, 7)];
    [bezierPath addLineToPoint: CGPointMake(14, 32)];
    [bezierPath addLineToPoint: CGPointMake(29, 19.5)];
    [bezierPath addLineToPoint: CGPointMake(14, 7)];
    [bezierPath closePath];
    [color setFill];
    [bezierPath fill];
}

+ (void)drawStopIconWithColor: (UIColor*)color
{

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(12, 10, 19, 19)];
    [color setFill];
    [rectanglePath fill];
}

+ (void)drawRecordIconWithColor: (UIColor*)color
{

    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(10, 9, 21, 21)];
    [color setFill];
    [ovalPath fill];
}

+ (void)drawSubscribeIconSolidWithColor: (UIColor*)color
{

    //// Group 3
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(29.89, 19.21)];
        [bezierPath addCurveToPoint: CGPointMake(24.95, 14.19) controlPoint1: CGPointMake(29.89, 16.44) controlPoint2: CGPointMake(27.68, 14.19)];
        [bezierPath addCurveToPoint: CGPointMake(20.02, 19.21) controlPoint1: CGPointMake(22.22, 14.19) controlPoint2: CGPointMake(20.02, 16.44)];
        [bezierPath addCurveToPoint: CGPointMake(15.08, 14.19) controlPoint1: CGPointMake(20.02, 16.44) controlPoint2: CGPointMake(17.81, 14.19)];
        [bezierPath addCurveToPoint: CGPointMake(10.14, 19.21) controlPoint1: CGPointMake(12.35, 14.19) controlPoint2: CGPointMake(10.14, 16.44)];
        [bezierPath addCurveToPoint: CGPointMake(11.87, 23.01) controlPoint1: CGPointMake(10.14, 20.74) controlPoint2: CGPointMake(10.82, 22.09)];
        [bezierPath addLineToPoint: CGPointMake(20.03, 31.31)];
        [bezierPath addLineToPoint: CGPointMake(28.33, 22.86)];
        [bezierPath addCurveToPoint: CGPointMake(29.89, 19.21) controlPoint1: CGPointMake(29.29, 21.95) controlPoint2: CGPointMake(29.89, 20.66)];
        [bezierPath closePath];
        bezierPath.lineCapStyle = kCGLineCapRound;

        bezierPath.lineJoinStyle = kCGLineJoinRound;

        [color setFill];
        [bezierPath fill];
        [color setStroke];
        bezierPath.lineWidth = 0;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(30.2, 11.46)];
        [bezier2Path addCurveToPoint: CGPointMake(33.58, 19.77) controlPoint1: CGPointMake(32.29, 13.59) controlPoint2: CGPointMake(33.58, 16.53)];
        [bezier2Path addCurveToPoint: CGPointMake(30.21, 28.07) controlPoint1: CGPointMake(33.58, 23.01) controlPoint2: CGPointMake(32.29, 25.95)];
        bezier2Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier2Path.lineWidth = 1.22;
        [bezier2Path stroke];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(32.76, 30.67)];
        [bezier3Path addCurveToPoint: CGPointMake(37.2, 19.77) controlPoint1: CGPointMake(35.5, 27.88) controlPoint2: CGPointMake(37.2, 24.02)];
        [bezier3Path addCurveToPoint: CGPointMake(32.76, 8.87) controlPoint1: CGPointMake(37.2, 15.51) controlPoint2: CGPointMake(35.5, 11.65)];
        bezier3Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier3Path.lineWidth = 1.22;
        [bezier3Path stroke];


        //// Bezier 4 Drawing
        UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
        [bezier4Path moveToPoint: CGPointMake(9.83, 28.07)];
        [bezier4Path addCurveToPoint: CGPointMake(6.45, 19.77) controlPoint1: CGPointMake(7.74, 25.95) controlPoint2: CGPointMake(6.45, 23.01)];
        [bezier4Path addCurveToPoint: CGPointMake(9.83, 11.46) controlPoint1: CGPointMake(6.45, 16.53) controlPoint2: CGPointMake(7.74, 13.59)];
        bezier4Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier4Path.lineWidth = 1.22;
        [bezier4Path stroke];


        //// Bezier 5 Drawing
        UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
        [bezier5Path moveToPoint: CGPointMake(7.27, 8.87)];
        [bezier5Path addCurveToPoint: CGPointMake(2.84, 19.77) controlPoint1: CGPointMake(4.53, 11.65) controlPoint2: CGPointMake(2.84, 15.51)];
        [bezier5Path addCurveToPoint: CGPointMake(7.27, 30.67) controlPoint1: CGPointMake(2.84, 24.02) controlPoint2: CGPointMake(4.53, 27.88)];
        bezier5Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier5Path.lineWidth = 1.22;
        [bezier5Path stroke];
    }
}

+ (void)drawHideIconWithColor: (UIColor*)color
{

    //// Rectangle Drawing


    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
    [bezier2Path moveToPoint: CGPointMake(5, 3)];
    [bezier2Path addLineToPoint: CGPointMake(17, 7.5)];
    [bezier2Path addLineToPoint: CGPointMake(29, 3)];
    bezier2Path.lineCapStyle = kCGLineCapRound;

    [color setStroke];
    bezier2Path.lineWidth = 5;
    [bezier2Path stroke];
}

+ (void)drawShowIconWithColor: (UIColor*)color
{

    //// Rectangle Drawing


    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
    [bezier2Path moveToPoint: CGPointMake(5, 8)];
    [bezier2Path addLineToPoint: CGPointMake(17, 3.5)];
    [bezier2Path addLineToPoint: CGPointMake(29, 8)];
    bezier2Path.lineCapStyle = kCGLineCapRound;

    [color setStroke];
    bezier2Path.lineWidth = 5;
    [bezier2Path stroke];
}

+ (void)drawAddCircleIconWithFrame: (CGRect)frame color: (UIColor*)color
{

    //// Bezier 4 Drawing
    UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
    [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 34, CGRectGetMinY(frame) + 20)];
    [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 20.16, CGRectGetMinY(frame) + 34) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 34, CGRectGetMinY(frame) + 27.73) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 27.81, CGRectGetMinY(frame) + 34)];
    [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 6.33, CGRectGetMinY(frame) + 20) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 12.52, CGRectGetMinY(frame) + 34) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 6.33, CGRectGetMinY(frame) + 27.73)];
    [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 20.16, CGRectGetMinY(frame) + 6) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 6.33, CGRectGetMinY(frame) + 12.27) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 12.53, CGRectGetMinY(frame) + 6)];
    [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 34, CGRectGetMinY(frame) + 20) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 27.81, CGRectGetMinY(frame) + 6) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 34, CGRectGetMinY(frame) + 12.27)];
    [bezier4Path closePath];
    [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 21.29, CGRectGetMinY(frame) + 21.14)];
    [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 27.46, CGRectGetMinY(frame) + 21.14)];
    [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 27.46, CGRectGetMinY(frame) + 18.86)];
    [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 21.29, CGRectGetMinY(frame) + 18.86)];
    [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 21.29, CGRectGetMinY(frame) + 12.62)];
    [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 19.04, CGRectGetMinY(frame) + 12.62)];
    [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 19.04, CGRectGetMinY(frame) + 18.86)];
    [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 12.88, CGRectGetMinY(frame) + 18.86)];
    [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 12.88, CGRectGetMinY(frame) + 21.14)];
    [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 19.04, CGRectGetMinY(frame) + 21.14)];
    [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 19.04, CGRectGetMinY(frame) + 27.38)];
    [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 21.29, CGRectGetMinY(frame) + 27.38)];
    [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 21.29, CGRectGetMinY(frame) + 21.14)];
    [bezier4Path closePath];
    bezier4Path.miterLimit = 4;

    [color setFill];
    [bezier4Path fill];
}

+ (void)drawOptionsIconWithFrame: (CGRect)frame color: (UIColor*)color
{

    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 10.27, CGRectGetMinY(frame) + 19.72)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 7.63, CGRectGetMinY(frame) + 17) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 10.27, CGRectGetMinY(frame) + 18.22) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 9.09, CGRectGetMinY(frame) + 17)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 5, CGRectGetMinY(frame) + 19.72) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 6.18, CGRectGetMinY(frame) + 17) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 5, CGRectGetMinY(frame) + 18.22)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 7.63, CGRectGetMinY(frame) + 22.44) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 5, CGRectGetMinY(frame) + 21.22) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 6.18, CGRectGetMinY(frame) + 22.44)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 10.27, CGRectGetMinY(frame) + 19.72) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 9.09, CGRectGetMinY(frame) + 22.44) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 10.27, CGRectGetMinY(frame) + 21.22)];
    [bezierPath closePath];
    [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 23.13, CGRectGetMinY(frame) + 19.72)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 20.5, CGRectGetMinY(frame) + 17) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 23.13, CGRectGetMinY(frame) + 18.22) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 21.95, CGRectGetMinY(frame) + 17)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 17.87, CGRectGetMinY(frame) + 19.72) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 19.05, CGRectGetMinY(frame) + 17) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 17.87, CGRectGetMinY(frame) + 18.22)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 20.5, CGRectGetMinY(frame) + 22.44) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 17.87, CGRectGetMinY(frame) + 21.22) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 19.05, CGRectGetMinY(frame) + 22.44)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 23.13, CGRectGetMinY(frame) + 19.72) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 21.95, CGRectGetMinY(frame) + 22.44) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 23.13, CGRectGetMinY(frame) + 21.22)];
    [bezierPath closePath];
    [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 36, CGRectGetMinY(frame) + 19.72)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 33.37, CGRectGetMinY(frame) + 17) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 36, CGRectGetMinY(frame) + 18.22) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 34.82, CGRectGetMinY(frame) + 17)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 30.73, CGRectGetMinY(frame) + 19.72) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 31.91, CGRectGetMinY(frame) + 17) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 30.73, CGRectGetMinY(frame) + 18.22)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 33.37, CGRectGetMinY(frame) + 22.44) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 30.73, CGRectGetMinY(frame) + 21.22) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 31.91, CGRectGetMinY(frame) + 22.44)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 36, CGRectGetMinY(frame) + 19.72) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 34.82, CGRectGetMinY(frame) + 22.44) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 36, CGRectGetMinY(frame) + 21.22)];
    [bezierPath closePath];
    [color setFill];
    [bezierPath fill];
}

+ (void)drawTwitterIconWithFrame: (CGRect)frame color: (UIColor*)color on: (BOOL)on
{

    //// Variable Declarations
    BOOL notOn = !on;

    if (notOn)
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.91250 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.25050 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.81974 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.27582 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.88354 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.26325 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.85241 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.27193 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.89077 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.18680 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.85310 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.25587 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.87868 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22438 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.78813 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22586 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.85953 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.20522 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.82497 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.21864 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.67021 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.17500 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.75872 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.19458 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.71669 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.17500 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.50864 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.33597 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.58100 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.17500 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.50864 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.24708 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.51284 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.37262 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.50864 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.34854 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.51010 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.36084 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.17986 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.20451 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.37856 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.36595 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.25955 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.30183 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.15797 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.28537 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.16594 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22822 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.15797 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.25587 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.22988 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.41935 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.15797 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.34124 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.18650 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.39045 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.15666 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.39919 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.20336 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.41850 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.17845 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.41125 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.15666 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.40123 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.28627 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.55905 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.15666 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.47921 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.21234 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.54428 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.24366 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.56471 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.27267 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.56272 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.25846 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.56471 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.21333 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.56182 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.23330 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.56471 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.22318 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.56368 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.36419 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.67357 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.23386 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.62573 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.29352 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.67228 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.16357 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.74248 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.30893 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.71673 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.23925 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.74248 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.12500 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.74021 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.15053 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.74248 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.13767 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.74169 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.37266 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.81250 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.19651 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.78585 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.28144 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.81250 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.83238 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.35463 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.66983 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.81250 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.83238 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.56730 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.83188 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.33380 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.83238 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.34761 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.83220 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.34071 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.91250 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.25050 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.86346 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.31109 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.89088 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.28275 * CGRectGetHeight(frame))];
        [bezierPath closePath];
        [color setFill];
        [bezierPath fill];
    }
}

+ (void)drawFacebookIconWithFrame: (CGRect)frame color: (UIColor*)color on: (BOOL)on
{

    //// Variable Declarations
    BOOL notOn = !on;

    if (notOn)
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.81269 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.15020 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.21202 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.15020 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.17471 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.18809 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.19141 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.15020 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.17471 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.16717 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.17471 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.79958 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.21202 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.83750 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.17471 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.82051 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.19141 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.83750 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.53540 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.83750 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.53540 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.57133 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.44741 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.57133 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.44741 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.46760 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.53540 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.46760 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.53540 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.39110 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.66649 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.25399 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.53540 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.30234 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.58868 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.25399 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.74511 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.25808 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.70372 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.25399 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.73579 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.25680 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.74511 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.35083 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.69113 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.35086 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.64067 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.40135 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.64880 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.35086 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.64067 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.37132 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.64067 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.46760 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.74156 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.46760 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.72838 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.57133 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.64067 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.57133 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.64067 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.83750 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.81269 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.83750 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.85000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.79958 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.83333 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.83750 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.85000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.82051 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.85000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.18809 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.81269 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.15020 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.85000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.16717 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.83333 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.15020 * CGRectGetHeight(frame))];
        [bezierPath closePath];
        [color setFill];
        [bezierPath fill];
    }
}

+ (void)drawNowPlayingIconWithFrame: (CGRect)frame color: (UIColor*)color
{

    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.55086 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.31459 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.46065 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50035 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.50071 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.31477 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.46029 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.39789 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.55199 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.68571 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.46087 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.60281 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.50173 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.68574 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.66681 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.49352 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.60202 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.68549 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.66703 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.59606 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.55086 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.31459 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.66652 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.39103 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.60097 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.31444 * CGRectGetHeight(frame))];
    [bezierPath closePath];
    [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.64084 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.91330 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.43053 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50002 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.52686 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.91330 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.43053 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.72406 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.64084 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.08670 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.43053 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.27594 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.52686 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.08670 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.85108 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50002 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.75479 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.08670 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.85108 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.27594 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.64084 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.91330 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.85108 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.72406 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.75479 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.91330 * CGRectGetHeight(frame))];
    [bezierPath closePath];
    [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.64084 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.05000 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.50646 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.12094 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.59088 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.05000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.54492 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.07609 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.33752 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.27983 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.26374 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.27998 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.11250 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50053 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.17995 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.28017 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.11221 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.37895 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.26502 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.72042 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.11290 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.62222 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.18118 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.72057 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.33636 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.72035 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.51469 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.88809 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.64084 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.95000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.55144 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.92728 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.59434 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.95000 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.88750 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50002 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.77916 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.95000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.88750 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.75235 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.64084 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.05000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.88750 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.24769 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.77916 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.05000 * CGRectGetHeight(frame))];
    [bezierPath closePath];
    [color setFill];
    [bezierPath fill];
}

+ (void)drawSubscribeButtonWithFrame: (CGRect)frame color: (UIColor*)color on: (BOOL)on down: (BOOL)down
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.149];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notOn = !on;
    BOOL notDown = !down;
    BOOL downAndOn = down && on;


    //// Subframes
    CGRect subbed = CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame));
    CGRect notSubbed = CGRectMake(CGRectGetMinX(frame) + floor((CGRectGetWidth(frame) - 69) / 2 + 0.5), CGRectGetMinY(frame), 69, 62);


    if (on)
    {
        //// subbed
        {
            //// Oval Drawing
            UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(subbed) + floor(CGRectGetWidth(subbed) * 0.20290 + 0.5), CGRectGetMinY(subbed) + floor(CGRectGetHeight(subbed) * 0.00000 + 0.5), floor(CGRectGetWidth(subbed) * 0.79710 + 0.5) - floor(CGRectGetWidth(subbed) * 0.20290 + 0.5), floor(CGRectGetHeight(subbed) * 0.66129 + 0.5) - floor(CGRectGetHeight(subbed) * 0.00000 + 0.5))];
            [UIColor.whiteColor setFill];
            [ovalPath fill];


            //// Symbol Drawing
            CGRect symbolRect = CGRectMake(CGRectGetMinX(subbed) + floor(CGRectGetWidth(subbed) * 0.27536 + 0.5), CGRectGetMinY(subbed) + floor(CGRectGetHeight(subbed) * 0.08065 + 0.5), floor(CGRectGetWidth(subbed) * 0.72464 + 0.5) - floor(CGRectGetWidth(subbed) * 0.27536 + 0.5), floor(CGRectGetHeight(subbed) * 0.58065 + 0.5) - floor(CGRectGetHeight(subbed) * 0.08065 + 0.5));
            CGContextSaveGState(context);
            UIRectClip(symbolRect);
            CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);
            CGContextScaleCTM(context, symbolRect.size.width / 40, symbolRect.size.height / 40);

            [TungPodcastStyleKit drawSubscribeIconSolidWithColor: color];
            CGContextRestoreGState(context);


            if (downAndOn)
            {
                //// Oval 4 Drawing
                UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(subbed) + floor(CGRectGetWidth(subbed) * 0.20290 + 0.5), CGRectGetMinY(subbed) + floor(CGRectGetHeight(subbed) * 0.00000 + 0.5), floor(CGRectGetWidth(subbed) * 0.79710 + 0.5) - floor(CGRectGetWidth(subbed) * 0.20290 + 0.5), floor(CGRectGetHeight(subbed) * 0.66129 + 0.5) - floor(CGRectGetHeight(subbed) * 0.00000 + 0.5))];
                [black10Alpha setFill];
                [oval4Path fill];
            }


            //// unsubscrbe Drawing
            CGRect unsubscrbeRect = CGRectMake(CGRectGetMinX(subbed) + floor(CGRectGetWidth(subbed) * 0.00000 + 0.5), CGRectGetMinY(subbed) + floor(CGRectGetHeight(subbed) * 0.66129 + 0.5), floor(CGRectGetWidth(subbed) * 1.00000 + 0.5) - floor(CGRectGetWidth(subbed) * 0.00000 + 0.5), floor(CGRectGetHeight(subbed) * 1.00000 + 0.5) - floor(CGRectGetHeight(subbed) * 0.66129 + 0.5));
            {
                NSString* textContent = @"Unsubscribe";
                NSMutableParagraphStyle* unsubscrbeStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
                unsubscrbeStyle.alignment = NSTextAlignmentCenter;

                NSDictionary* unsubscrbeFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 11], NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: unsubscrbeStyle};

                CGFloat unsubscrbeTextHeight = [textContent boundingRectWithSize: CGSizeMake(unsubscrbeRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: unsubscrbeFontAttributes context: nil].size.height;
                CGContextSaveGState(context);
                CGContextClipToRect(context, unsubscrbeRect);
                [textContent drawInRect: CGRectMake(CGRectGetMinX(unsubscrbeRect), CGRectGetMinY(unsubscrbeRect) + (CGRectGetHeight(unsubscrbeRect) - unsubscrbeTextHeight) / 2, CGRectGetWidth(unsubscrbeRect), unsubscrbeTextHeight) withAttributes: unsubscrbeFontAttributes];
                CGContextRestoreGState(context);
            }
        }
    }


    if (notOn)
    {
        //// not subbed
        {
            if (notDown)
            {
                //// Oval 2 Drawing
                UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(notSubbed) + 14, CGRectGetMinY(notSubbed), 41, 41)];
                [black15Alpha setFill];
                [oval2Path fill];
            }


            if (down)
            {
                //// Oval 3 Drawing
                UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(notSubbed) + 14, CGRectGetMinY(notSubbed), 41, 41)];
                [black25Alpha setFill];
                [oval3Path fill];
            }


            //// Symbol 2 Drawing
            CGRect symbol2Rect = CGRectMake(CGRectGetMinX(notSubbed) + 19, CGRectGetMinY(notSubbed) + 5, 31, 31);
            CGContextSaveGState(context);
            UIRectClip(symbol2Rect);
            CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);
            CGContextScaleCTM(context, symbol2Rect.size.width / 40, symbol2Rect.size.height / 40);

            [TungPodcastStyleKit drawSubscribeIconWithColor: white];
            CGContextRestoreGState(context);


            //// subscribe Drawing
            CGRect subscribeRect = CGRectMake(CGRectGetMinX(notSubbed), CGRectGetMinY(notSubbed) + 41, 69, 21);
            {
                NSString* textContent = @"Subscribe";
                NSMutableParagraphStyle* subscribeStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
                subscribeStyle.alignment = NSTextAlignmentCenter;

                NSDictionary* subscribeFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 11], NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: subscribeStyle};

                CGFloat subscribeTextHeight = [textContent boundingRectWithSize: CGSizeMake(subscribeRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: subscribeFontAttributes context: nil].size.height;
                CGContextSaveGState(context);
                CGContextClipToRect(context, subscribeRect);
                [textContent drawInRect: CGRectMake(CGRectGetMinX(subscribeRect), CGRectGetMinY(subscribeRect) + (CGRectGetHeight(subscribeRect) - subscribeTextHeight) / 2, CGRectGetWidth(subscribeRect), subscribeTextHeight) withAttributes: subscribeFontAttributes];
                CGContextRestoreGState(context);
            }
        }
    }
}

+ (void)drawClipButtonWithFrame: (CGRect)frame down: (BOOL)down
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notDown = !down;

    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }


    if (notDown)
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalPath fill];
    }


    //// Symbol Drawing
    CGRect symbolRect = CGRectMake(CGRectGetMinX(frame) + 3.5, CGRectGetMinY(frame) + 3.5, CGRectGetWidth(frame) - 6.5, CGRectGetHeight(frame) - 6.5);
    CGContextSaveGState(context);
    UIRectClip(symbolRect);
    CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);
    CGContextScaleCTM(context, symbolRect.size.width / 40, symbolRect.size.height / 40);

    [TungPodcastStyleKit drawClipIconWithColor: TungPodcastStyleKit.tungColor];
    CGContextRestoreGState(context);
}

+ (void)drawRecommendButtonWithFrame: (CGRect)frame on: (BOOL)on down: (BOOL)down
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.149];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notOn = !on;
    BOOL notDown = !down;
    BOOL downAndOn = down && on;


    //// Subframes
    CGRect notReccd = CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame));
    CGRect reccd = CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame));


    if (notOn)
    {
        //// not recc'd
        {
            if (notDown)
            {
                //// Oval Drawing
                UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(notReccd) + floor(CGRectGetWidth(notReccd) * 0.00000 + 0.5), CGRectGetMinY(notReccd) + floor(CGRectGetHeight(notReccd) * 0.00000 + 0.5), floor(CGRectGetWidth(notReccd) * 1.00000 + 0.5) - floor(CGRectGetWidth(notReccd) * 0.00000 + 0.5), floor(CGRectGetHeight(notReccd) * 1.00000 + 0.5) - floor(CGRectGetHeight(notReccd) * 0.00000 + 0.5))];
                [black10Alpha setFill];
                [ovalPath fill];
            }


            if (down)
            {
                //// Oval 3 Drawing
                UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(notReccd) + floor(CGRectGetWidth(notReccd) * 0.00000 + 0.5), CGRectGetMinY(notReccd) + floor(CGRectGetHeight(notReccd) * 0.00000 + 0.5), floor(CGRectGetWidth(notReccd) * 1.00000 + 0.5) - floor(CGRectGetWidth(notReccd) * 0.00000 + 0.5), floor(CGRectGetHeight(notReccd) * 1.00000 + 0.5) - floor(CGRectGetHeight(notReccd) * 0.00000 + 0.5))];
                [black25Alpha setFill];
                [oval3Path fill];
            }


            //// Symbol Drawing
            CGRect symbolRect = CGRectMake(CGRectGetMinX(notReccd) + floor(CGRectGetWidth(notReccd) * 0.07317 + 0.5), CGRectGetMinY(notReccd) + floor(CGRectGetHeight(notReccd) * 0.04878 + 0.5), floor(CGRectGetWidth(notReccd) * 0.92683 + 0.5) - floor(CGRectGetWidth(notReccd) * 0.07317 + 0.5), floor(CGRectGetHeight(notReccd) * 0.90244 + 0.5) - floor(CGRectGetHeight(notReccd) * 0.04878 + 0.5));
            CGContextSaveGState(context);
            UIRectClip(symbolRect);
            CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

            [TungPodcastStyleKit drawRecommendIconWithFrame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height) color: TungPodcastStyleKit.tungColor];
            CGContextRestoreGState(context);
        }
    }


    if (on)
    {
        //// Recc'd
        {
            //// Oval 2 Drawing
            UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(reccd) + floor(CGRectGetWidth(reccd) * 0.00000 + 0.5), CGRectGetMinY(reccd) + floor(CGRectGetHeight(reccd) * 0.00000 + 0.5), floor(CGRectGetWidth(reccd) * 1.00000 + 0.5) - floor(CGRectGetWidth(reccd) * 0.00000 + 0.5), floor(CGRectGetHeight(reccd) * 1.00000 + 0.5) - floor(CGRectGetHeight(reccd) * 0.00000 + 0.5))];
            [TungPodcastStyleKit.tungColor setFill];
            [oval2Path fill];


            //// Symbol 2 Drawing
            CGRect symbol2Rect = CGRectMake(CGRectGetMinX(reccd) + floor(CGRectGetWidth(reccd) * 0.07317 + 0.5), CGRectGetMinY(reccd) + floor(CGRectGetHeight(reccd) * 0.04878 + 0.5), floor(CGRectGetWidth(reccd) * 0.92683 + 0.5) - floor(CGRectGetWidth(reccd) * 0.07317 + 0.5), floor(CGRectGetHeight(reccd) * 0.90244 + 0.5) - floor(CGRectGetHeight(reccd) * 0.04878 + 0.5));
            CGContextSaveGState(context);
            UIRectClip(symbol2Rect);
            CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);

            [TungPodcastStyleKit drawRecommendIconWithFrame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height) color: white];
            CGContextRestoreGState(context);


            if (downAndOn)
            {
                //// Oval 4 Drawing
                UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(reccd) + floor(CGRectGetWidth(reccd) * 0.00000 + 0.5), CGRectGetMinY(reccd) + floor(CGRectGetHeight(reccd) * 0.00000 + 0.5), floor(CGRectGetWidth(reccd) * 1.00000 + 0.5) - floor(CGRectGetWidth(reccd) * 0.00000 + 0.5), floor(CGRectGetHeight(reccd) * 1.00000 + 0.5) - floor(CGRectGetHeight(reccd) * 0.00000 + 0.5))];
                [black15Alpha setFill];
                [oval4Path fill];
            }
        }
    }
}

+ (void)drawShareButtonWithFrame: (CGRect)frame down: (BOOL)down
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notDown = !down;

    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }


    if (notDown)
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalPath fill];
    }


    //// Symbol Drawing
    CGRect symbolRect = CGRectMake(CGRectGetMinX(frame) + 2.5, CGRectGetMinY(frame) + 2.5, CGRectGetWidth(frame) - 5.5, CGRectGetHeight(frame) - 5.5);
    CGContextSaveGState(context);
    UIRectClip(symbolRect);
    CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);
    CGContextScaleCTM(context, symbolRect.size.width / 40, symbolRect.size.height / 40);

    [TungPodcastStyleKit drawShareIconWithColor: TungPodcastStyleKit.tungColor];
    CGContextRestoreGState(context);
}

+ (void)drawWebsiteButtonWithFrame: (CGRect)frame down: (BOOL)down disabled: (BOOL)disabled
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];
    UIColor* tung20 = [TungPodcastStyleKit.tungColor colorWithAlphaComponent: 0.2];

    //// Variable Declarations
    BOOL notDown = !down;
    BOOL notDisabled = !disabled;

    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }


    if (notDown)
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalPath fill];
    }


    if (notDisabled)
    {
        //// Symbol Drawing
        CGRect symbolRect = CGRectMake(CGRectGetMinX(frame) + 1.5, CGRectGetMinY(frame), CGRectGetWidth(frame) - 0.5, CGRectGetHeight(frame));
        CGContextSaveGState(context);
        UIRectClip(symbolRect);
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);
        CGContextScaleCTM(context, symbolRect.size.width / 40, symbolRect.size.height / 40);

        [TungPodcastStyleKit drawWebsiteIconWithColor: TungPodcastStyleKit.tungColor];
        CGContextRestoreGState(context);
    }


    if (disabled)
    {
        //// Symbol 2 Drawing
        CGRect symbol2Rect = CGRectMake(CGRectGetMinX(frame) + 1.5, CGRectGetMinY(frame), CGRectGetWidth(frame) - 0.5, CGRectGetHeight(frame));
        CGContextSaveGState(context);
        UIRectClip(symbol2Rect);
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);
        CGContextScaleCTM(context, symbol2Rect.size.width / 40, symbol2Rect.size.height / 40);

        [TungPodcastStyleKit drawWebsiteIconWithColor: tung20];
        CGContextRestoreGState(context);
    }
}

+ (void)drawSupportButtonWithFrame: (CGRect)frame down: (BOOL)down
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.149];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notDown = !down;

    if (down)
    {
        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.73486 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.26511 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.11869 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22386 * CGRectGetHeight(frame))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.26511 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.77611 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.11869 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.73486 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.88130 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.77611 * CGRectGetHeight(frame))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.73486 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22386 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.88130 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezier2Path closePath];
        [black25Alpha setFill];
        [bezier2Path fill];
    }


    if (notDown)
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.73486 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.26511 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.11869 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22386 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.26511 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.77611 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.11869 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.73486 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.88130 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.77611 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.73486 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22386 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.88130 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezierPath closePath];
        [black15Alpha setFill];
        [bezierPath fill];
    }


    //// Symbol Drawing
    CGRect symbolRect = CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.25974 + 0.5), CGRectGetMinY(frame) + 2, floor(CGRectGetWidth(frame) * 0.74026 + 0.5) - floor(CGRectGetWidth(frame) * 0.25974 + 0.5), CGRectGetHeight(frame) - 4);
    CGContextSaveGState(context);
    UIRectClip(symbolRect);
    CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);
    CGContextScaleCTM(context, symbolRect.size.width / 40, symbolRect.size.height / 40);

    [TungPodcastStyleKit drawDonateIconWithColor: white];
    CGContextRestoreGState(context);
}

+ (void)drawClipRecordButtonWithFrame: (CGRect)frame on: (BOOL)on down: (BOOL)down disabled: (BOOL)disabled
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.149];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];
    UIColor* red = [UIColor colorWithRed: 1 green: 0 blue: 0 alpha: 1];

    //// Variable Declarations
    BOOL notOn = !on;
    BOOL notDown = !down;
    BOOL downAndOn = down && on;
    BOOL notDisabled = !disabled;


    //// Subframes
    CGRect group = CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame));
    CGRect recording = CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame));


    if (notOn)
    {
        //// Group
        {
            if (notDown)
            {
                //// Bezier Drawing
                UIBezierPath* bezierPath = [UIBezierPath bezierPath];
                [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.73486 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
                [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.26511 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
                [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.11869 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22386 * CGRectGetHeight(group))];
                [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.26511 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77611 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.11869 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
                [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.73486 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
                [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.88130 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77611 * CGRectGetHeight(group))];
                [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.73486 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22386 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.88130 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
                [bezierPath closePath];
                [black10Alpha setFill];
                [bezierPath fill];
            }


            if (down)
            {
                //// Bezier 3 Drawing
                UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
                [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.73486 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
                [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.26511 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
                [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.11869 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22386 * CGRectGetHeight(group))];
                [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.26511 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77611 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.11869 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
                [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.73486 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
                [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.88130 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77611 * CGRectGetHeight(group))];
                [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.73486 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22386 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.88130 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
                [bezier3Path closePath];
                [black25Alpha setFill];
                [bezier3Path fill];
            }


            if (notDisabled)
            {
                //// Symbol Drawing
                CGRect symbolRect = CGRectMake(CGRectGetMinX(group) + floor(CGRectGetWidth(group) * 0.01299 + 0.5), CGRectGetMinY(group) + floor(CGRectGetHeight(group) * 0.04878 + 0.5), floor(CGRectGetWidth(group) * 0.49351 + 0.5) - floor(CGRectGetWidth(group) * 0.01299 + 0.5), floor(CGRectGetHeight(group) * 0.95122 + 0.5) - floor(CGRectGetHeight(group) * 0.04878 + 0.5));
                CGContextSaveGState(context);
                UIRectClip(symbolRect);
                CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);
                CGContextScaleCTM(context, symbolRect.size.width / 40, symbolRect.size.height / 40);

                [TungPodcastStyleKit drawRecordIconWithColor: TungPodcastStyleKit.tungColor];
                CGContextRestoreGState(context);


                //// record text Drawing
                CGRect recordTextRect = CGRectMake(CGRectGetMinX(group) + floor(CGRectGetWidth(group) * 0.37662 + 0.5), CGRectGetMinY(group) + floor(CGRectGetHeight(group) * 0.24390 + 0.5), floor(CGRectGetWidth(group) * 0.94805 + 0.5) - floor(CGRectGetWidth(group) * 0.37662 + 0.5), floor(CGRectGetHeight(group) * 0.75610 + 0.5) - floor(CGRectGetHeight(group) * 0.24390 + 0.5));
                {
                    NSString* textContent = @"Record";
                    NSMutableParagraphStyle* recordTextStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
                    recordTextStyle.alignment = NSTextAlignmentCenter;

                    NSDictionary* recordTextFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 10], NSForegroundColorAttributeName: TungPodcastStyleKit.tungColor, NSParagraphStyleAttributeName: recordTextStyle};

                    CGFloat recordTextTextHeight = [textContent boundingRectWithSize: CGSizeMake(recordTextRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: recordTextFontAttributes context: nil].size.height;
                    CGContextSaveGState(context);
                    CGContextClipToRect(context, recordTextRect);
                    [textContent drawInRect: CGRectMake(CGRectGetMinX(recordTextRect), CGRectGetMinY(recordTextRect) + (CGRectGetHeight(recordTextRect) - recordTextTextHeight) / 2, CGRectGetWidth(recordTextRect), recordTextTextHeight) withAttributes: recordTextFontAttributes];
                    CGContextRestoreGState(context);
                }
            }


            if (disabled)
            {
                //// Symbol 3 Drawing
                CGRect symbol3Rect = CGRectMake(CGRectGetMinX(group) + floor(CGRectGetWidth(group) * 0.01299 + 0.5), CGRectGetMinY(group) + floor(CGRectGetHeight(group) * 0.04878 + 0.5), floor(CGRectGetWidth(group) * 0.49351 + 0.5) - floor(CGRectGetWidth(group) * 0.01299 + 0.5), floor(CGRectGetHeight(group) * 0.95122 + 0.5) - floor(CGRectGetHeight(group) * 0.04878 + 0.5));
                CGContextSaveGState(context);
                UIRectClip(symbol3Rect);
                CGContextTranslateCTM(context, symbol3Rect.origin.x, symbol3Rect.origin.y);
                CGContextScaleCTM(context, symbol3Rect.size.width / 40, symbol3Rect.size.height / 40);

                [TungPodcastStyleKit drawRecordIconWithColor: black15Alpha];
                CGContextRestoreGState(context);


                //// record text 2 Drawing
                CGRect recordText2Rect = CGRectMake(CGRectGetMinX(group) + floor(CGRectGetWidth(group) * 0.37662 + 0.5), CGRectGetMinY(group) + floor(CGRectGetHeight(group) * 0.24390 + 0.5), floor(CGRectGetWidth(group) * 0.94805 + 0.5) - floor(CGRectGetWidth(group) * 0.37662 + 0.5), floor(CGRectGetHeight(group) * 0.75610 + 0.5) - floor(CGRectGetHeight(group) * 0.24390 + 0.5));
                {
                    NSString* textContent = @"Record";
                    NSMutableParagraphStyle* recordText2Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
                    recordText2Style.alignment = NSTextAlignmentCenter;

                    NSDictionary* recordText2FontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 10], NSForegroundColorAttributeName: black15Alpha, NSParagraphStyleAttributeName: recordText2Style};

                    CGFloat recordText2TextHeight = [textContent boundingRectWithSize: CGSizeMake(recordText2Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: recordText2FontAttributes context: nil].size.height;
                    CGContextSaveGState(context);
                    CGContextClipToRect(context, recordText2Rect);
                    [textContent drawInRect: CGRectMake(CGRectGetMinX(recordText2Rect), CGRectGetMinY(recordText2Rect) + (CGRectGetHeight(recordText2Rect) - recordText2TextHeight) / 2, CGRectGetWidth(recordText2Rect), recordText2TextHeight) withAttributes: recordText2FontAttributes];
                    CGContextRestoreGState(context);
                }
            }
        }
    }


    if (on)
    {
        //// Recording
        {
            //// Bezier 2 Drawing
            UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
            [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(recording) + 0.73486 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.00000 * CGRectGetHeight(recording))];
            [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(recording) + 0.26511 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.00000 * CGRectGetHeight(recording))];
            [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(recording) + 0.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.50000 * CGRectGetHeight(recording)) controlPoint1: CGPointMake(CGRectGetMinX(recording) + 0.11869 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.00000 * CGRectGetHeight(recording)) controlPoint2: CGPointMake(CGRectGetMinX(recording) + 0.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.22386 * CGRectGetHeight(recording))];
            [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(recording) + 0.26511 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 1.00000 * CGRectGetHeight(recording)) controlPoint1: CGPointMake(CGRectGetMinX(recording) + 0.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.77611 * CGRectGetHeight(recording)) controlPoint2: CGPointMake(CGRectGetMinX(recording) + 0.11869 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 1.00000 * CGRectGetHeight(recording))];
            [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(recording) + 0.73486 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 1.00000 * CGRectGetHeight(recording))];
            [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(recording) + 1.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.50000 * CGRectGetHeight(recording)) controlPoint1: CGPointMake(CGRectGetMinX(recording) + 0.88130 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 1.00000 * CGRectGetHeight(recording)) controlPoint2: CGPointMake(CGRectGetMinX(recording) + 1.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.77611 * CGRectGetHeight(recording))];
            [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(recording) + 0.73486 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.00000 * CGRectGetHeight(recording)) controlPoint1: CGPointMake(CGRectGetMinX(recording) + 1.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.22386 * CGRectGetHeight(recording)) controlPoint2: CGPointMake(CGRectGetMinX(recording) + 0.88130 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.00000 * CGRectGetHeight(recording))];
            [bezier2Path closePath];
            [red setFill];
            [bezier2Path fill];


            //// Symbol 2 Drawing
            CGRect symbol2Rect = CGRectMake(CGRectGetMinX(recording) + floor(CGRectGetWidth(recording) * 0.03896 + 0.5), CGRectGetMinY(recording) + floor(CGRectGetHeight(recording) * 0.09756 + 0.5), floor(CGRectGetWidth(recording) * 0.48052 + 0.5) - floor(CGRectGetWidth(recording) * 0.03896 + 0.5), floor(CGRectGetHeight(recording) * 0.92683 + 0.5) - floor(CGRectGetHeight(recording) * 0.09756 + 0.5));
            CGContextSaveGState(context);
            UIRectClip(symbol2Rect);
            CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);
            CGContextScaleCTM(context, symbol2Rect.size.width / 40, symbol2Rect.size.height / 40);

            [TungPodcastStyleKit drawStopIconWithColor: white];
            CGContextRestoreGState(context);


            //// stop text Drawing
            CGRect stopTextRect = CGRectMake(CGRectGetMinX(recording) + floor(CGRectGetWidth(recording) * 0.37662 + 0.5), CGRectGetMinY(recording) + floor(CGRectGetHeight(recording) * 0.24390 + 0.5), floor(CGRectGetWidth(recording) * 0.94805 + 0.5) - floor(CGRectGetWidth(recording) * 0.37662 + 0.5), floor(CGRectGetHeight(recording) * 0.75610 + 0.5) - floor(CGRectGetHeight(recording) * 0.24390 + 0.5));
            {
                NSString* textContent = @"Stop";
                NSMutableParagraphStyle* stopTextStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
                stopTextStyle.alignment = NSTextAlignmentCenter;

                NSDictionary* stopTextFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 10], NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: stopTextStyle};

                CGFloat stopTextTextHeight = [textContent boundingRectWithSize: CGSizeMake(stopTextRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: stopTextFontAttributes context: nil].size.height;
                CGContextSaveGState(context);
                CGContextClipToRect(context, stopTextRect);
                [textContent drawInRect: CGRectMake(CGRectGetMinX(stopTextRect), CGRectGetMinY(stopTextRect) + (CGRectGetHeight(stopTextRect) - stopTextTextHeight) / 2, CGRectGetWidth(stopTextRect), stopTextTextHeight) withAttributes: stopTextFontAttributes];
                CGContextRestoreGState(context);
            }


            if (downAndOn)
            {
                //// Bezier 4 Drawing
                UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
                [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(recording) + 0.73486 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.00000 * CGRectGetHeight(recording))];
                [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(recording) + 0.26511 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.00000 * CGRectGetHeight(recording))];
                [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(recording) + 0.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.50000 * CGRectGetHeight(recording)) controlPoint1: CGPointMake(CGRectGetMinX(recording) + 0.11869 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.00000 * CGRectGetHeight(recording)) controlPoint2: CGPointMake(CGRectGetMinX(recording) + 0.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.22386 * CGRectGetHeight(recording))];
                [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(recording) + 0.26511 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 1.00000 * CGRectGetHeight(recording)) controlPoint1: CGPointMake(CGRectGetMinX(recording) + 0.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.77611 * CGRectGetHeight(recording)) controlPoint2: CGPointMake(CGRectGetMinX(recording) + 0.11869 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 1.00000 * CGRectGetHeight(recording))];
                [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(recording) + 0.73486 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 1.00000 * CGRectGetHeight(recording))];
                [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(recording) + 1.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.50000 * CGRectGetHeight(recording)) controlPoint1: CGPointMake(CGRectGetMinX(recording) + 0.88130 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 1.00000 * CGRectGetHeight(recording)) controlPoint2: CGPointMake(CGRectGetMinX(recording) + 1.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.77611 * CGRectGetHeight(recording))];
                [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(recording) + 0.73486 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.00000 * CGRectGetHeight(recording)) controlPoint1: CGPointMake(CGRectGetMinX(recording) + 1.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.22386 * CGRectGetHeight(recording)) controlPoint2: CGPointMake(CGRectGetMinX(recording) + 0.88130 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.00000 * CGRectGetHeight(recording))];
                [bezier4Path closePath];
                [black15Alpha setFill];
                [bezier4Path fill];
            }
        }
    }
}

+ (void)drawClipPlayButtonWithFrame: (CGRect)frame on: (BOOL)on down: (BOOL)down disabled: (BOOL)disabled
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.149];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notDown = !down;
    BOOL notDisabledNotOn = !disabled && !on;

    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }


    if (notDown)
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalPath fill];
    }


    if (notDisabledNotOn)
    {
        //// play Drawing
        CGRect playRect = CGRectMake(CGRectGetMinX(frame) + 3.5, CGRectGetMinY(frame) + 2.5, CGRectGetWidth(frame) - 5.5, CGRectGetHeight(frame) - 5.5);
        CGContextSaveGState(context);
        UIRectClip(playRect);
        CGContextTranslateCTM(context, playRect.origin.x, playRect.origin.y);
        CGContextScaleCTM(context, playRect.size.width / 40, playRect.size.height / 40);

        [TungPodcastStyleKit drawPlayIconWithColor: TungPodcastStyleKit.tungColor];
        CGContextRestoreGState(context);
    }


    if (disabled)
    {
        //// Symbol 2 Drawing
        CGRect symbol2Rect = CGRectMake(CGRectGetMinX(frame) + 3.5, CGRectGetMinY(frame) + 2.5, CGRectGetWidth(frame) - 5.5, CGRectGetHeight(frame) - 5.5);
        CGContextSaveGState(context);
        UIRectClip(symbol2Rect);
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);
        CGContextScaleCTM(context, symbol2Rect.size.width / 40, symbol2Rect.size.height / 40);

        [TungPodcastStyleKit drawPlayIconWithColor: black15Alpha];
        CGContextRestoreGState(context);
    }


    if (on)
    {
        //// stop Drawing
        CGRect stopRect = CGRectMake(CGRectGetMinX(frame) + 4, CGRectGetMinY(frame) + 4, CGRectGetWidth(frame) - 8, CGRectGetHeight(frame) - 8);
        CGContextSaveGState(context);
        UIRectClip(stopRect);
        CGContextTranslateCTM(context, stopRect.origin.x, stopRect.origin.y);
        CGContextScaleCTM(context, stopRect.size.width / 40, stopRect.size.height / 40);

        [TungPodcastStyleKit drawStopIconWithColor: TungPodcastStyleKit.tungColor];
        CGContextRestoreGState(context);
    }
}

+ (void)drawClipCancelButtonWithFrame: (CGRect)frame down: (BOOL)down disabled: (BOOL)disabled
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.149];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notDown = !down;
    BOOL notDisabled = !disabled;

    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }


    if (notDown)
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalPath fill];
    }


    if (notDisabled)
    {
        //// Symbol Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, CGRectGetMinX(frame) + 0.50000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame));

        CGRect symbolRect = CGRectMake(-17.5, -17.5, 35.5, 35.5);
        CGContextSaveGState(context);
        UIRectClip(symbolRect);
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);
        CGContextScaleCTM(context, symbolRect.size.width / 40, symbolRect.size.height / 40);

        [TungPodcastStyleKit drawCancelIconWithColor: TungPodcastStyleKit.tungColor];
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);
    }


    if (disabled)
    {
        //// Symbol 2 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, CGRectGetMinX(frame) + 0.50000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame));

        CGRect symbol2Rect = CGRectMake(-17.5, -17.5, 35.5, 35.5);
        CGContextSaveGState(context);
        UIRectClip(symbol2Rect);
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);
        CGContextScaleCTM(context, symbol2Rect.size.width / 40, symbol2Rect.size.height / 40);

        [TungPodcastStyleKit drawCancelIconWithColor: black15Alpha];
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);
    }
}

+ (void)drawClipOkButtonWithFrame: (CGRect)frame down: (BOOL)down disabled: (BOOL)disabled
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.149];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notDown = !down;
    BOOL notDisabled = !disabled;

    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }


    if (notDown)
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalPath fill];
    }


    if (notDisabled)
    {
        //// Symbol Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, CGRectGetMinX(frame) + 0.49966 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50567 * CGRectGetHeight(frame));

        CGRect symbolRect = CGRectMake(-18.49, -18.73, 37.5, 38);
        CGContextSaveGState(context);
        UIRectClip(symbolRect);
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);
        CGContextScaleCTM(context, symbolRect.size.width / 40, symbolRect.size.height / 40);

        [TungPodcastStyleKit drawCheckmarkIconWithColor: TungPodcastStyleKit.tungColor];
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);
    }


    if (disabled)
    {
        //// Symbol 2 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, CGRectGetMinX(frame) + 0.49966 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50567 * CGRectGetHeight(frame));

        CGRect symbol2Rect = CGRectMake(-18.49, -18.73, 37.5, 38);
        CGContextSaveGState(context);
        UIRectClip(symbol2Rect);
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);
        CGContextScaleCTM(context, symbol2Rect.size.width / 40, symbol2Rect.size.height / 40);

        [TungPodcastStyleKit drawCheckmarkIconWithColor: black15Alpha];
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);
    }
}

+ (void)drawHideControlsButtonWithFrame: (CGRect)frame
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* mediumGray = [UIColor colorWithRed: 0.504 green: 0.512 blue: 0.525 alpha: 1];

    //// Symbol Drawing
    CGRect symbolRect = CGRectMake(CGRectGetMinX(frame) + floor((CGRectGetWidth(frame) - 41) * 0.50000 + 0.5), CGRectGetMinY(frame) + 7, 41, 13);
    CGContextSaveGState(context);
    UIRectClip(symbolRect);
    CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);
    CGContextScaleCTM(context, symbolRect.size.width / 33, symbolRect.size.height / 11);

    [TungPodcastStyleKit drawHideIconWithColor: mediumGray];
    CGContextRestoreGState(context);
}

+ (void)drawShowControlsButtonWithFrame: (CGRect)frame
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Symbol Drawing
    CGRect symbolRect = CGRectMake(CGRectGetMinX(frame) + CGRectGetWidth(frame) - 51, CGRectGetMinY(frame) + 9, 41, 13);
    CGContextSaveGState(context);
    UIRectClip(symbolRect);
    CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);
    CGContextScaleCTM(context, symbolRect.size.width / 33, symbolRect.size.height / 11);

    [TungPodcastStyleKit drawShowIconWithColor: TungPodcastStyleKit.tungColor];
    CGContextRestoreGState(context);
}

+ (void)drawCommentButtonWithFrame: (CGRect)frame on: (BOOL)on down: (BOOL)down disabled: (BOOL)disabled
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.149];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];
    UIColor* tung20 = [TungPodcastStyleKit.tungColor colorWithAlphaComponent: 0.2];

    //// Variable Declarations
    BOOL notDown = !down;
    BOOL downAndOn = down && on;
    BOOL notDisabled = !disabled;

    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }


    if (notDown)
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalPath fill];
    }


    if (notDisabled)
    {
        //// Symbol Drawing
        CGRect symbolRect = CGRectMake(CGRectGetMinX(frame) + 3.5, CGRectGetMinY(frame) + 4, CGRectGetWidth(frame) - 7.5, CGRectGetHeight(frame) - 8);
        CGContextSaveGState(context);
        UIRectClip(symbolRect);
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);
        CGContextScaleCTM(context, symbolRect.size.width / 40, symbolRect.size.height / 40);

        [TungPodcastStyleKit drawCommentIconWithColor: TungPodcastStyleKit.tungColor];
        CGContextRestoreGState(context);
    }


    if (disabled)
    {
        //// Symbol 3 Drawing
        CGRect symbol3Rect = CGRectMake(CGRectGetMinX(frame) + 3.5, CGRectGetMinY(frame) + 4, CGRectGetWidth(frame) - 7.5, CGRectGetHeight(frame) - 8);
        CGContextSaveGState(context);
        UIRectClip(symbol3Rect);
        CGContextTranslateCTM(context, symbol3Rect.origin.x, symbol3Rect.origin.y);
        CGContextScaleCTM(context, symbol3Rect.size.width / 40, symbol3Rect.size.height / 40);

        [TungPodcastStyleKit drawCommentIconWithColor: tung20];
        CGContextRestoreGState(context);
    }


    if (on)
    {
        //// Oval 3 Drawing
        UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [TungPodcastStyleKit.tungColor setFill];
        [oval3Path fill];


        //// Symbol 2 Drawing
        CGRect symbol2Rect = CGRectMake(CGRectGetMinX(frame) + 3.5, CGRectGetMinY(frame) + 4, CGRectGetWidth(frame) - 7.5, CGRectGetHeight(frame) - 8);
        CGContextSaveGState(context);
        UIRectClip(symbol2Rect);
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);
        CGContextScaleCTM(context, symbol2Rect.size.width / 40, symbol2Rect.size.height / 40);

        [TungPodcastStyleKit drawCommentIconWithColor: white];
        CGContextRestoreGState(context);
    }


    if (downAndOn)
    {
        //// Oval 4 Drawing
        UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black15Alpha setFill];
        [oval4Path fill];
    }
}

+ (void)drawTwitterButtonWithFrame: (CGRect)frame on: (BOOL)on down: (BOOL)down
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.149];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];
    UIColor* twitterBlue = [UIColor colorWithRed: 0.165 green: 0.663 blue: 0.878 alpha: 1];

    //// Variable Declarations
    BOOL notOn = !on;
    BOOL notDown = !down;

    if (notDown)
    {
        //// Oval off Drawing
        UIBezierPath* ovalOffPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalOffPath fill];
    }


    if (on)
    {
        //// Oval on Drawing
        UIBezierPath* ovalOnPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [twitterBlue setFill];
        [ovalOnPath fill];
    }


    if (notOn)
    {
        //// twitter off Drawing
        CGRect twitterOffRect = CGRectMake(CGRectGetMinX(frame) + 5, CGRectGetMinY(frame) + 5, CGRectGetWidth(frame) - 9, CGRectGetHeight(frame) - 9);
        CGContextSaveGState(context);
        UIRectClip(twitterOffRect);
        CGContextTranslateCTM(context, twitterOffRect.origin.x, twitterOffRect.origin.y);

        [TungPodcastStyleKit drawTwitterIconWithFrame: CGRectMake(0, 0, twitterOffRect.size.width, twitterOffRect.size.height) color: black15Alpha on: NO];
        CGContextRestoreGState(context);
    }


    if (on)
    {
        //// twitter on Drawing
        CGRect twitterOnRect = CGRectMake(CGRectGetMinX(frame) + 5, CGRectGetMinY(frame) + 5, CGRectGetWidth(frame) - 9, CGRectGetHeight(frame) - 9);
        CGContextSaveGState(context);
        UIRectClip(twitterOnRect);
        CGContextTranslateCTM(context, twitterOnRect.origin.x, twitterOnRect.origin.y);

        [TungPodcastStyleKit drawTwitterIconWithFrame: CGRectMake(0, 0, twitterOnRect.size.width, twitterOnRect.size.height) color: white on: NO];
        CGContextRestoreGState(context);
    }


    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }
}

+ (void)drawFacebookButtonWithFrame: (CGRect)frame on: (BOOL)on down: (BOOL)down
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.149];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];
    UIColor* facebookBlue = [UIColor colorWithRed: 0.239 green: 0.353 blue: 0.596 alpha: 1];

    //// Variable Declarations
    BOOL notOn = !on;

    if (notOn)
    {
        //// Oval off Drawing
        UIBezierPath* ovalOffPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalOffPath fill];
    }


    if (on)
    {
        //// Oval on Drawing
        UIBezierPath* ovalOnPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [facebookBlue setFill];
        [ovalOnPath fill];
    }


    if (notOn)
    {
        //// facebook off Drawing
        CGRect facebookOffRect = CGRectMake(CGRectGetMinX(frame) + 5, CGRectGetMinY(frame) + 5, CGRectGetWidth(frame) - 10, CGRectGetHeight(frame) - 10);
        CGContextSaveGState(context);
        UIRectClip(facebookOffRect);
        CGContextTranslateCTM(context, facebookOffRect.origin.x, facebookOffRect.origin.y);

        [TungPodcastStyleKit drawFacebookIconWithFrame: CGRectMake(0, 0, facebookOffRect.size.width, facebookOffRect.size.height) color: black15Alpha on: NO];
        CGContextRestoreGState(context);
    }


    if (on)
    {
        //// facebook on Drawing
        CGRect facebookOnRect = CGRectMake(CGRectGetMinX(frame) + 5, CGRectGetMinY(frame) + 5, CGRectGetWidth(frame) - 10, CGRectGetHeight(frame) - 10);
        CGContextSaveGState(context);
        UIRectClip(facebookOnRect);
        CGContextTranslateCTM(context, facebookOnRect.origin.x, facebookOnRect.origin.y);

        [TungPodcastStyleKit drawFacebookIconWithFrame: CGRectMake(0, 0, facebookOnRect.size.width, facebookOnRect.size.height) color: white on: NO];
        CGContextRestoreGState(context);
    }


    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }
}

+ (void)drawPillTextbuttonWithFrame: (CGRect)frame down: (BOOL)down disabled: (BOOL)disabled buttonText: (NSString*)buttonText
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* tung20 = [TungPodcastStyleKit.tungColor colorWithAlphaComponent: 0.2];

    //// Variable Declarations
    BOOL notDisabled = !disabled;

    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.73486 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.26511 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.11869 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22386 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.26511 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.77611 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.11869 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.73486 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.88130 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.77611 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.73486 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22386 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.88130 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
    [bezierPath closePath];
    [tung20 setFill];
    [bezierPath fill];


    if (down)
    {
        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.73486 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.26511 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.11869 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22386 * CGRectGetHeight(frame))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.26511 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.77611 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.11869 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame))];
        [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.73486 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.88130 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.77611 * CGRectGetHeight(frame))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.73486 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22386 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.88130 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezier3Path closePath];
        [black10Alpha setFill];
        [bezier3Path fill];
    }


    if (notDisabled)
    {
        //// pillButtonText Drawing
        CGRect pillButtonTextRect = CGRectMake(CGRectGetMinX(frame) + floor((CGRectGetWidth(frame) - 77) / 2 + 0.5), CGRectGetMinY(frame) + floor((CGRectGetHeight(frame) - 27) * 0.42857 + 0.5), 77, 27);
        NSMutableParagraphStyle* pillButtonTextStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        pillButtonTextStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* pillButtonTextFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 15], NSForegroundColorAttributeName: TungPodcastStyleKit.tungColor, NSParagraphStyleAttributeName: pillButtonTextStyle};

        CGFloat pillButtonTextTextHeight = [buttonText boundingRectWithSize: CGSizeMake(pillButtonTextRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: pillButtonTextFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, pillButtonTextRect);
        [buttonText drawInRect: CGRectMake(CGRectGetMinX(pillButtonTextRect), CGRectGetMinY(pillButtonTextRect) + (CGRectGetHeight(pillButtonTextRect) - pillButtonTextTextHeight) / 2, CGRectGetWidth(pillButtonTextRect), pillButtonTextTextHeight) withAttributes: pillButtonTextFontAttributes];
        CGContextRestoreGState(context);
    }


    if (disabled)
    {
        //// pillButtonText 2 Drawing
        CGRect pillButtonText2Rect = CGRectMake(CGRectGetMinX(frame) + floor((CGRectGetWidth(frame) - 77) / 2 + 0.5), CGRectGetMinY(frame) + floor((CGRectGetHeight(frame) - 27) * 0.42857 + 0.5), 77, 27);
        NSMutableParagraphStyle* pillButtonText2Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        pillButtonText2Style.alignment = NSTextAlignmentCenter;

        NSDictionary* pillButtonText2FontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 15], NSForegroundColorAttributeName: tung20, NSParagraphStyleAttributeName: pillButtonText2Style};

        CGFloat pillButtonText2TextHeight = [buttonText boundingRectWithSize: CGSizeMake(pillButtonText2Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: pillButtonText2FontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, pillButtonText2Rect);
        [buttonText drawInRect: CGRectMake(CGRectGetMinX(pillButtonText2Rect), CGRectGetMinY(pillButtonText2Rect) + (CGRectGetHeight(pillButtonText2Rect) - pillButtonText2TextHeight) / 2, CGRectGetWidth(pillButtonText2Rect), pillButtonText2TextHeight) withAttributes: pillButtonText2FontAttributes];
        CGContextRestoreGState(context);
    }
}

+ (void)drawSpeedButtonWithFrame: (CGRect)frame down: (BOOL)down buttonText: (NSString*)buttonText
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notDown = !down;

    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }


    if (notDown)
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalPath fill];
    }


    //// Text Drawing
    CGRect textRect = CGRectMake(CGRectGetMinX(frame) + floor((CGRectGetWidth(frame) - 41) / 2 + 0.5), CGRectGetMinY(frame) + floor((CGRectGetHeight(frame) - 32) * 0.44444 + 0.5), 41, 32);
    NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    textStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"HelveticaNeue-Light" size: UIFont.labelFontSize], NSForegroundColorAttributeName: TungPodcastStyleKit.tungColor, NSParagraphStyleAttributeName: textStyle};

    CGFloat textTextHeight = [buttonText boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textRect);
    [buttonText drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
    CGContextRestoreGState(context);
}

+ (void)drawSaveButtonWithFrame: (CGRect)frame on: (BOOL)on down: (BOOL)down
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.149];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notOn = !on;
    BOOL downAndOn = down && on;

    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }


    if (notOn)
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalPath fill];
    }


    if (on)
    {
        //// Oval 3 Drawing
        UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [TungPodcastStyleKit.tungColor setFill];
        [oval3Path fill];
    }


    if (notOn)
    {
        //// Symbol Drawing
        CGRect symbolRect = CGRectMake(CGRectGetMinX(frame) + 2.5, CGRectGetMinY(frame) + 1, CGRectGetWidth(frame) - 5.5, CGRectGetHeight(frame) - 5);
        CGContextSaveGState(context);
        UIRectClip(symbolRect);
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

        [TungPodcastStyleKit drawSaveIconWithFrame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height) color: TungPodcastStyleKit.tungColor];
        CGContextRestoreGState(context);
    }


    if (on)
    {
        //// Symbol 2 Drawing
        CGRect symbol2Rect = CGRectMake(CGRectGetMinX(frame) + 2.5, CGRectGetMinY(frame) + 1, CGRectGetWidth(frame) - 5.5, CGRectGetHeight(frame) - 5);
        CGContextSaveGState(context);
        UIRectClip(symbol2Rect);
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);

        [TungPodcastStyleKit drawSaveIconWithFrame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height) color: white];
        CGContextRestoreGState(context);
    }


    if (downAndOn)
    {
        //// Oval 4 Drawing
        UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black15Alpha setFill];
        [oval4Path fill];
    }
}

+ (void)drawTungButtonOnWhiteWithFrame: (CGRect)frame down: (BOOL)down buttonText: (NSString*)buttonText
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* tung20 = [TungPodcastStyleKit.tungColor colorWithAlphaComponent: 0.2];

    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.88648 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.26728 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.88648 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.73272 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.94107 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.39581 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.94107 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.60419 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.78763 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.82911 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.85918 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.79698 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.82341 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.82911 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.21774 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.82911 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.11890 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.73272 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.18197 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.82911 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.14619 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.79698 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.11890 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.26728 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.06431 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.60419 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.06431 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.39581 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.21774 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.17089 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.14619 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.20302 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.18197 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.17089 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.78763 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.17089 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.88648 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.26728 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.82341 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.17089 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.85918 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.20302 * CGRectGetHeight(frame))];
    [bezierPath closePath];
    [UIColor.whiteColor setFill];
    [bezierPath fill];
    [TungPodcastStyleKit.tungColor setStroke];
    bezierPath.lineWidth = 1;
    [bezierPath stroke];


    if (down)
    {
        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 164.88, CGRectGetMinY(frame) + 21.12)];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 164.88, CGRectGetMinY(frame) + 57.88) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 175.04, CGRectGetMinY(frame) + 31.27) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 175.04, CGRectGetMinY(frame) + 47.73)];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 146.5, CGRectGetMinY(frame) + 65.5) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 159.81, CGRectGetMinY(frame) + 62.96) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 153.15, CGRectGetMinY(frame) + 65.5)];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 40.5, CGRectGetMinY(frame) + 65.5)];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 22.12, CGRectGetMinY(frame) + 57.88) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 33.85, CGRectGetMinY(frame) + 65.5) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 27.19, CGRectGetMinY(frame) + 62.96)];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 22.12, CGRectGetMinY(frame) + 21.12) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 11.96, CGRectGetMinY(frame) + 47.73) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 11.96, CGRectGetMinY(frame) + 31.27)];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 40.5, CGRectGetMinY(frame) + 13.5) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 27.19, CGRectGetMinY(frame) + 16.04) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 33.85, CGRectGetMinY(frame) + 13.5)];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 146.5, CGRectGetMinY(frame) + 13.5)];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 164.88, CGRectGetMinY(frame) + 21.12) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 153.15, CGRectGetMinY(frame) + 13.5) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 159.81, CGRectGetMinY(frame) + 16.04)];
        [bezier2Path closePath];
        [tung20 setFill];
        [bezier2Path fill];
        [TungPodcastStyleKit.tungColor setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];
    }


    //// Text Drawing
    CGRect textRect = CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.08065 + 0.5), CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.32911 + 0.5), floor(CGRectGetWidth(frame) * 0.93011 + 0.5) - floor(CGRectGetWidth(frame) * 0.08065 + 0.5), floor(CGRectGetHeight(frame) * 0.68354 + 0.5) - floor(CGRectGetHeight(frame) * 0.32911 + 0.5));
    NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    textStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: UIFont.buttonFontSize], NSForegroundColorAttributeName: TungPodcastStyleKit.tungColor, NSParagraphStyleAttributeName: textStyle};

    CGFloat textTextHeight = [buttonText boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textRect);
    [buttonText drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
    CGContextRestoreGState(context);
}

+ (void)drawFollowButtonWithFrame: (CGRect)frame on: (BOOL)on down: (BOOL)down buttonText: (NSString*)buttonText
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];

    //// Variable Declarations
    BOOL notOn = !on;

    if (notOn)
    {
        //// Bezier up state Drawing
        UIBezierPath* bezierUpStatePath = [UIBezierPath bezierPath];
        [bezierUpStatePath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 132.71, CGRectGetMinY(frame) + 18.93)];
        [bezierUpStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 115.71, CGRectGetMinY(frame) + 35.93) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 132.71, CGRectGetMinY(frame) + 28.32) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 125.1, CGRectGetMinY(frame) + 35.93)];
        [bezierUpStatePath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 18.78, CGRectGetMinY(frame) + 35.93)];
        [bezierUpStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 1.78, CGRectGetMinY(frame) + 18.93) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 9.39, CGRectGetMinY(frame) + 35.93) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 1.78, CGRectGetMinY(frame) + 28.32)];
        [bezierUpStatePath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 1.78, CGRectGetMinY(frame) + 18.93)];
        [bezierUpStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 18.78, CGRectGetMinY(frame) + 1.93) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 1.78, CGRectGetMinY(frame) + 9.54) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 9.39, CGRectGetMinY(frame) + 1.93)];
        [bezierUpStatePath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 115.71, CGRectGetMinY(frame) + 1.93)];
        [bezierUpStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 132.71, CGRectGetMinY(frame) + 18.93) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 125.1, CGRectGetMinY(frame) + 1.93) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 132.71, CGRectGetMinY(frame) + 9.54)];
        [bezierUpStatePath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 132.71, CGRectGetMinY(frame) + 18.93)];
        [bezierUpStatePath closePath];
        [UIColor.whiteColor setStroke];
        bezierUpStatePath.lineWidth = 1;
        [bezierUpStatePath stroke];
    }


    if (down)
    {
        //// Bezier down state Drawing
        UIBezierPath* bezierDownStatePath = [UIBezierPath bezierPath];
        [bezierDownStatePath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 132.71, CGRectGetMinY(frame) + 18.93)];
        [bezierDownStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 115.71, CGRectGetMinY(frame) + 35.93) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 132.71, CGRectGetMinY(frame) + 28.32) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 125.1, CGRectGetMinY(frame) + 35.93)];
        [bezierDownStatePath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 18.78, CGRectGetMinY(frame) + 35.93)];
        [bezierDownStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 1.78, CGRectGetMinY(frame) + 18.93) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 9.39, CGRectGetMinY(frame) + 35.93) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 1.78, CGRectGetMinY(frame) + 28.32)];
        [bezierDownStatePath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 1.78, CGRectGetMinY(frame) + 18.93)];
        [bezierDownStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 18.78, CGRectGetMinY(frame) + 1.93) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 1.78, CGRectGetMinY(frame) + 9.54) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 9.39, CGRectGetMinY(frame) + 1.93)];
        [bezierDownStatePath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 115.71, CGRectGetMinY(frame) + 1.93)];
        [bezierDownStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 132.71, CGRectGetMinY(frame) + 18.93) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 125.1, CGRectGetMinY(frame) + 1.93) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 132.71, CGRectGetMinY(frame) + 9.54)];
        [bezierDownStatePath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 132.71, CGRectGetMinY(frame) + 18.93)];
        [bezierDownStatePath closePath];
        [white setFill];
        [bezierDownStatePath fill];
        [UIColor.whiteColor setStroke];
        bezierDownStatePath.lineWidth = 1;
        [bezierDownStatePath stroke];
    }


    if (notOn)
    {
        //// Text on Drawing
        CGRect textOnRect = CGRectMake(CGRectGetMinX(frame) + 16.97, CGRectGetMinY(frame) + 1.93, 101.04, 34);
        NSMutableParagraphStyle* textOnStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        textOnStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* textOnFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 15], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textOnStyle};

        CGFloat textOnTextHeight = [buttonText boundingRectWithSize: CGSizeMake(textOnRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textOnFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, textOnRect);
        [buttonText drawInRect: CGRectMake(CGRectGetMinX(textOnRect), CGRectGetMinY(textOnRect) + (CGRectGetHeight(textOnRect) - textOnTextHeight) / 2, CGRectGetWidth(textOnRect), textOnTextHeight) withAttributes: textOnFontAttributes];
        CGContextRestoreGState(context);
    }


    if (on)
    {
        //// Bezier on state Drawing
        UIBezierPath* bezierOnStatePath = [UIBezierPath bezierPath];
        [bezierOnStatePath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 132.71, CGRectGetMinY(frame) + 18.93)];
        [bezierOnStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 115.71, CGRectGetMinY(frame) + 35.93) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 132.71, CGRectGetMinY(frame) + 28.32) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 125.1, CGRectGetMinY(frame) + 35.93)];
        [bezierOnStatePath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 18.78, CGRectGetMinY(frame) + 35.93)];
        [bezierOnStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 1.78, CGRectGetMinY(frame) + 18.93) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 9.39, CGRectGetMinY(frame) + 35.93) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 1.78, CGRectGetMinY(frame) + 28.32)];
        [bezierOnStatePath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 1.78, CGRectGetMinY(frame) + 18.93)];
        [bezierOnStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 18.78, CGRectGetMinY(frame) + 1.93) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 1.78, CGRectGetMinY(frame) + 9.54) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 9.39, CGRectGetMinY(frame) + 1.93)];
        [bezierOnStatePath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 115.71, CGRectGetMinY(frame) + 1.93)];
        [bezierOnStatePath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 132.71, CGRectGetMinY(frame) + 18.93) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 125.1, CGRectGetMinY(frame) + 1.93) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 132.71, CGRectGetMinY(frame) + 9.54)];
        [bezierOnStatePath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 132.71, CGRectGetMinY(frame) + 18.93)];
        [bezierOnStatePath closePath];
        [UIColor.whiteColor setFill];
        [bezierOnStatePath fill];
        [UIColor.whiteColor setStroke];
        bezierOnStatePath.lineWidth = 1;
        [bezierOnStatePath stroke];


        //// Text off Drawing
        CGRect textOffRect = CGRectMake(CGRectGetMinX(frame) + 16.97, CGRectGetMinY(frame) + 1.93, 101.04, 34);
        NSMutableParagraphStyle* textOffStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        textOffStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* textOffFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 15], NSForegroundColorAttributeName: TungPodcastStyleKit.tungColorMediumLight, NSParagraphStyleAttributeName: textOffStyle};

        CGFloat textOffTextHeight = [buttonText boundingRectWithSize: CGSizeMake(textOffRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textOffFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, textOffRect);
        [buttonText drawInRect: CGRectMake(CGRectGetMinX(textOffRect), CGRectGetMinY(textOffRect) + (CGRectGetHeight(textOffRect) - textOffTextHeight) / 2, CGRectGetWidth(textOffRect), textOffTextHeight) withAttributes: textOffFontAttributes];
        CGContextRestoreGState(context);
    }
}

+ (void)drawTextAreaBkgdWithFrame: (CGRect)frame
{
    //// Color Declarations
    UIColor* black = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    UIColor* black5 = [black colorWithAlphaComponent: 0.05];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame)) cornerRadius: 10];
    [black5 setFill];
    [rectanglePath fill];
}

@end
