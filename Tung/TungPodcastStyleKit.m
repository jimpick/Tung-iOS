//
//  TungPodcastStyleKit.m
//  Tung
//
//  Created by Jamie Perkins on 10/24/16.
//  Copyright (c) 2016 Inorganik Produce, Inc. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "TungPodcastStyleKit.h"


@implementation TungPodcastStyleKit

#pragma mark Cache

static UIColor* _tungColor = nil;
static UIColor* _twitterBlue = nil;
static UIColor* _facebookBlue = nil;
static UIColor* _tungColorMediumLight = nil;
static UIColor* _green = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _tungColor = [UIColor colorWithRed: 0.341 green: 0.353 blue: 0.843 alpha: 1];
    _twitterBlue = [UIColor colorWithRed: 0.165 green: 0.663 blue: 0.878 alpha: 1];
    _facebookBlue = [UIColor colorWithRed: 0.239 green: 0.353 blue: 0.596 alpha: 1];
    _tungColorMediumLight = [UIColor colorWithRed: 0.447 green: 0.506 blue: 0.953 alpha: 1];
    _green = [UIColor colorWithRed: 0.569 green: 0.847 blue: 0.169 alpha: 1];

}

#pragma mark Colors

+ (UIColor*)tungColor { return _tungColor; }
+ (UIColor*)twitterBlue { return _twitterBlue; }
+ (UIColor*)facebookBlue { return _facebookBlue; }
+ (UIColor*)tungColorMediumLight { return _tungColorMediumLight; }
+ (UIColor*)green { return _green; }

#pragma mark Drawing Methods

+ (void)drawSubscribeIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group3 = CGRectMake(CGRectGetMinX(frame) + 1.5, CGRectGetMinY(frame) + 1.59, CGRectGetWidth(frame) - 3, CGRectGetHeight(frame) - 3);


    //// Group 3
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.76732 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.47629 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.63380 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.34053 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.76732 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40131 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.70763 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.34053 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.50046 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.47629 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.56008 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.34053 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.50046 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40131 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.36701 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.34053 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.50046 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40131 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.44080 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.34053 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.23348 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.47629 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.29314 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.34053 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.23348 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40131 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.28031 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.57889 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.23348 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.51766 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.25196 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.55400 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.50083 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.80328 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.72517 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.57505 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.76732 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.47629 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.75101 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.55039 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.76732 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.51533 * CGRectGetHeight(group3))];
        [bezierPath closePath];
        bezierPath.lineCapStyle = kCGLineCapRound;

        bezierPath.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.77580 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.26693 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.86710 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.49132 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.83212 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.32439 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.86710 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40378 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.77587 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.71567 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.86710 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.57897 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.83212 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.65836 * CGRectGetHeight(group3))];
        bezier2Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.84490 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.78592 * CGRectGetHeight(group3))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.96485 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.49135 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.91896 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.71056 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.96485 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.60632 * CGRectGetHeight(group3))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.84490 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.19673 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.96485 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.37626 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.91896 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.27205 * CGRectGetHeight(group3))];
        bezier3Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier3Path.lineWidth = 1;
        [bezier3Path stroke];


        //// Bezier 4 Drawing
        UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
        [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.22507 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.71567 * CGRectGetHeight(group3))];
        [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.13369 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.49132 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.16866 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.65836 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.13369 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.57897 * CGRectGetHeight(group3))];
        [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.22507 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.26689 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.13369 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40378 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.16866 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.32436 * CGRectGetHeight(group3))];
        bezier4Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier4Path.lineWidth = 1;
        [bezier4Path stroke];


        //// Bezier 5 Drawing
        UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
        [bezier5Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.15596 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.19672 * CGRectGetHeight(group3))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.03608 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.49133 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.08183 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.27203 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.03608 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.37628 * CGRectGetHeight(group3))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.15588 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.78598 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.03608 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.60634 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.08183 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.71054 * CGRectGetHeight(group3))];
        bezier5Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier5Path.lineWidth = 1;
        [bezier5Path stroke];


        //// Rectangle Drawing
    }
}

+ (void)drawDonateIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group = CGRectMake(CGRectGetMinX(frame) + 1.72, CGRectGetMinY(frame) + 6.74, floor((CGRectGetWidth(frame) - 1.72) * 0.97101 + 1.33) - 0.83, floor((CGRectGetHeight(frame) - 6.74) * 0.74094 + 6.98) - 6.48);


    //// Group
    {
        //// Bezier 5 Drawing
        UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
        [bezier5Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.88045 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.01788 * CGRectGetHeight(group))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.87651 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.06079 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.87797 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.03083 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.87651 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.04526 * CGRectGetHeight(group))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.96450 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.28585 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.87651 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.14605 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.91591 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.23046 * CGRectGetHeight(group))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.31834 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.97716 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.30023 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.98911 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.31118 * CGRectGetHeight(group))];
        [bezier5Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.09592 * CGRectGetHeight(group))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.88045 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.01788 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.95904 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.05774 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.91934 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.03283 * CGRectGetHeight(group))];
        [bezier5Path closePath];
        bezier5Path.lineCapStyle = kCGLineCapRound;

        bezier5Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier5Path.lineWidth = 1;
        [bezier5Path stroke];


        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.88694 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.90400 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.63659 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.54772 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.36334 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.24322 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.11313 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.09596 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.36334 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.45219 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.63659 * CGRectGetWidth(group), CGRectGetMinY(group) + -0.24315 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.88694 * CGRectGetHeight(group))];
        [bezierPath closePath];
        bezierPath.lineCapStyle = kCGLineCapRound;

        bezierPath.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.12342 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.93913 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.03550 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.71423 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.12342 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.85398 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.08406 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.76968 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.68164 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.02284 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.69975 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.01089 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.68885 * CGRectGetHeight(group))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.90401 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.11952 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.98210 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.04086 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.94229 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.08066 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.96720 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.12342 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.93913 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.12200 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.96920 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.12342 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.95488 * CGRectGetHeight(group))];
        [bezier2Path closePath];
        bezier2Path.lineCapStyle = kCGLineCapRound;

        bezier2Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.03550 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.37183 * CGRectGetHeight(group))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.12342 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.27915 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.08406 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.43354 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.12342 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.37388 * CGRectGetHeight(group))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.11182 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.18805 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.12342 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.24840 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.11912 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.21754 * CGRectGetHeight(group))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.11312 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.07541 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.17283 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.03815 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.14882 * CGRectGetHeight(group))];
        [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.30616 * CGRectGetHeight(group))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.03550 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.37183 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.01090 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.33302 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.02284 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.35566 * CGRectGetHeight(group))];
        [bezier3Path closePath];
        bezier3Path.lineCapStyle = kCGLineCapRound;

        bezier3Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier3Path.lineWidth = 1;
        [bezier3Path stroke];


        //// Bezier 4 Drawing
        UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
        [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.96449 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.64566 * CGRectGetHeight(group))];
        [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.87649 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.72881 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.91589 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.59021 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.87649 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.64382 * CGRectGetHeight(group))];
        [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.88854 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.81211 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.87649 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.75698 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.88101 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.78515 * CGRectGetHeight(group))];
        [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.99998 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.88694 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.92485 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.82728 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.96184 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.85134 * CGRectGetHeight(group))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.99998 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.70453 * CGRectGetHeight(group))];
        [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.96449 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.64566 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.98912 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.68052 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.97718 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.66004 * CGRectGetHeight(group))];
        [bezier4Path closePath];
        bezier4Path.lineCapStyle = kCGLineCapRound;

        bezier4Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier4Path.lineWidth = 1;
        [bezier4Path stroke];


        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPath];
        [ovalPath moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.62073 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55082 * CGRectGetHeight(group))];
        [ovalPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.45104 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.80606 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.59375 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.71651 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.51777 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.83078 * CGRectGetHeight(group))];
        [ovalPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.37906 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.46129 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.38430 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.78133 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.35207 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.62697 * CGRectGetHeight(group))];
        [ovalPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.54875 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.20605 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.40604 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.29560 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.48201 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.18132 * CGRectGetHeight(group))];
        [ovalPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.62073 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55082 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.61549 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.23077 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.64771 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.38513 * CGRectGetHeight(group))];
        [ovalPath closePath];
        [color setStroke];
        ovalPath.lineWidth = 1;
        [ovalPath stroke];


        //// Bezier 6 Drawing
        UIBezierPath* bezier6Path = [UIBezierPath bezierPath];
        [bezier6Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.58956 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.39667 * CGRectGetHeight(group))];
        [bezier6Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.54904 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.34085 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.59112 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.34791 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.57304 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.32284 * CGRectGetHeight(group))];
        [bezier6Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.50279 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.46202 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.52505 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.35896 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.50439 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.41325 * CGRectGetHeight(group))];
        [bezier6Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.46231 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.40630 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.50439 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.41325 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.48630 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.38814 * CGRectGetHeight(group))];
        [bezier6Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.41602 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.52736 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.43828 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.42431 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.41761 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.47866 * CGRectGetHeight(group))];
        [bezier6Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.42908 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.58281 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.41514 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55432 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.42036 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.57349 * CGRectGetHeight(group))];
        [bezier6Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.49600 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.67502 * CGRectGetHeight(group))];
        [bezier6Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.57378 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.47139 * CGRectGetHeight(group))];
        [bezier6Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.58956 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.39667 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.58271 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.44896 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.58875 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.42205 * CGRectGetHeight(group))];
        [bezier6Path closePath];
        bezier6Path.lineCapStyle = kCGLineCapRound;

        bezier6Path.lineJoinStyle = kCGLineJoinRound;

        [color setFill];
        [bezier6Path fill];
    }
}

+ (void)drawRecommendIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group3 = CGRectMake(CGRectGetMinX(frame) + 3.97, CGRectGetMinY(frame) + 4, CGRectGetWidth(frame) - 8, CGRectGetHeight(frame) - 8);


    //// Group 3
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.50398 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.94655 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.35205 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.94557 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.17763 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.72514 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.26604 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.94557 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.17763 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.87311 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.17849 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.59522 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.17763 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.70919 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.17763 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.60554 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.39368 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.24051 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.19541 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.39358 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.31574 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.31389 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.51592 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.02117 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.50354 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.13704 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.51513 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.05109 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.62593 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.14938 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.54806 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.02046 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.62683 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.03656 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.52172 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.36637 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.62496 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.26742 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.50354 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.31762 * CGRectGetHeight(group3))];
        bezierPath.lineCapStyle = kCGLineCapRound;

        bezierPath.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.53123 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.50897 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.47776 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.58885 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.50018 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.51997 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.47776 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.55426 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.53123 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.66861 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.47776 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.62336 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.50018 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.65761 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.47776 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.74363 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.50025 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.67807 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.47776 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.70998 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.53123 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.81866 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.47776 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.77576 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.50248 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.80800 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.47272 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.88184 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.50111 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.82410 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.47272 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.85064 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.53731 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.94557 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.47272 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.91706 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.50158 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.94557 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.70396 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.94557 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.76848 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.88184 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.73962 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.94557 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.76848 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.91706 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.70396 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.81821 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.76848 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.84676 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.73962 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.81821 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.68758 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.81821 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.68758 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.81866 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.75034 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.81866 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.82645 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.74363 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.79226 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.81866 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.82645 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.78508 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.75034 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.66861 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.82645 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.70223 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.79226 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.66861 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.68758 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.66861 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.76747 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.66861 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.84833 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.58885 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.81213 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.66861 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.84833 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.63290 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.76747 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.50909 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.84833 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.54475 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.81213 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.50909 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.68758 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.50909 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.75034 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.50909 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.82645 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.43398 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.79226 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.50909 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.82645 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.47543 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.75034 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.35896 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.82645 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.39261 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.79226 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.35896 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.55383 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.35896 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.47776 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.43398 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.51183 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.35896 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.47776 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.39261 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.53123 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.50897 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.47776 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.46779 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.50025 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.49954 * CGRectGetHeight(group3))];
        [bezier2Path closePath];
        bezier2Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];


        //// Rectangle Drawing
    }
}

+ (void)drawCommentIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group3 = CGRectMake(CGRectGetMinX(frame) + 6.71, CGRectGetMinY(frame) + 8.72, CGRectGetWidth(frame) - 12.51, CGRectGetHeight(frame) - 16.04);


    //// Group 3
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.75997 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.00000 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.23994 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.00000 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.28181 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.10798 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.00000 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.12673 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.51912 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.23994 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.80088 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.67405 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.10798 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.80088 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.34501 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.80088 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.62742 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 1.00000 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.39765 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.94813 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.52100 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 1.00000 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.55659 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.80088 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.56752 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.95764 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.53776 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.89150 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.75997 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.80088 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 1.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.51912 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.89193 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.80088 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 1.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.67405 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 1.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.28181 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.75997 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.00000 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 1.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.12673 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.89193 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.00000 * CGRectGetHeight(group3))];
        [bezierPath closePath];
        bezierPath.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];


        //// Group
        {
            //// Bezier 2 Drawing
            UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
            [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.22155 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.25926 * CGRectGetHeight(group3))];
            [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.75863 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.25926 * CGRectGetHeight(group3))];
            bezier2Path.lineCapStyle = kCGLineCapRound;

            [color setStroke];
            bezier2Path.lineWidth = 1;
            [bezier2Path stroke];


            //// Bezier 3 Drawing
            UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
            [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.22155 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40389 * CGRectGetHeight(group3))];
            [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.62977 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40389 * CGRectGetHeight(group3))];
            bezier3Path.lineCapStyle = kCGLineCapRound;

            [color setStroke];
            bezier3Path.lineWidth = 1;
            [bezier3Path stroke];


            //// Bezier 4 Drawing
            UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
            [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.22155 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.54853 * CGRectGetHeight(group3))];
            [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.70275 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.54853 * CGRectGetHeight(group3))];
            bezier4Path.lineCapStyle = kCGLineCapRound;

            [color setStroke];
            bezier4Path.lineWidth = 1;
            [bezier4Path stroke];
        }
    }
}

+ (void)drawClipIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group3 = CGRectMake(CGRectGetMinX(frame) + 6.8, CGRectGetMinY(frame) + 5.52, CGRectGetWidth(frame) - 14.21, CGRectGetHeight(frame) - 11.79);


    //// Group 3
    {
        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40661 * CGRectGetHeight(group3))];
        [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.59339 * CGRectGetHeight(group3))];
        bezier3Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier3Path.lineWidth = 1;
        [bezier3Path stroke];


        //// Bezier 4 Drawing
        UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
        [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.10000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.27438 * CGRectGetHeight(group3))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.10000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.72562 * CGRectGetHeight(group3))];
        bezier4Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier4Path.lineWidth = 1;
        [bezier4Path stroke];


        //// Bezier 5 Drawing
        UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
        [bezier5Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.19998 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.33780 * CGRectGetHeight(group3))];
        [bezier5Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.19998 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.66221 * CGRectGetHeight(group3))];
        bezier5Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier5Path.lineWidth = 1;
        [bezier5Path stroke];


        //// Bezier 6 Drawing
        UIBezierPath* bezier6Path = [UIBezierPath bezierPath];
        [bezier6Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.29998 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.19670 * CGRectGetHeight(group3))];
        [bezier6Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.29998 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.80330 * CGRectGetHeight(group3))];
        bezier6Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier6Path.lineWidth = 1;
        [bezier6Path stroke];


        //// Bezier 7 Drawing
        UIBezierPath* bezier7Path = [UIBezierPath bezierPath];
        [bezier7Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.39998 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.41223 * CGRectGetHeight(group3))];
        [bezier7Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.39998 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.58778 * CGRectGetHeight(group3))];
        bezier7Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier7Path.lineWidth = 1;
        [bezier7Path stroke];


        //// Bezier 8 Drawing
        UIBezierPath* bezier8Path = [UIBezierPath bezierPath];
        [bezier8Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.49998 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.28732 * CGRectGetHeight(group3))];
        [bezier8Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.49998 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.71270 * CGRectGetHeight(group3))];
        bezier8Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier8Path.lineWidth = 1;
        [bezier8Path stroke];


        //// Bezier 9 Drawing
        UIBezierPath* bezier9Path = [UIBezierPath bezierPath];
        [bezier9Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.59998 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.10910 * CGRectGetHeight(group3))];
        [bezier9Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.59998 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.89090 * CGRectGetHeight(group3))];
        bezier9Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier9Path.lineWidth = 1;
        [bezier9Path stroke];


        //// Bezier 10 Drawing
        UIBezierPath* bezier10Path = [UIBezierPath bezierPath];
        [bezier10Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.69996 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.00000 * CGRectGetHeight(group3))];
        [bezier10Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.69996 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 1.00000 * CGRectGetHeight(group3))];
        bezier10Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier10Path.lineWidth = 1;
        [bezier10Path stroke];


        //// Bezier 11 Drawing
        UIBezierPath* bezier11Path = [UIBezierPath bezierPath];
        [bezier11Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.79996 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.27438 * CGRectGetHeight(group3))];
        [bezier11Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.79996 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.72562 * CGRectGetHeight(group3))];
        bezier11Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier11Path.lineWidth = 1;
        [bezier11Path stroke];


        //// Bezier 12 Drawing
        UIBezierPath* bezier12Path = [UIBezierPath bezierPath];
        [bezier12Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.89996 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.15040 * CGRectGetHeight(group3))];
        [bezier12Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.89996 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.84960 * CGRectGetHeight(group3))];
        bezier12Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier12Path.lineWidth = 1;
        [bezier12Path stroke];


        //// Bezier 13 Drawing
        UIBezierPath* bezier13Path = [UIBezierPath bezierPath];
        [bezier13Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.99996 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.36698 * CGRectGetHeight(group3))];
        [bezier13Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.99996 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.63302 * CGRectGetHeight(group3))];
        bezier13Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier13Path.lineWidth = 1;
        [bezier13Path stroke];
    }
}

+ (void)drawQueueIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group = CGRectMake(CGRectGetMinX(frame) + 6.59, CGRectGetMinY(frame) + 5.59, CGRectGetWidth(frame) - 11.36, CGRectGetHeight(frame) - 12.36);


    //// Group
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.36959 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.23314 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.48195 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.11663 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.36977 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00022 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.36959 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
        bezierPath.lineCapStyle = kCGLineCapRound;

        bezierPath.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.34461 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.33862 * CGRectGetHeight(group))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.34461 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77781 * CGRectGetHeight(group))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.56677 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55824 * CGRectGetHeight(group))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.34461 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.33862 * CGRectGetHeight(group))];
        [bezier2Path closePath];
        [color setFill];
        [bezier2Path fill];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.61331 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.27640 * CGRectGetHeight(group))];
        [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.27640 * CGRectGetHeight(group))];
        bezier3Path.lineCapStyle = kCGLineCapRound;

        bezier3Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier3Path.lineWidth = 1;
        [bezier3Path stroke];


        //// Bezier 4 Drawing
        UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
        [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.61331 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.42580 * CGRectGetHeight(group))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.42580 * CGRectGetHeight(group))];
        bezier4Path.lineCapStyle = kCGLineCapRound;

        bezier4Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier4Path.lineWidth = 1;
        [bezier4Path stroke];


        //// Bezier 5 Drawing
        UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
        [bezier5Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.85002 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.59679 * CGRectGetHeight(group))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.42571 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.83120 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.82277 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.64834 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55830 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.19055 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.80227 * CGRectGetHeight(group))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.42571 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.11660 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.31433 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.19055 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.11660 * CGRectGetHeight(group))];
        [bezier5Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.48197 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.11660 * CGRectGetHeight(group))];
        bezier5Path.lineCapStyle = kCGLineCapRound;

        bezier5Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier5Path.lineWidth = 1;
        [bezier5Path stroke];


        //// Bezier 6 Drawing
        UIBezierPath* bezier6Path = [UIBezierPath bezierPath];
        [bezier6Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.61331 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.12705 * CGRectGetHeight(group))];
        [bezier6Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.12705 * CGRectGetHeight(group))];
        bezier6Path.lineCapStyle = kCGLineCapRound;

        bezier6Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier6Path.lineWidth = 1;
        [bezier6Path stroke];
    }
}

+ (void)drawSaveIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group = CGRectMake(CGRectGetMinX(frame) + 6, CGRectGetMinY(frame) + 6, CGRectGetWidth(frame) - 12, CGRectGetHeight(frame) - 12);


    //// Group
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.00971 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.91798 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.99029 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.91798 * CGRectGetHeight(group))];
        bezierPath.lineCapStyle = kCGLineCapRound;

        bezierPath.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.75251 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55317 * CGRectGetHeight(group))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.49991 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.80294 * CGRectGetHeight(group))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.24794 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55363 * CGRectGetHeight(group))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.24737 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55317 * CGRectGetHeight(group))];
        bezier2Path.lineCapStyle = kCGLineCapRound;

        bezier2Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.49990 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.80295 * CGRectGetHeight(group))];
        [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.49990 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.08202 * CGRectGetHeight(group))];
        bezier3Path.lineCapStyle = kCGLineCapRound;

        bezier3Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier3Path.lineWidth = 1;
        [bezier3Path stroke];


        //// Rectangle Drawing
    }
}

+ (void)drawCancelIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group2 = CGRectMake(CGRectGetMinX(frame) + 10.61, CGRectGetMinY(frame) + 10.61, CGRectGetWidth(frame) - 21.04, CGRectGetHeight(frame) - 21.04);


    //// Group 2
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group2) + 0.00001 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.00000 * CGRectGetHeight(group2))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 1.00000 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 1.00000 * CGRectGetHeight(group2))];
        bezierPath.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group2) + 0.99999 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.00000 * CGRectGetHeight(group2))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 0.00000 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 1.00000 * CGRectGetHeight(group2))];
        bezier2Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];
    }
}

+ (void)drawCheckmarkIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group3 = CGRectMake(CGRectGetMinX(frame) + 4, CGRectGetMinY(frame) + 4, CGRectGetWidth(frame) - 8, CGRectGetHeight(frame) - 8);


    //// Group 3
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.39092 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.81052 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.33412 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.79001 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.37015 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.81052 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.35002 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.80325 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.14169 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.62898 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.13245 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.50962 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.10520 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.59855 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.10111 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.54512 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.25518 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.50066 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.16383 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.47422 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.21876 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.47014 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.38030 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.60534 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.74711 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.17297 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.86966 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.16159 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.77771 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.13699 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.83250 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.13171 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.88137 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.28084 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.90672 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.19132 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.91197 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.24473 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.45801 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.77979 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.39832 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.81018 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.44313 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.79725 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.42159 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.80829 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.39092 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.81052 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.39585 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.81038 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.39335 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.81052 * CGRectGetHeight(group3))];
        [bezierPath closePath];
        [color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];


        //// Rectangle Drawing
    }
}

+ (void)drawShareIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group3 = CGRectMake(CGRectGetMinX(frame) + 12.59, CGRectGetMinY(frame) + 8.59, CGRectGetWidth(frame) - 24.95, CGRectGetHeight(frame) - 18.09);


    //// Group 3
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.36355 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.33659 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.33659 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 1.00000 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 1.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 1.00000 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 1.00000 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.33659 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.63645 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.33659 * CGRectGetHeight(group3))];
        bezierPath.lineCapStyle = kCGLineCapRound;

        bezierPath.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.75757 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.18195 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.49991 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.00000 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.24294 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.18160 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.24238 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.18195 * CGRectGetHeight(group3))];
        bezier2Path.lineCapStyle = kCGLineCapRound;

        bezier2Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.49992 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.00000 * CGRectGetHeight(group3))];
        [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.49992 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.52513 * CGRectGetHeight(group3))];
        bezier3Path.lineCapStyle = kCGLineCapRound;

        bezier3Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier3Path.lineWidth = 1;
        [bezier3Path stroke];
    }
}

+ (void)drawWebsiteIconWithFrame: (CGRect)frame color: (UIColor*)color
{

    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.46736 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.44915 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.50006 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.60062 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.44830 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50006 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.45914 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.55967 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.70190 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.60062 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.55577 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.65643 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.64615 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.65646 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.85820 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.44406 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.85820 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.24187 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.91395 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.38823 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.91392 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.29770 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.65630 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.24187 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.80249 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.18606 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.71205 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.18603 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.57994 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.31838 * CGRectGetHeight(frame))];
    [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.44378 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.65786 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.36867 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.73313 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.16680 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.73313 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.31292 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.78897 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.22251 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.78894 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.16680 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.53094 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.11108 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.67730 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.11105 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.58677 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.32310 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.37441 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.52494 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.37441 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.37882 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.31854 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.46923 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.31857 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.55973 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.51993 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.56424 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.41377 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.57583 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.47036 * CGRectGetHeight(frame))];
    bezierPath.lineCapStyle = kCGLineCapRound;

    [color setStroke];
    bezierPath.lineWidth = 1;
    [bezierPath stroke];
}

+ (void)drawPlayIconWithColor: (UIColor*)color
{

    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(14, 7)];
    [bezierPath addLineToPoint: CGPointMake(14, 32)];
    [bezierPath addLineToPoint: CGPointMake(29, 19.5)];
    [bezierPath addLineToPoint: CGPointMake(14, 7)];
    [bezierPath closePath];
    [color setFill];
    [bezierPath fill];
}

+ (void)drawStopIconWithFrame: (CGRect)frame color: (UIColor*)color
{

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(CGRectGetMinX(frame) + 10.5, CGRectGetMinY(frame) + 10.5, CGRectGetWidth(frame) - 21, CGRectGetHeight(frame) - 21)];
    [color setFill];
    [rectanglePath fill];
}

+ (void)drawRecordIconWithColor: (UIColor*)color
{

    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(10, 9, 21, 21)];
    [color setFill];
    [ovalPath fill];
}

+ (void)drawSubscribeIconSolidWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group3 = CGRectMake(CGRectGetMinX(frame) + 1.52, CGRectGetMinY(frame) + 1.59, CGRectGetWidth(frame) - 3, CGRectGetHeight(frame) - 3);


    //// Group 3
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.76685 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.47629 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.63333 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.34053 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.76685 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40131 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.70716 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.34053 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.49999 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.47629 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.55961 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.34053 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.49999 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40131 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.36654 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.34053 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.49999 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40131 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.44033 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.34053 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.23301 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.47629 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.29267 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.34053 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.23301 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40131 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.27984 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.57889 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.23301 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.51766 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.25149 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.55400 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.50036 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.80328 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.72470 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.57505 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.76685 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.47629 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.75055 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.55039 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.76685 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.51533 * CGRectGetHeight(group3))];
        [bezierPath closePath];
        bezierPath.lineCapStyle = kCGLineCapRound;

        bezierPath.lineJoinStyle = kCGLineJoinRound;

        [color setFill];
        [bezierPath fill];
        [color setStroke];
        bezierPath.lineWidth = 0;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.77533 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.26693 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.86663 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.49132 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.83166 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.32439 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.86663 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40378 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.77540 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.71567 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.86663 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.57897 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.83166 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.65836 * CGRectGetHeight(group3))];
        bezier2Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.84444 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.78592 * CGRectGetHeight(group3))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.96438 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.49135 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.91849 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.71056 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.96438 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.60632 * CGRectGetHeight(group3))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.84444 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.19673 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.96438 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.37626 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.91849 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.27205 * CGRectGetHeight(group3))];
        bezier3Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier3Path.lineWidth = 1;
        [bezier3Path stroke];


        //// Bezier 4 Drawing
        UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
        [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.22460 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.71567 * CGRectGetHeight(group3))];
        [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.13322 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.49132 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.16819 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.65836 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.13322 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.57897 * CGRectGetHeight(group3))];
        [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.22460 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.26689 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.13322 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.40378 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.16819 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.32436 * CGRectGetHeight(group3))];
        bezier4Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier4Path.lineWidth = 1;
        [bezier4Path stroke];


        //// Bezier 5 Drawing
        UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
        [bezier5Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.15549 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.19672 * CGRectGetHeight(group3))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.03562 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.49133 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.08136 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.27203 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.03562 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.37628 * CGRectGetHeight(group3))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.15541 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.78598 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.03562 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.60634 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.08136 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.71054 * CGRectGetHeight(group3))];
        bezier5Path.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezier5Path.lineWidth = 1;
        [bezier5Path stroke];


        //// Rectangle Drawing
    }
}

+ (void)drawHideIconWithColor: (UIColor*)color
{

    //// Rectangle Drawing


    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
    [bezier2Path moveToPoint: CGPointMake(5, 3)];
    [bezier2Path addLineToPoint: CGPointMake(17, 7.5)];
    [bezier2Path addLineToPoint: CGPointMake(29, 3)];
    bezier2Path.lineCapStyle = kCGLineCapRound;

    [color setStroke];
    bezier2Path.lineWidth = 5;
    [bezier2Path stroke];
}

+ (void)drawShowIconWithColor: (UIColor*)color
{

    //// Rectangle Drawing


    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
    [bezier2Path moveToPoint: CGPointMake(5, 8)];
    [bezier2Path addLineToPoint: CGPointMake(17, 3.5)];
    [bezier2Path addLineToPoint: CGPointMake(29, 8)];
    bezier2Path.lineCapStyle = kCGLineCapRound;

    [color setStroke];
    bezier2Path.lineWidth = 5;
    [bezier2Path stroke];
}

+ (void)drawAddCircleIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group = CGRectMake(CGRectGetMinX(frame) + 7.56, CGRectGetMinY(frame) + 7.56, CGRectGetWidth(frame) - 15.12, CGRectGetHeight(frame) - 15.12);


    //// Group
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPath];
        [ovalPath moveToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group))];
        [ovalPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.50000 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77614 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.77614 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
        [ovalPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.22386 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + -0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77614 * CGRectGetHeight(group))];
        [ovalPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.50000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22386 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.22386 * CGRectGetWidth(group), CGRectGetMinY(group) + -0.00000 * CGRectGetHeight(group))];
        [ovalPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.77614 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22386 * CGRectGetHeight(group))];
        [ovalPath closePath];
        [color setStroke];
        ovalPath.lineWidth = 1;
        [ovalPath stroke];


        //// Bezier 4 Drawing
        UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
        [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.22098 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50001 * CGRectGetHeight(group))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.77902 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50001 * CGRectGetHeight(group))];
        bezier4Path.lineCapStyle = kCGLineCapRound;

        bezier4Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier4Path.lineWidth = 1;
        [bezier4Path stroke];


        //// Bezier 6 Drawing
        UIBezierPath* bezier6Path = [UIBezierPath bezierPath];
        [bezier6Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.49999 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77902 * CGRectGetHeight(group))];
        [bezier6Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.49999 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22098 * CGRectGetHeight(group))];
        bezier6Path.lineCapStyle = kCGLineCapRound;

        bezier6Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier6Path.lineWidth = 1;
        [bezier6Path stroke];
    }
}

+ (void)drawOptionsIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group = CGRectMake(CGRectGetMinX(frame) + floor((CGRectGetWidth(frame) - 25) * 0.50000) + 0.5, CGRectGetMinY(frame) + floor((CGRectGetHeight(frame) - 4.44) * 0.50000 - 0.28) + 0.78, 25, 4.44);


    //// Group
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group) + 4.25, CGRectGetMinY(group) + 2.22)];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 2.12, CGRectGetMinY(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 4.25, CGRectGetMinY(group) + 0.99) controlPoint2: CGPointMake(CGRectGetMinX(group) + 3.3, CGRectGetMinY(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group), CGRectGetMinY(group) + 2.22) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.95, CGRectGetMinY(group)) controlPoint2: CGPointMake(CGRectGetMinX(group), CGRectGetMinY(group) + 0.99)];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 2.12, CGRectGetMinY(group) + 4.44) controlPoint1: CGPointMake(CGRectGetMinX(group), CGRectGetMinY(group) + 3.44) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.95, CGRectGetMinY(group) + 4.44)];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 4.25, CGRectGetMinY(group) + 2.22) controlPoint1: CGPointMake(CGRectGetMinX(group) + 3.3, CGRectGetMinY(group) + 4.44) controlPoint2: CGPointMake(CGRectGetMinX(group) + 4.25, CGRectGetMinY(group) + 3.44)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group) + 14.62, CGRectGetMinY(group) + 2.22)];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 12.5, CGRectGetMinY(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 14.62, CGRectGetMinY(group) + 0.99) controlPoint2: CGPointMake(CGRectGetMinX(group) + 13.67, CGRectGetMinY(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 10.38, CGRectGetMinY(group) + 2.22) controlPoint1: CGPointMake(CGRectGetMinX(group) + 11.33, CGRectGetMinY(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 10.38, CGRectGetMinY(group) + 0.99)];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 12.5, CGRectGetMinY(group) + 4.44) controlPoint1: CGPointMake(CGRectGetMinX(group) + 10.38, CGRectGetMinY(group) + 3.44) controlPoint2: CGPointMake(CGRectGetMinX(group) + 11.33, CGRectGetMinY(group) + 4.44)];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 14.62, CGRectGetMinY(group) + 2.22) controlPoint1: CGPointMake(CGRectGetMinX(group) + 13.67, CGRectGetMinY(group) + 4.44) controlPoint2: CGPointMake(CGRectGetMinX(group) + 14.62, CGRectGetMinY(group) + 3.44)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group) + 25, CGRectGetMinY(group) + 2.22)];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 22.88, CGRectGetMinY(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 25, CGRectGetMinY(group) + 0.99) controlPoint2: CGPointMake(CGRectGetMinX(group) + 24.05, CGRectGetMinY(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 20.75, CGRectGetMinY(group) + 2.22) controlPoint1: CGPointMake(CGRectGetMinX(group) + 21.7, CGRectGetMinY(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 20.75, CGRectGetMinY(group) + 0.99)];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 22.88, CGRectGetMinY(group) + 4.44) controlPoint1: CGPointMake(CGRectGetMinX(group) + 20.75, CGRectGetMinY(group) + 3.44) controlPoint2: CGPointMake(CGRectGetMinX(group) + 21.7, CGRectGetMinY(group) + 4.44)];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 25, CGRectGetMinY(group) + 2.22) controlPoint1: CGPointMake(CGRectGetMinX(group) + 24.05, CGRectGetMinY(group) + 4.44) controlPoint2: CGPointMake(CGRectGetMinX(group) + 25, CGRectGetMinY(group) + 3.44)];
        [bezierPath closePath];
        [color setFill];
        [bezierPath fill];
    }
}

+ (void)drawTwitterIconWithFrame: (CGRect)frame color: (UIColor*)color
{

    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.91250 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.25050 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.81974 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.27582 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.88354 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.26325 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.85241 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.27193 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.89077 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.18680 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.85310 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.25587 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.87868 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22438 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.78813 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22586 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.85953 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.20522 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.82497 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.21864 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.67021 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.17500 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.75872 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.19458 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.71669 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.17500 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.50864 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.33597 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.58100 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.17500 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.50864 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.24708 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.51284 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.37262 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.50864 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.34854 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.51010 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.36084 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.17986 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.20451 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.37856 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.36595 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.25955 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.30183 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.15797 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.28537 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.16594 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22822 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.15797 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.25587 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.22988 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.41935 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.15797 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.34124 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.18650 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.39045 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.15666 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.39919 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.20336 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.41850 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.17845 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.41125 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.15666 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.40123 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.28627 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.55905 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.15666 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.47921 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.21234 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.54428 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.24366 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.56471 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.27267 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.56272 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.25846 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.56471 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.21333 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.56182 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.23330 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.56471 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.22318 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.56368 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.36419 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.67357 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.23386 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.62573 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.29352 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.67228 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.16357 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.74248 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.30893 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.71673 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.23925 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.74248 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.12500 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.74021 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.15053 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.74248 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.13767 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.74169 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.37266 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.81250 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.19651 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.78585 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.28144 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.81250 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.83238 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.35463 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.66983 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.81250 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.83238 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.56730 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.83188 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.33380 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.83238 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.34761 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.83220 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.34071 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.91250 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.25050 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.86346 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.31109 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.89088 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.28275 * CGRectGetHeight(frame))];
    [bezierPath closePath];
    [color setFill];
    [bezierPath fill];
}

+ (void)drawFacebookIconWithFrame: (CGRect)frame color: (UIColor*)color
{

    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.81269 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.15020 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.21202 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.15020 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.17471 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.18809 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.19141 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.15020 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.17471 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.16717 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.17471 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.79958 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.21202 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.83750 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.17471 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.82051 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.19141 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.83750 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.53540 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.83750 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.53540 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.57133 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.44741 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.57133 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.44741 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.46760 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.53540 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.46760 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.53540 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.39110 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.66649 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.25399 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.53540 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.30234 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.58868 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.25399 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.74511 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.25808 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.70372 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.25399 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.73579 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.25680 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.74511 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.35083 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.69113 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.35086 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.64067 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.40135 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.64880 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.35086 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.64067 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.37132 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.64067 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.46760 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.74156 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.46760 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.72838 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.57133 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.64067 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.57133 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.64067 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.83750 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.81269 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.83750 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.85000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.79958 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.83333 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.83750 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.85000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.82051 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.85000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.18809 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.81269 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.15020 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.85000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.16717 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.83333 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.15020 * CGRectGetHeight(frame))];
    [bezierPath closePath];
    [color setFill];
    [bezierPath fill];
}

+ (void)drawNowPlayingIconWithFrame: (CGRect)frame color: (UIColor*)color
{

    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.55076 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.31453 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.46057 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50026 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.50063 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.31472 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.46021 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.39782 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.55189 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.68559 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.46079 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.60270 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.50164 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.68563 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.66670 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.49344 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.60192 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.68537 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.66691 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.59595 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.55076 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.31453 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.66641 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.39096 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.60087 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.31439 * CGRectGetHeight(frame))];
    [bezierPath closePath];
    [color setFill];
    [bezierPath fill];


    //// Bezier 4 Drawing
    UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
    [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.64074 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.08668 * CGRectGetHeight(frame))];
    [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.43046 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.49993 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.52677 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.08668 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.43046 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.27590 * CGRectGetHeight(frame))];
    [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.44267 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.63606 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.43046 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.54736 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.43478 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.59322 * CGRectGetHeight(frame))];
    [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.64074 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.91315 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.47203 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.79557 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.55090 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.91315 * CGRectGetHeight(frame))];
    [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.85094 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.49993 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.75467 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.91315 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.85094 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.72393 * CGRectGetHeight(frame))];
    [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.64074 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.08668 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.85094 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.27590 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.75467 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.08668 * CGRectGetHeight(frame))];
    [bezier4Path closePath];
    [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.88735 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.49993 * CGRectGetHeight(frame))];
    [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.64074 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.94984 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.88735 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.75222 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.77903 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.94984 * CGRectGetHeight(frame))];
    [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.51461 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.88794 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.59424 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.94984 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.55135 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.92713 * CGRectGetHeight(frame))];
    [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.33630 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.72023 * CGRectGetHeight(frame))];
    [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.26497 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.72030 * CGRectGetHeight(frame))];
    [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.11248 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50045 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.18115 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.72045 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.11288 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.62211 * CGRectGetHeight(frame))];
    [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.26370 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.27993 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.11219 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.37889 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.17992 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.28012 * CGRectGetHeight(frame))];
    [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.33747 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.27979 * CGRectGetHeight(frame))];
    [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.50638 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.12092 * CGRectGetHeight(frame))];
    [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.64074 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.04999 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.54483 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.07608 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.59078 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.04999 * CGRectGetHeight(frame))];
    [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.88735 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.49993 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.77903 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.04999 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.88735 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.24765 * CGRectGetHeight(frame))];
    [bezier4Path closePath];
    [color setFill];
    [bezier4Path fill];
}

+ (void)drawAddIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group = CGRectMake(CGRectGetMinX(frame) + 6.5, CGRectGetMinY(frame) + 6.5, CGRectGetWidth(frame) - 13, CGRectGetHeight(frame) - 13);


    //// Group
    {
        //// Bezier 4 Drawing
        UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
        [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50003 * CGRectGetHeight(group))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50003 * CGRectGetHeight(group))];
        bezier4Path.lineCapStyle = kCGLineCapRound;

        bezier4Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier4Path.lineWidth = 1.2;
        [bezier4Path stroke];


        //// Bezier 6 Drawing
        UIBezierPath* bezier6Path = [UIBezierPath bezierPath];
        [bezier6Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.49997 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
        [bezier6Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.49997 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
        bezier6Path.lineCapStyle = kCGLineCapRound;

        bezier6Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier6Path.lineWidth = 1.2;
        [bezier6Path stroke];
    }
}

+ (void)drawExitIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group2 = CGRectMake(CGRectGetMinX(frame) + 1, CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.25099 + 0.46) + 0.04, floor((CGRectGetWidth(frame) - 1) * 0.59469 + 1.31) - 0.81, floor(CGRectGetHeight(frame) * 0.74901 - 0.46) - floor(CGRectGetHeight(frame) * 0.25099 + 0.46) + 0.92);


    //// Group 2
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group2) + 0.62864 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.36355 * CGRectGetHeight(group2))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 0.62864 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.00000 * CGRectGetHeight(group2))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 0.00000 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.00000 * CGRectGetHeight(group2))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 0.00000 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 1.00000 * CGRectGetHeight(group2))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 0.62864 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 1.00000 * CGRectGetHeight(group2))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 0.62864 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.63645 * CGRectGetHeight(group2))];
        bezierPath.lineCapStyle = kCGLineCapRound;

        bezierPath.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group2) + 0.80147 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.73421 * CGRectGetHeight(group2))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 1.00000 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.49994 * CGRectGetHeight(group2))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 0.80185 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.26630 * CGRectGetHeight(group2))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 0.80147 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.26579 * CGRectGetHeight(group2))];
        bezier2Path.lineCapStyle = kCGLineCapRound;

        bezier2Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(group2) + 1.00000 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.49994 * CGRectGetHeight(group2))];
        [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(group2) + 0.29380 * CGRectGetWidth(group2), CGRectGetMinY(group2) + 0.49994 * CGRectGetHeight(group2))];
        bezier3Path.lineCapStyle = kCGLineCapRound;

        bezier3Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier3Path.lineWidth = 1;
        [bezier3Path stroke];
    }
}

+ (void)drawProfileIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group = CGRectMake(CGRectGetMinX(frame) + 5.97, CGRectGetMinY(frame) + 1.98, CGRectGetWidth(frame) - 11.97, CGRectGetHeight(frame) - 3.16);


    //// Group
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPath];
        [ovalPath moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.85070 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.46286 * CGRectGetHeight(group))];
        [ovalPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.50289 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.76538 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.85012 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.63032 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.69440 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.76576 * CGRectGetHeight(group))];
        [ovalPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.15717 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.46148 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.31137 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.76500 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.15659 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.62894 * CGRectGetHeight(group))];
        [ovalPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.50497 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.15895 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.15774 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.29402 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.31346 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.15857 * CGRectGetHeight(group))];
        [ovalPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.85070 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.46286 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.69649 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.15934 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.85127 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.29540 * CGRectGetHeight(group))];
        [ovalPath closePath];
        [color setFill];
        [ovalPath fill];


        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.91685 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.91462 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.50171 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.81181 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.82596 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.85023 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.67077 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.81181 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.08047 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.91925 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.32797 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.81181 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.17047 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.85202 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.06498 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.93086 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.08489 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.93780 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.49236 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.20299 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.97850 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.34389 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.91307 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.93333 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.64534 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.79476 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.97626 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.93298 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.92607 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.91685 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.91462 * CGRectGetHeight(group))];
        [bezierPath closePath];
        [color setFill];
        [bezierPath fill];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.02507 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.36035 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.49958 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.02507 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.16134 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.23753 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.97408 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.36035 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.76168 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.97408 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.16134 * CGRectGetHeight(group))];
        [color setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.07366 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.34235 * CGRectGetHeight(group))];
        [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.34235 * CGRectGetHeight(group))];
        [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55803 * CGRectGetHeight(group))];
        [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.07366 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55803 * CGRectGetHeight(group))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.15272 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.49799 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.11731 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55803 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.15272 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.53114 * CGRectGetHeight(group))];
        [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.15272 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.40239 * CGRectGetHeight(group))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.07366 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.34235 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.15272 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.36924 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.11731 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.34235 * CGRectGetHeight(group))];
        [bezier3Path closePath];
        [color setFill];
        [bezier3Path fill];


        //// Bezier 4 Drawing
        UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
        [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.92634 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.34235 * CGRectGetHeight(group))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.34235 * CGRectGetHeight(group))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55803 * CGRectGetHeight(group))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.92634 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55803 * CGRectGetHeight(group))];
        [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.84728 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.49799 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.88269 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55803 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.84728 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.53114 * CGRectGetHeight(group))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.84728 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.40239 * CGRectGetHeight(group))];
        [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.92634 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.34235 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.84728 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.36924 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.88269 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.34235 * CGRectGetHeight(group))];
        [bezier4Path closePath];
        [color setFill];
        [bezier4Path fill];
    }
}

+ (void)drawFeedIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group = CGRectMake(CGRectGetMinX(frame) + 3.36, CGRectGetMinY(frame) + 5.02, CGRectGetWidth(frame) - 6.61, CGRectGetHeight(frame) - 11.61);


    //// Group
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(group) + floor(CGRectGetWidth(group) * 0.00000 + 0.5), CGRectGetMinY(group) + floor(CGRectGetHeight(group) * -0.00000 + 0.31) + 0.19, floor(CGRectGetWidth(group) * 0.21565 + 0.3) - floor(CGRectGetWidth(group) * 0.00000 + 0.5) + 0.2, floor(CGRectGetHeight(group) * 0.25360 + 0.11) - floor(CGRectGetHeight(group) * -0.00000 + 0.31) + 0.2)];
        [color setFill];
        [ovalPath fill];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.35937 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.12420 * CGRectGetHeight(group))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.12420 * CGRectGetHeight(group))];
        bezier2Path.miterLimit = 4;

        bezier2Path.lineCapStyle = kCGLineCapRound;

        bezier2Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.35937 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.48786 * CGRectGetHeight(group))];
        [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.48786 * CGRectGetHeight(group))];
        bezier3Path.miterLimit = 4;

        bezier3Path.lineCapStyle = kCGLineCapRound;

        bezier3Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier3Path.lineWidth = 1;
        [bezier3Path stroke];


        //// Bezier 4 Drawing
        UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
        [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.35937 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.87322 * CGRectGetHeight(group))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.87322 * CGRectGetHeight(group))];
        bezier4Path.miterLimit = 4;

        bezier4Path.lineCapStyle = kCGLineCapRound;

        bezier4Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier4Path.lineWidth = 1;
        [bezier4Path stroke];


        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(group) + floor(CGRectGetWidth(group) * 0.00000 + 0.5), CGRectGetMinY(group) + floor(CGRectGetHeight(group) * 0.38211 + 0.16) + 0.34, floor(CGRectGetWidth(group) * 0.21565 + 0.3) - floor(CGRectGetWidth(group) * 0.00000 + 0.5) + 0.2, floor(CGRectGetHeight(group) * 0.63571 - 0.04) - floor(CGRectGetHeight(group) * 0.38211 + 0.16) + 0.2)];
        [color setFill];
        [oval2Path fill];


        //// Oval 3 Drawing
        UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(group) + floor(CGRectGetWidth(group) * 0.00000 + 0.5), CGRectGetMinY(group) + floor(CGRectGetHeight(group) * 0.74640 + 0.5), floor(CGRectGetWidth(group) * 0.21565 + 0.3) - floor(CGRectGetWidth(group) * 0.00000 + 0.5) + 0.2, floor(CGRectGetHeight(group) * 1.00000 + 0.3) - floor(CGRectGetHeight(group) * 0.74640 + 0.5) + 0.2)];
        [color setFill];
        [oval3Path fill];
    }
}

+ (void)drawPauseIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group = CGRectMake(CGRectGetMinX(frame) + 14.52, CGRectGetMinY(frame) + 8.77, CGRectGetWidth(frame) - 29.05, CGRectGetHeight(frame) - 17.55);


    //// Group
    {
        //// Rectangle Drawing
        UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(CGRectGetMinX(group) + floor(CGRectGetWidth(group) * 0.00000 + 0.5), CGRectGetMinY(group) + floor(CGRectGetHeight(group) * 0.00000 + 0.5), floor(CGRectGetWidth(group) * 0.18265 + 0.5) - floor(CGRectGetWidth(group) * 0.00000 + 0.5), floor(CGRectGetHeight(group) * 1.00000 + 0.05) - floor(CGRectGetHeight(group) * 0.00000 + 0.5) + 0.45)];
        [color setFill];
        [rectanglePath fill];


        //// Rectangle 2 Drawing
        UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(CGRectGetMinX(group) + floor(CGRectGetWidth(group) * 0.81735 - 0.45) + 0.95, CGRectGetMinY(group) + floor(CGRectGetHeight(group) * 0.00000 + 0.5), floor(CGRectGetWidth(group) * 1.00000 - 0.45) - floor(CGRectGetWidth(group) * 0.81735 - 0.45), floor(CGRectGetHeight(group) * 1.00000 + 0.05) - floor(CGRectGetHeight(group) * 0.00000 + 0.5) + 0.45)];
        [color setFill];
        [rectangle2Path fill];
    }
}

+ (void)drawProfileSearchIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group = CGRectMake(CGRectGetMinX(frame) + 8.34, CGRectGetMinY(frame) + 4.89, CGRectGetWidth(frame) - 8.34, CGRectGetHeight(frame) - 10.79);


    //// Group
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.98665 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77665 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.77318 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.53987 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.83544 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.33645 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.81208 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.48329 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.83544 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.41293 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.53234 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.83544 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.15094 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.69949 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.24847 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.21950 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.40231 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.29138 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.09156 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.27982 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.21653 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.25877 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.21774 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.26919 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.21653 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.29292 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.21738 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.28424 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.21653 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.28854 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.21707 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.53234 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.04502 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.33401 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.11592 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.42579 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.04502 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.79488 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.33645 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.67710 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.04502 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.79488 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.17574 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.53234 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.62788 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.79488 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.49715 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.67710 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.62788 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.50529 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.62635 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.52317 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.62788 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.51417 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.62738 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.49093 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.66938 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.50127 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.64120 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.49657 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.65565 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.53234 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.67289 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.50448 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.67145 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.51827 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.67289 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.70727 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.61073 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.59752 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.67289 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.65783 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.64976 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.92167 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.84859 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.95412 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.86358 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.93071 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.85854 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.94244 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.86358 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.98665 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.84859 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.96588 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.86358 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.97760 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.85854 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.98665 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77665 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 1.00445 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.82878 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 1.00445 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.79646 * CGRectGetHeight(group))];
        [bezierPath closePath];
        [color setFill];
        [bezierPath fill];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.54556 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.92014 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.27962 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.82385 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.48728 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.85982 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.38791 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.82385 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.00994 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.92446 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.16836 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.82385 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.06753 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.86153 * CGRectGetHeight(group))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.93531 * CGRectGetHeight(group))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.01274 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.94184 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.27369 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.08842 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.97983 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.17858 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.54305 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.93761 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.37169 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.46728 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.97776 * CGRectGetHeight(group))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.55587 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.93081 * CGRectGetHeight(group))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.54556 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.92014 * CGRectGetHeight(group))];
        [bezier2Path closePath];
        [color setFill];
        [bezier2Path fill];


        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPath];
        [ovalPath moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.47859 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.52566 * CGRectGetHeight(group))];
        [ovalPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.27923 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.78842 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.47825 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.67110 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.38899 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.78874 * CGRectGetHeight(group))];
        [ovalPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.08111 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.52450 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.16947 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.78810 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.08077 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.66994 * CGRectGetHeight(group))];
        [ovalPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.28047 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.26174 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.08145 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.37906 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.17071 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.26142 * CGRectGetHeight(group))];
        [ovalPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.47859 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.52566 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.39023 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.26206 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.47893 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.38022 * CGRectGetHeight(group))];
        [ovalPath closePath];
        [color setFill];
        [ovalPath fill];
    }
}

+ (void)drawClipIconRandomWithFrame: (CGRect)frame
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* strokeColor = [UIColor colorWithRed: 0.341 green: 0.353 blue: 0.843 alpha: 1];

    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 25.67, CGRectGetMinY(frame) + 6.12)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 25.67, CGRectGetMinY(frame) + 34.12)];
    bezierPath.lineCapStyle = kCGLineCapRound;

    [strokeColor setStroke];
    bezierPath.lineWidth = 1;
    [bezierPath stroke];


    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
    [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 28.47, CGRectGetMinY(frame) + 6.12)];
    [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 28.47, CGRectGetMinY(frame) + 34.12)];
    bezier2Path.lineCapStyle = kCGLineCapRound;

    [strokeColor setStroke];
    bezier2Path.lineWidth = 1;
    [bezier2Path stroke];


    //// Bezier 3 Drawing
    UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
    [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 31.27, CGRectGetMinY(frame) + 6.12)];
    [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 31.27, CGRectGetMinY(frame) + 34.12)];
    bezier3Path.lineCapStyle = kCGLineCapRound;

    [strokeColor setStroke];
    bezier3Path.lineWidth = 1;
    [bezier3Path stroke];


    //// Bezier 4 Drawing
    UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
    [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 34.07, CGRectGetMinY(frame) + 6.12)];
    [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 34.07, CGRectGetMinY(frame) + 34.12)];
    bezier4Path.lineCapStyle = kCGLineCapRound;

    [strokeColor setStroke];
    bezier4Path.lineWidth = 1;
    [bezier4Path stroke];


    //// Bezier 5 Drawing
    UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
    [bezier5Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 14.47, CGRectGetMinY(frame) + 6.12)];
    [bezier5Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 14.47, CGRectGetMinY(frame) + 34.12)];
    bezier5Path.lineCapStyle = kCGLineCapRound;

    [strokeColor setStroke];
    bezier5Path.lineWidth = 1;
    [bezier5Path stroke];


    //// Bezier 6 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, CGRectGetMinX(frame) + 17.27, CGRectGetMinY(frame) + 20.12);

    UIBezierPath* bezier6Path = [UIBezierPath bezierPath];
    [bezier6Path moveToPoint: CGPointMake(-0, -14)];
    [bezier6Path addLineToPoint: CGPointMake(-0, 14)];
    bezier6Path.lineCapStyle = kCGLineCapRound;

    [strokeColor setStroke];
    bezier6Path.lineWidth = 1;
    [bezier6Path stroke];

    CGContextRestoreGState(context);


    //// Bezier 7 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, CGRectGetMinX(frame) + 20.07, CGRectGetMinY(frame) + 20.12);

    UIBezierPath* bezier7Path = [UIBezierPath bezierPath];
    [bezier7Path moveToPoint: CGPointMake(-0, -14)];
    [bezier7Path addLineToPoint: CGPointMake(-0, 14)];
    bezier7Path.lineCapStyle = kCGLineCapRound;

    [strokeColor setStroke];
    bezier7Path.lineWidth = 1;
    [bezier7Path stroke];

    CGContextRestoreGState(context);


    //// Bezier 8 Drawing
    UIBezierPath* bezier8Path = [UIBezierPath bezierPath];
    [bezier8Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 22.87, CGRectGetMinY(frame) + 6.12)];
    [bezier8Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 22.87, CGRectGetMinY(frame) + 34.12)];
    bezier8Path.lineCapStyle = kCGLineCapRound;

    [strokeColor setStroke];
    bezier8Path.lineWidth = 1;
    [bezier8Path stroke];


    //// Bezier 9 Drawing
    UIBezierPath* bezier9Path = [UIBezierPath bezierPath];
    [bezier9Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 6.07, CGRectGetMinY(frame) + 6.12)];
    [bezier9Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 6.07, CGRectGetMinY(frame) + 34.12)];
    bezier9Path.lineCapStyle = kCGLineCapRound;

    [strokeColor setStroke];
    bezier9Path.lineWidth = 1;
    [bezier9Path stroke];


    //// Bezier 10 Drawing
    UIBezierPath* bezier10Path = [UIBezierPath bezierPath];
    [bezier10Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 8.87, CGRectGetMinY(frame) + 6.12)];
    [bezier10Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 8.87, CGRectGetMinY(frame) + 34.12)];
    bezier10Path.lineCapStyle = kCGLineCapRound;

    [strokeColor setStroke];
    bezier10Path.lineWidth = 1;
    [bezier10Path stroke];


    //// Bezier 11 Drawing
    UIBezierPath* bezier11Path = [UIBezierPath bezierPath];
    [bezier11Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 11.67, CGRectGetMinY(frame) + 6.12)];
    [bezier11Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 11.67, CGRectGetMinY(frame) + 34.12)];
    bezier11Path.lineCapStyle = kCGLineCapRound;

    [strokeColor setStroke];
    bezier11Path.lineWidth = 1;
    [bezier11Path stroke];
}

+ (void)drawSkipBack15IconWithFrame: (CGRect)frame color: (UIColor*)color
{
    //// Color Declarations
    UIColor* fillColor = [UIColor colorWithRed: 0.341 green: 0.353 blue: 0.843 alpha: 1];


    //// Subframes
    CGRect group = CGRectMake(CGRectGetMinX(frame) + 2, CGRectGetMinY(frame) + 2, CGRectGetWidth(frame) - 4, CGRectGetHeight(frame) - 4);


    //// Group
    {
        //// Rectangle Drawing


        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.43686 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.21134 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.33013 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.12646 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.43669 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.04176 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.43686 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.04162 * CGRectGetHeight(group))];
        bezierPath.lineCapStyle = kCGLineCapRound;

        bezierPath.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.31153 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.21134 * CGRectGetHeight(group))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.20480 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.12646 * CGRectGetHeight(group))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.31135 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.04176 * CGRectGetHeight(group))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.31153 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.04162 * CGRectGetHeight(group))];
        bezier2Path.lineCapStyle = kCGLineCapRound;

        bezier2Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.09636 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.57981 * CGRectGetHeight(group))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.49933 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.95837 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.11424 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.79201 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.28788 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.95837 * CGRectGetHeight(group))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.90364 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.54365 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.72267 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.95837 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.90364 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77276 * CGRectGetHeight(group))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.49933 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.12902 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.90364 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.31464 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.72267 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.12902 * CGRectGetHeight(group))];
        [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.44592 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.12902 * CGRectGetHeight(group))];
        bezier3Path.lineCapStyle = kCGLineCapRound;

        bezier3Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier3Path.lineWidth = 1;
        [bezier3Path stroke];


        //// Bezier 4 Drawing
        UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
        [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.32168 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.71485 * CGRectGetHeight(group))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.32168 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.43639 * CGRectGetHeight(group))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.31907 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.43639 * CGRectGetHeight(group))];
        [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.24444 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.48824 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.31043 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.44151 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.25570 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.47979 * CGRectGetHeight(group))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.24444 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.42036 * CGRectGetHeight(group))];
        [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.32311 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.36648 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.25665 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.41089 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.31043 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.37363 * CGRectGetHeight(group))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.39009 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.36648 * CGRectGetHeight(group))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.39009 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.71485 * CGRectGetHeight(group))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.32168 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.71485 * CGRectGetHeight(group))];
        [bezier4Path closePath];
        [fillColor setFill];
        [bezier4Path fill];


        //// Bezier 5 Drawing
        UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
        [bezier5Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.51652 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.61990 * CGRectGetHeight(group))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.57366 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.66354 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.52032 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.64671 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.54259 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.66354 * CGRectGetHeight(group))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.63180 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.59972 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.60287 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.66354 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.63180 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.63982 * CGRectGetHeight(group))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.57390 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.53645 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.63180 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.56170 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.60668 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.53645 * CGRectGetHeight(group))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.51818 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.57143 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.54283 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.53645 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.52512 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55561 * CGRectGetHeight(group))];
        [bezier5Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.45719 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.57143 * CGRectGetHeight(group))];
        [bezier5Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.47229 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.36626 * CGRectGetHeight(group))];
        [bezier5Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.67555 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.36626 * CGRectGetHeight(group))];
        [bezier5Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.67555 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.42518 * CGRectGetHeight(group))];
        [bezier5Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.52726 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.42518 * CGRectGetHeight(group))];
        [bezier5Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.51937 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.51120 * CGRectGetHeight(group))];
        [bezier5Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.52202 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.51120 * CGRectGetHeight(group))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.59185 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.48134 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.52944 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.49970 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.55333 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.48134 * CGRectGetHeight(group))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.69945 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.59646 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.64876 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.48134 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.69945 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.52499 * CGRectGetHeight(group))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.57200 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.72148 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.69945 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.67301 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.64591 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.72148 * CGRectGetHeight(group))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.45291 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.61990 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.49666 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.72148 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.45481 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.67504 * CGRectGetHeight(group))];
        [bezier5Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.51652 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.61990 * CGRectGetHeight(group))];
        [bezier5Path closePath];
        [fillColor setFill];
        [bezier5Path fill];
    }
}

+ (void)drawSkipAhead15IconWithFrame: (CGRect)frame color: (UIColor*)color
{
    //// Color Declarations
    UIColor* fillColor = [UIColor colorWithRed: 0.341 green: 0.353 blue: 0.843 alpha: 1];


    //// Subframes
    CGRect group = CGRectMake(CGRectGetMinX(frame) + 2, CGRectGetMinY(frame) + 2, CGRectGetWidth(frame) - 4, CGRectGetHeight(frame) - 4);


    //// Group
    {
        //// Rectangle Drawing


        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.56314 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.21134 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.66987 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.12646 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.56331 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.04176 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.56314 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.04162 * CGRectGetHeight(group))];
        bezierPath.lineCapStyle = kCGLineCapRound;

        bezierPath.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.68847 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.21134 * CGRectGetHeight(group))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.79520 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.12646 * CGRectGetHeight(group))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.68865 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.04176 * CGRectGetHeight(group))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.68847 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.04162 * CGRectGetHeight(group))];
        bezier2Path.lineCapStyle = kCGLineCapRound;

        bezier2Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.90364 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.57981 * CGRectGetHeight(group))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.50067 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.95837 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.88576 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.79201 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.71212 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.95837 * CGRectGetHeight(group))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.09636 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.54365 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.27733 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.95837 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.09636 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77276 * CGRectGetHeight(group))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.50067 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.12902 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.09636 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.31464 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.27733 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.12902 * CGRectGetHeight(group))];
        [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.55408 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.12902 * CGRectGetHeight(group))];
        bezier3Path.lineCapStyle = kCGLineCapRound;

        bezier3Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier3Path.lineWidth = 1;
        [bezier3Path stroke];


        //// Bezier 4 Drawing
        UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
        [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.34946 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.71485 * CGRectGetHeight(group))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.34946 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.43639 * CGRectGetHeight(group))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.34684 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.43639 * CGRectGetHeight(group))];
        [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.27222 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.48824 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.33821 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.44151 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.28348 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.47979 * CGRectGetHeight(group))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.27222 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.42036 * CGRectGetHeight(group))];
        [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.35089 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.36648 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.28443 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.41089 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.33821 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.37363 * CGRectGetHeight(group))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.41786 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.36648 * CGRectGetHeight(group))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.41786 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.71485 * CGRectGetHeight(group))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.34946 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.71485 * CGRectGetHeight(group))];
        [bezier4Path closePath];
        [fillColor setFill];
        [bezier4Path fill];


        //// Bezier 5 Drawing
        UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
        [bezier5Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.54429 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.61990 * CGRectGetHeight(group))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.60144 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.66354 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.54810 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.64671 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.57037 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.66354 * CGRectGetHeight(group))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.65958 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.59972 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.63065 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.66354 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.65958 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.63982 * CGRectGetHeight(group))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.60168 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.53645 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.65958 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.56170 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.63445 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.53645 * CGRectGetHeight(group))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.54596 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.57143 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.57061 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.53645 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.55290 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55561 * CGRectGetHeight(group))];
        [bezier5Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.48497 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.57143 * CGRectGetHeight(group))];
        [bezier5Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.50006 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.36626 * CGRectGetHeight(group))];
        [bezier5Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.70333 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.36626 * CGRectGetHeight(group))];
        [bezier5Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.70333 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.42518 * CGRectGetHeight(group))];
        [bezier5Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.55504 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.42518 * CGRectGetHeight(group))];
        [bezier5Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.54715 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.51120 * CGRectGetHeight(group))];
        [bezier5Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.54980 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.51120 * CGRectGetHeight(group))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.61963 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.48134 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.55721 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.49970 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.58111 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.48134 * CGRectGetHeight(group))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.72723 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.59646 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.67654 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.48134 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.72723 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.52499 * CGRectGetHeight(group))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.59978 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.72148 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.72723 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.67301 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.67369 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.72148 * CGRectGetHeight(group))];
        [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.48069 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.61990 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.52444 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.72148 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.48259 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.67504 * CGRectGetHeight(group))];
        [bezier5Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.54429 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.61990 * CGRectGetHeight(group))];
        [bezier5Path closePath];
        [fillColor setFill];
        [bezier5Path fill];
    }
}

+ (void)drawSettingsIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group = CGRectMake(CGRectGetMinX(frame) + 12.5, CGRectGetMinY(frame) + 6.76, CGRectGetWidth(frame) - 13.84, CGRectGetHeight(frame) - 12.84);


    //// Group
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.67136 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.33026 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.32830 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.33026 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.57659 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.23555 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.42303 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.23555 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.32830 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.67332 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.23353 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.42502 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.23353 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.57858 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.67136 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.67332 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.42303 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.76806 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.57659 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.76806 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.67136 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.33026 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.76610 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.57858 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.76610 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.42502 * CGRectGetHeight(group))];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.46569 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.53437 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.96334 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.57871 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55642 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.98424 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.57473 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.95684 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.57936 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.96114 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.57886 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.95899 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.57908 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.95482 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.57958 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.95616 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.57939 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.95554 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.57958 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.95470 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.57967 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.87865 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.62814 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.92299 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.58446 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.89581 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.60265 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.85853 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.67746 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.87299 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.64512 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.86631 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.66160 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.87790 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.76454 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.85284 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.70727 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.85919 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.73895 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.87781 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.76541 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.87781 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.82931 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.89544 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.78304 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.89544 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.81165 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.82924 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.87787 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.77194 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.88325 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.81367 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.89345 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.78954 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.89522 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.76691 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.87912 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.77033 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.88182 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.76862 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.88045 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.76535 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.87784 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.76641 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.87868 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.76582 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.87837 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.76520 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.87784 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.68140 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.85744 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.74060 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.85968 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.71032 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.85297 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.62472 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.88114 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.66325 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.86674 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.64434 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.87467 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.58014 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.95423 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.60131 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.89830 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.58480 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.92429 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.57945 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.95482 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.53431 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.57945 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.97979 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.55925 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.46563 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.42129 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.96331 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.44358 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.42527 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.98417 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.42067 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.95681 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.42114 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.96114 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.42092 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.95899 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.42045 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.95482 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.42064 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.95616 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.42045 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.95551 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.42033 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.95470 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.37646 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.88163 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.41582 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.92485 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.39959 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.89889 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.31866 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.85769 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.35643 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.87514 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.33716 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.86711 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.23546 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.87787 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.28999 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.85328 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.25996 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.85996 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.23459 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.87778 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.17069 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.87778 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.21696 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.89544 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.18835 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.89544 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.12213 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.82921 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.11672 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77194 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.10655 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.81367 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.10478 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.78951 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.12088 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.76691 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.11818 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77030 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.11955 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.76862 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.12216 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.76532 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.12135 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.76641 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.12163 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.76582 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.12216 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.76516 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.14215 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.67938 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.14075 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.74001 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.14731 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.70889 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.12085 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.62777 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.13388 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.66281 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.12676 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.64559 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.04574 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.58014 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.10375 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.60280 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.07698 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.58496 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.04518 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.57945 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.53431 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.02024 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.57945 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55921 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.46563 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.03669 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.42129 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.44358 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.01579 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.42527 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.04319 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.42064 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.03886 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.42114 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.04104 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.42092 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.04518 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.42042 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.04384 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.42061 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.04449 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.42042 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.04530 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.42030 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.12315 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.36909 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.07816 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.41535 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.10615 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.39605 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.14044 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.32752 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.12816 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.35485 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.13391 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.34098 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.12213 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.23546 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.14787 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.29624 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.14190 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.26248 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.12222 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.23459 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.12222 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.17069 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.10459 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.21693 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.10459 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.18835 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.17076 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.12213 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.22806 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.11672 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.18633 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.10655 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.21049 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.10478 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.23309 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.12088 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.22970 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.11818 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.23141 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.11955 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.23465 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.12216 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.23362 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.12132 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.23418 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.12163 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.23484 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.12216 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.33091 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.13994 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.26294 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.14290 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.29851 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.14877 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.36402 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.12620 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.34167 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.13488 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.35273 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.13024 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.41986 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.04574 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.39337 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.10966 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.41448 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.08034 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.42055 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.04518 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.46572 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.42055 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.02021 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.44079 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.53440 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.57874 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.03669 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.55645 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.57476 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.01579 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.57936 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.04319 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.57886 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.03886 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.57908 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.04104 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.57958 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.04518 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.57939 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.04384 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.57958 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.04449 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.57970 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.04530 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.63561 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.12617 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.58493 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.08006 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.60610 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.10957 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.66692 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.13910 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.64627 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.13003 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.65669 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.13438 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.76454 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.12213 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.69969 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.14865 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.73591 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.14305 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.76541 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.12222 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.82931 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.12222 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.78307 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.10456 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.81168 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.10456 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.87790 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.17076 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.88328 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22806 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.89348 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.18636 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.89522 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.21046 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.87915 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.23309 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.88185 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22970 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.88048 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.23138 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.87787 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.23465 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.87868 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.23362 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.87837 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.23418 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.87787 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.23484 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.85947 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.32805 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.85769 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.26210 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.85172 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.29640 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.87582 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.36710 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.86559 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.34067 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.87106 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.35373 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.95426 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.41986 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.89261 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.39477 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.92093 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.41470 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.95482 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.42051 * CGRectGetHeight(group))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.46569 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.97979 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.42051 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.44079 * CGRectGetHeight(group))];
        [bezierPath closePath];
        bezierPath.lineCapStyle = kCGLineCapRound;

        [color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];
    }
}

+ (void)drawTinyRecommendIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group3 = CGRectMake(CGRectGetMinX(frame) + 2, CGRectGetMinY(frame) + 2, CGRectGetWidth(frame) - 4, CGRectGetHeight(frame) - 4);


    //// Group 3
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.61189 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.94557 * CGRectGetHeight(group3))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.35115 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.94557 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.17673 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.72514 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.26514 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.94557 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.17673 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.87311 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.17759 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.59522 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.17673 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.70919 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.17673 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.60554 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.39278 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.24051 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.19451 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.39358 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.31484 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.31389 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.51502 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.02117 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.50264 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.13704 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.51423 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.05109 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.62503 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.14938 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.54716 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.02046 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.62593 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.03656 * CGRectGetHeight(group3))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.52082 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.36637 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.62406 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.26742 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.50264 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.31762 * CGRectGetHeight(group3))];
        bezierPath.lineCapStyle = kCGLineCapRound;

        bezierPath.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezierPath.lineWidth = 0.7;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.53033 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.50897 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.47686 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.58885 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.49928 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.51997 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.47686 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.55426 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.53033 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.66861 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.47686 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.62336 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.49928 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.65761 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.47686 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.74363 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.49935 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.67807 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.47686 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.70998 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.53033 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.81866 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.47686 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.77576 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.50158 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.80800 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.47182 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.88184 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.50021 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.82410 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.47182 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.85064 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.53641 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.94557 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.47182 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.91706 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.50068 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.94557 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.70306 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.94557 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.76758 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.88184 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.73872 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.94557 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.76758 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.91706 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.70306 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.81821 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.76758 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.84676 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.73872 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.81821 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.68668 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.81821 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.68668 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.81866 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.74944 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.81866 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.82555 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.74363 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.79136 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.81866 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.82555 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.78508 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.74944 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.66861 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.82555 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.70223 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.79136 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.66861 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.68668 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.66861 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.76657 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.66861 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.84743 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.58885 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.81123 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.66861 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.84743 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.63290 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.76657 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.50909 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.84743 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.54475 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.81123 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.50909 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.68668 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.50909 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.74944 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.50909 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.82555 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.43398 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.79136 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.50909 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.82555 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.47543 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.74944 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.35896 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.82555 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.39261 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.79136 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.35896 * CGRectGetHeight(group3))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group3) + 0.55293 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.35896 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.47686 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.43398 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.51093 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.35896 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.47686 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.39261 * CGRectGetHeight(group3))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group3) + 0.53033 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.50897 * CGRectGetHeight(group3)) controlPoint1: CGPointMake(CGRectGetMinX(group3) + 0.47686 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.46779 * CGRectGetHeight(group3)) controlPoint2: CGPointMake(CGRectGetMinX(group3) + 0.49935 * CGRectGetWidth(group3), CGRectGetMinY(group3) + 0.49954 * CGRectGetHeight(group3))];
        [bezier2Path closePath];
        bezier2Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier2Path.lineWidth = 0.7;
        [bezier2Path stroke];


        //// Rectangle Drawing
    }
}

+ (void)drawFindFriendsIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group = CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame) + 3, CGRectGetWidth(frame) - 4, CGRectGetHeight(frame) - 7);


    //// Group
    {
        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.77726 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.26883 * CGRectGetHeight(group))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.77726 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.68343 * CGRectGetHeight(group))];
        bezier2Path.lineCapStyle = kCGLineCapRound;

        bezier2Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.58342 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.47616 * CGRectGetHeight(group))];
        [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.97103 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.47616 * CGRectGetHeight(group))];
        bezier3Path.lineCapStyle = kCGLineCapRound;

        bezier3Path.lineJoinStyle = kCGLineJoinRound;

        [color setStroke];
        bezier3Path.lineWidth = 1;
        [bezier3Path stroke];


        //// Rectangle Drawing


        //// Bezier 4 Drawing
        UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
        [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.55266 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.79457 * CGRectGetHeight(group))];
        [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.28326 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.70058 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.49363 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.73570 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.39295 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.70058 * CGRectGetHeight(group))];
        [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.01008 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.79880 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.17056 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.70058 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.06843 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.73736 * CGRectGetHeight(group))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.80941 * CGRectGetHeight(group))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.01293 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.81575 * CGRectGetHeight(group))];
        [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.27724 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.87255 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.08956 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.85285 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.18090 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.87255 * CGRectGetHeight(group))];
        [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.55013 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.81163 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.37652 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.87255 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.47337 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.85084 * CGRectGetHeight(group))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.56309 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.80497 * CGRectGetHeight(group))];
        [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.55266 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.79457 * CGRectGetHeight(group))];
        [bezier4Path closePath];
        [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.48460 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.41005 * CGRectGetHeight(group))];
        [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.28321 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.66797 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.48437 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55271 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.39421 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.66819 * CGRectGetHeight(group))];
        [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.08265 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.40928 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.17222 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.66776 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.08243 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55194 * CGRectGetHeight(group))];
        [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.28404 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.15136 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.08288 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.26662 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.17305 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.15115 * CGRectGetHeight(group))];
        [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.48460 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.41005 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.39504 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.15157 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.48483 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.26739 * CGRectGetHeight(group))];
        [bezier4Path closePath];
        [color setFill];
        [bezier4Path fill];
    }
}

+ (void)drawPlayCountIconWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group = CGRectMake(CGRectGetMinX(frame) + 6, CGRectGetMinY(frame) + 6, CGRectGetWidth(frame) - 12, CGRectGetHeight(frame) - 12);


    //// Group
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.21429 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.08929 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.21429 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.92857 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.87500 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50900 * CGRectGetHeight(group))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.21429 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.08929 * CGRectGetHeight(group))];
        [bezierPath closePath];
        [color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];


        //// Rectangle Drawing
    }
}

+ (void)drawTungLogotypeWithFrame: (CGRect)frame color: (UIColor*)color
{


    //// Subframes
    CGRect group = CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame));


    //// Group
    {
        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.73416 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.68180 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.67584 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.70474 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.71181 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.68799 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.69171 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.69589 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.66547 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.79716 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.61307 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.73981 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.59894 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.82185 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.73416 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.68180 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.69544 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.78605 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.71919 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.72938 * CGRectGetHeight(group))];
        [bezier2Path closePath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.77947 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.47041 * CGRectGetHeight(group))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.79076 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.40482 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.79829 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.37549 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.79291 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.39362 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.79562 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.38402 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.78052 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.36802 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.79344 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.37121 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.78700 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.36856 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.72516 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.44270 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.75420 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.36641 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.73484 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.40589 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.72893 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.54029 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.71384 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.48322 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.71172 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.53551 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.77947 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.47041 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.74181 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.54403 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.76226 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.52323 * CGRectGetHeight(group))];
        [bezier2Path closePath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.97798 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.72726 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.80502 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.66916 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.94870 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.67687 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.87572 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.66315 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.67876 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.82083 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.78130 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.73981 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.73764 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.80531 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.59745 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77176 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.63311 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.83289 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.59421 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.81947 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.75115 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.61740 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.60218 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.70203 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.66380 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.64339 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.76711 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.53870 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.75594 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.59465 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.76359 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55818 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.71172 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.57925 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.75526 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.56003 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.73752 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.57764 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.65471 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.45069 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.66706 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.58244 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.64074 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.52483 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.78376 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.34189 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.66924 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.37282 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.72464 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.32426 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.80745 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.35681 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.79291 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.34454 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.80097 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.34988 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.87949 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.35041 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.82680 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.32643 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.85692 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.32802 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.84615 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.45495 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.87949 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.35041 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.85692 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.37282 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.82213 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.59636 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.83922 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50463 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.83134 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55242 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.82095 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.60436 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.82179 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.59901 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.82139 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.60169 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.83473 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.60341 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.82552 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.60397 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.83010 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.60363 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.97798 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.72726 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.99310 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.59591 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 1.02989 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.68008 * CGRectGetHeight(group))];
        [bezier2Path closePath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.41916 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55258 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.42131 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.57764 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.41916 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.57070 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.42131 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.57764 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.48908 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.47628 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.46058 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.59258 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.47670 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.57764 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.55631 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.37603 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.52241 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.39788 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.54663 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.37334 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.55092 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.46563 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.56760 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.38029 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.56813 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.40214 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.56546 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.62937 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.52509 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.56377 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.53533 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.61656 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.65365 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.57443 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.59611 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.64271 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.63320 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.62459 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.64126 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55417 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.65956 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55790 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.65094 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55045 * CGRectGetHeight(group))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.64074 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55471 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.60308 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.59417 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.62944 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.58564 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.61547 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.59844 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.61867 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.45495 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.59020 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.58937 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.59826 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.54029 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.60847 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.32908 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.63644 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.38029 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.63373 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.33761 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.49715 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.41603 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.57457 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.31735 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.53642 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.34507 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.51918 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.34348 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.50736 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.35254 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.51918 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.34348 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.44981 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.33068 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.51918 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.34348 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.48585 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.30721 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.41916 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55258 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.41592 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.35309 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.41863 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.42936 * CGRectGetHeight(group))];
        [bezier2Path closePath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.46811 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.63471 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.33691 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.67204 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.42669 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.69552 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.36701 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.69712 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.30140 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.51736 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.31108 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.65018 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.29655 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.60644 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.22557 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.58350 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.28634 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55045 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.25998 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.58776 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.18203 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.53519 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.20107 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.58057 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.18682 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.56270 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.09866 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.58190 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.15943 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.57091 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.12670 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.59454 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.06318 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.40908 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.06371 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.56696 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.05512 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.48057 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.07824 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.31307 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.06642 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.37603 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.07177 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.34241 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.02715 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.32269 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.05942 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.31468 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.04221 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.31735 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.02070 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.32534 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.02500 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.32322 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.02285 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.32426 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.02338 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.27895 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + -0.00298 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.32056 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + -0.01157 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.29655 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.09060 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.26775 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.03844 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.27201 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.06265 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.26934 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.11210 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.23040 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.09707 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.25121 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.10404 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.23840 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.18579 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22827 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.15299 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.19361 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.18579 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22827 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.16644 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.26720 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.18579 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22827 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.17664 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.24213 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.31323 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.25175 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.22130 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.26775 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.27722 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.26614 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.37833 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.20000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.36701 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22988 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.37833 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.20000 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.35303 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.31149 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.41004 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22028 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.42081 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.28482 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.15029 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.31468 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.30196 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.33121 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.22289 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.31948 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.13040 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.40908 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.14275 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.33974 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.13631 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.36961 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.13255 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55150 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.12178 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.46136 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.11748 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.54563 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.18097 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.49515 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.14711 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55681 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.16697 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.52858 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.18900 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.45069 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.18221 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.48137 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.18492 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.46645 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.20083 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.34775 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.20997 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.36961 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.20083 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.34775 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.25784 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.44270 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.27181 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.32482 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.28043 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.36215 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.25301 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.54670 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.24010 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50616 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.23742 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.54242 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.30517 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.46616 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.26646 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.55045 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.28796 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.52323 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.31376 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.40430 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.30785 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.44748 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.31055 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.42668 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.40681 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.35041 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.32614 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.32643 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.37615 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.31894 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.37292 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.45443 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.40681 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.35041 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.38369 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.39628 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.37454 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.64005 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.35841 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.53230 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.35356 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.61551 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.46005 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.61284 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.39283 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.66085 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.43208 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.65658 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.46111 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.61230 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.46005 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.61284 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.46058 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.61284 * CGRectGetHeight(group))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.46811 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.63471 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.47187 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.61070 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.47832 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.62030 * CGRectGetHeight(group))];
        [bezier2Path closePath];
        [color setFill];
        [bezier2Path fill];


        //// Rectangle Drawing
    }
}

+ (void)drawSubscribeButtonWithFrame: (CGRect)frame color: (UIColor*)color on: (BOOL)on down: (BOOL)down
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.25];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notOn = !on;
    BOOL notDown = !down;
    BOOL downAndOn = down && on;


    //// Subframes
    CGRect subbed = CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame));
    CGRect notSubbed = CGRectMake(CGRectGetMinX(frame) + floor((CGRectGetWidth(frame) - 69) / 2 + 0.5), CGRectGetMinY(frame), 69, 62);


    if (on)
    {
        //// subbed
        {
            //// Oval Drawing
            UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(subbed) + floor(CGRectGetWidth(subbed) * 0.20290 + 0.5), CGRectGetMinY(subbed) + floor(CGRectGetHeight(subbed) * 0.00000 + 0.5), floor(CGRectGetWidth(subbed) * 0.79710 + 0.5) - floor(CGRectGetWidth(subbed) * 0.20290 + 0.5), floor(CGRectGetHeight(subbed) * 0.66129 + 0.5) - floor(CGRectGetHeight(subbed) * 0.00000 + 0.5))];
            [UIColor.whiteColor setFill];
            [ovalPath fill];


            //// Symbol Drawing
            CGRect symbolRect = CGRectMake(CGRectGetMinX(subbed) + floor(CGRectGetWidth(subbed) * 0.27536 + 0.5), CGRectGetMinY(subbed) + floor(CGRectGetHeight(subbed) * 0.08065 + 0.5), floor(CGRectGetWidth(subbed) * 0.72464 + 0.5) - floor(CGRectGetWidth(subbed) * 0.27536 + 0.5), floor(CGRectGetHeight(subbed) * 0.58065 + 0.5) - floor(CGRectGetHeight(subbed) * 0.08065 + 0.5));
            CGContextSaveGState(context);
            UIRectClip(symbolRect);
            CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

            [TungPodcastStyleKit drawSubscribeIconSolidWithFrame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height) color: color];
            CGContextRestoreGState(context);


            if (downAndOn)
            {
                //// Oval 4 Drawing
                UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(subbed) + floor(CGRectGetWidth(subbed) * 0.20290 + 0.5), CGRectGetMinY(subbed) + floor(CGRectGetHeight(subbed) * 0.00000 + 0.5), floor(CGRectGetWidth(subbed) * 0.79710 + 0.5) - floor(CGRectGetWidth(subbed) * 0.20290 + 0.5), floor(CGRectGetHeight(subbed) * 0.66129 + 0.5) - floor(CGRectGetHeight(subbed) * 0.00000 + 0.5))];
                [black10Alpha setFill];
                [oval4Path fill];
            }


            //// unsubscrbe Drawing
            CGRect unsubscrbeRect = CGRectMake(CGRectGetMinX(subbed) + floor(CGRectGetWidth(subbed) * 0.00000 + 0.5), CGRectGetMinY(subbed) + floor(CGRectGetHeight(subbed) * 0.66129 + 0.5), floor(CGRectGetWidth(subbed) * 1.00000 + 0.5) - floor(CGRectGetWidth(subbed) * 0.00000 + 0.5), floor(CGRectGetHeight(subbed) * 1.00000 + 0.5) - floor(CGRectGetHeight(subbed) * 0.66129 + 0.5));
            {
                NSString* textContent = @"Unsubscribe";
                NSMutableParagraphStyle* unsubscrbeStyle = [NSMutableParagraphStyle new];
                unsubscrbeStyle.alignment = NSTextAlignmentCenter;

                NSDictionary* unsubscrbeFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 11], NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: unsubscrbeStyle};

                CGFloat unsubscrbeTextHeight = [textContent boundingRectWithSize: CGSizeMake(unsubscrbeRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: unsubscrbeFontAttributes context: nil].size.height;
                CGContextSaveGState(context);
                CGContextClipToRect(context, unsubscrbeRect);
                [textContent drawInRect: CGRectMake(CGRectGetMinX(unsubscrbeRect), CGRectGetMinY(unsubscrbeRect) + (CGRectGetHeight(unsubscrbeRect) - unsubscrbeTextHeight) / 2, CGRectGetWidth(unsubscrbeRect), unsubscrbeTextHeight) withAttributes: unsubscrbeFontAttributes];
                CGContextRestoreGState(context);
            }
        }
    }


    if (notOn)
    {
        //// not subbed
        {
            if (notDown)
            {
                //// Oval 2 Drawing
                UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(notSubbed) + 14, CGRectGetMinY(notSubbed), 41, 41)];
                [black15Alpha setFill];
                [oval2Path fill];
            }


            if (down)
            {
                //// Oval 3 Drawing
                UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(notSubbed) + 14, CGRectGetMinY(notSubbed), 41, 41)];
                [black25Alpha setFill];
                [oval3Path fill];
            }


            //// Symbol 2 Drawing
            CGRect symbol2Rect = CGRectMake(CGRectGetMinX(notSubbed) + 19, CGRectGetMinY(notSubbed) + 5, 31, 31);
            CGContextSaveGState(context);
            UIRectClip(symbol2Rect);
            CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);

            [TungPodcastStyleKit drawSubscribeIconWithFrame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height) color: white];
            CGContextRestoreGState(context);


            //// subscribe Drawing
            CGRect subscribeRect = CGRectMake(CGRectGetMinX(notSubbed), CGRectGetMinY(notSubbed) + 41, 69, 21);
            {
                NSString* textContent = @"Subscribe";
                NSMutableParagraphStyle* subscribeStyle = [NSMutableParagraphStyle new];
                subscribeStyle.alignment = NSTextAlignmentCenter;

                NSDictionary* subscribeFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 11], NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: subscribeStyle};

                CGFloat subscribeTextHeight = [textContent boundingRectWithSize: CGSizeMake(subscribeRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: subscribeFontAttributes context: nil].size.height;
                CGContextSaveGState(context);
                CGContextClipToRect(context, subscribeRect);
                [textContent drawInRect: CGRectMake(CGRectGetMinX(subscribeRect), CGRectGetMinY(subscribeRect) + (CGRectGetHeight(subscribeRect) - subscribeTextHeight) / 2, CGRectGetWidth(subscribeRect), subscribeTextHeight) withAttributes: subscribeFontAttributes];
                CGContextRestoreGState(context);
            }
        }
    }
}

+ (void)drawClipButtonWithFrame: (CGRect)frame down: (BOOL)down
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notDown = !down;

    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }


    if (notDown)
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalPath fill];
    }


    //// Symbol Drawing
    CGRect symbolRect = CGRectMake(CGRectGetMinX(frame) + 3, CGRectGetMinY(frame) + 4, CGRectGetWidth(frame) - 7, CGRectGetHeight(frame) - 7);
    CGContextSaveGState(context);
    UIRectClip(symbolRect);
    CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

    [TungPodcastStyleKit drawClipIconWithFrame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height) color: TungPodcastStyleKit.tungColor];
    CGContextRestoreGState(context);
}

+ (void)drawRecommendButtonWithFrame: (CGRect)frame on: (BOOL)on down: (BOOL)down
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.25];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notOn = !on;
    BOOL notDown = !down;
    BOOL downAndOn = down && on;


    //// Subframes
    CGRect notReccd = CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame));
    CGRect reccd = CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame));


    if (notOn)
    {
        //// not recc'd
        {
            if (notDown)
            {
                //// Oval Drawing
                UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(notReccd) + floor(CGRectGetWidth(notReccd) * 0.00000 + 0.5), CGRectGetMinY(notReccd) + floor(CGRectGetHeight(notReccd) * 0.00000 + 0.5), floor(CGRectGetWidth(notReccd) * 1.00000 + 0.5) - floor(CGRectGetWidth(notReccd) * 0.00000 + 0.5), floor(CGRectGetHeight(notReccd) * 1.00000 + 0.5) - floor(CGRectGetHeight(notReccd) * 0.00000 + 0.5))];
                [black10Alpha setFill];
                [ovalPath fill];
            }


            if (down)
            {
                //// Oval 3 Drawing
                UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(notReccd) + floor(CGRectGetWidth(notReccd) * 0.00000 + 0.5), CGRectGetMinY(notReccd) + floor(CGRectGetHeight(notReccd) * 0.00000 + 0.5), floor(CGRectGetWidth(notReccd) * 1.00000 + 0.5) - floor(CGRectGetWidth(notReccd) * 0.00000 + 0.5), floor(CGRectGetHeight(notReccd) * 1.00000 + 0.5) - floor(CGRectGetHeight(notReccd) * 0.00000 + 0.5))];
                [black25Alpha setFill];
                [oval3Path fill];
            }


            //// Symbol Drawing
            CGRect symbolRect = CGRectMake(CGRectGetMinX(notReccd) + floor(CGRectGetWidth(notReccd) * 0.07317 + 0.5), CGRectGetMinY(notReccd) + floor(CGRectGetHeight(notReccd) * 0.04878 + 0.5), floor(CGRectGetWidth(notReccd) * 0.92683 + 0.5) - floor(CGRectGetWidth(notReccd) * 0.07317 + 0.5), floor(CGRectGetHeight(notReccd) * 0.90244 + 0.5) - floor(CGRectGetHeight(notReccd) * 0.04878 + 0.5));
            CGContextSaveGState(context);
            UIRectClip(symbolRect);
            CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

            [TungPodcastStyleKit drawRecommendIconWithFrame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height) color: TungPodcastStyleKit.tungColor];
            CGContextRestoreGState(context);
        }
    }


    if (on)
    {
        //// Recc'd
        {
            //// Oval 2 Drawing
            UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(reccd) + floor(CGRectGetWidth(reccd) * 0.00000 + 0.5), CGRectGetMinY(reccd) + floor(CGRectGetHeight(reccd) * 0.00000 + 0.5), floor(CGRectGetWidth(reccd) * 1.00000 + 0.5) - floor(CGRectGetWidth(reccd) * 0.00000 + 0.5), floor(CGRectGetHeight(reccd) * 1.00000 + 0.5) - floor(CGRectGetHeight(reccd) * 0.00000 + 0.5))];
            [TungPodcastStyleKit.tungColor setFill];
            [oval2Path fill];


            //// Symbol 2 Drawing
            CGRect symbol2Rect = CGRectMake(CGRectGetMinX(reccd) + floor(CGRectGetWidth(reccd) * 0.07317 + 0.5), CGRectGetMinY(reccd) + floor(CGRectGetHeight(reccd) * 0.04878 + 0.5), floor(CGRectGetWidth(reccd) * 0.92683 + 0.5) - floor(CGRectGetWidth(reccd) * 0.07317 + 0.5), floor(CGRectGetHeight(reccd) * 0.90244 + 0.5) - floor(CGRectGetHeight(reccd) * 0.04878 + 0.5));
            CGContextSaveGState(context);
            UIRectClip(symbol2Rect);
            CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);

            [TungPodcastStyleKit drawRecommendIconWithFrame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height) color: white];
            CGContextRestoreGState(context);


            if (downAndOn)
            {
                //// Oval 4 Drawing
                UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(reccd) + floor(CGRectGetWidth(reccd) * 0.00000 + 0.5), CGRectGetMinY(reccd) + floor(CGRectGetHeight(reccd) * 0.00000 + 0.5), floor(CGRectGetWidth(reccd) * 1.00000 + 0.5) - floor(CGRectGetWidth(reccd) * 0.00000 + 0.5), floor(CGRectGetHeight(reccd) * 1.00000 + 0.5) - floor(CGRectGetHeight(reccd) * 0.00000 + 0.5))];
                [black15Alpha setFill];
                [oval4Path fill];
            }
        }
    }
}

+ (void)drawShareButtonWithFrame: (CGRect)frame down: (BOOL)down
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notDown = !down;

    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }


    if (notDown)
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalPath fill];
    }


    //// Symbol Drawing
    CGRect symbolRect = CGRectMake(CGRectGetMinX(frame) + 1, CGRectGetMinY(frame) + 1, CGRectGetWidth(frame) - 2, CGRectGetHeight(frame) - 2);
    CGContextSaveGState(context);
    UIRectClip(symbolRect);
    CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

    [TungPodcastStyleKit drawShareIconWithFrame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height) color: TungPodcastStyleKit.tungColor];
    CGContextRestoreGState(context);
}

+ (void)drawWebsiteButtonWithFrame: (CGRect)frame down: (BOOL)down disabled: (BOOL)disabled
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notDown = !down;
    BOOL notDisabled = !disabled;

    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }


    if (notDown)
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalPath fill];
    }


    if (notDisabled)
    {
        //// Symbol Drawing
        CGRect symbolRect = CGRectMake(CGRectGetMinX(frame) + 3.5, CGRectGetMinY(frame) + 4, CGRectGetWidth(frame) - 7.5, CGRectGetHeight(frame) - 7);
        CGContextSaveGState(context);
        UIRectClip(symbolRect);
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

        [TungPodcastStyleKit drawWebsiteIconWithFrame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height) color: TungPodcastStyleKit.tungColor];
        CGContextRestoreGState(context);
    }
}

+ (void)drawClipRecordButtonWithFrame: (CGRect)frame on: (BOOL)on down: (BOOL)down disabled: (BOOL)disabled
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.25];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];
    UIColor* red = [UIColor colorWithRed: 1 green: 0 blue: 0 alpha: 1];

    //// Variable Declarations
    BOOL notOn = !on;
    BOOL notDown = !down;
    BOOL downAndOn = down && on;
    BOOL notDisabled = !disabled;


    //// Subframes
    CGRect group = CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame));
    CGRect recording = CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame));


    if (notOn)
    {
        //// Group
        {
            if (notDown)
            {
                //// Bezier Drawing
                UIBezierPath* bezierPath = [UIBezierPath bezierPath];
                [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.73486 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
                [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.26511 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
                [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.11869 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22386 * CGRectGetHeight(group))];
                [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.26511 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77611 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.11869 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
                [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.73486 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
                [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.88130 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77611 * CGRectGetHeight(group))];
                [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.73486 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22386 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.88130 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
                [bezierPath closePath];
                [black10Alpha setFill];
                [bezierPath fill];
            }


            if (down)
            {
                //// Bezier 3 Drawing
                UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
                [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.73486 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
                [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.26511 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
                [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.11869 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22386 * CGRectGetHeight(group))];
                [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.26511 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77611 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.11869 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
                [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.73486 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group))];
                [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.50000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 0.88130 * CGRectGetWidth(group), CGRectGetMinY(group) + 1.00000 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.77611 * CGRectGetHeight(group))];
                [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(group) + 0.73486 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group)) controlPoint1: CGPointMake(CGRectGetMinX(group) + 1.00000 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.22386 * CGRectGetHeight(group)) controlPoint2: CGPointMake(CGRectGetMinX(group) + 0.88130 * CGRectGetWidth(group), CGRectGetMinY(group) + 0.00000 * CGRectGetHeight(group))];
                [bezier3Path closePath];
                [black25Alpha setFill];
                [bezier3Path fill];
            }


            if (notDisabled)
            {
                //// Symbol Drawing
                CGRect symbolRect = CGRectMake(CGRectGetMinX(group) + floor(CGRectGetWidth(group) * 0.01299 + 0.5), CGRectGetMinY(group) + floor(CGRectGetHeight(group) * 0.04878 + 0.5), floor(CGRectGetWidth(group) * 0.49351 + 0.5) - floor(CGRectGetWidth(group) * 0.01299 + 0.5), floor(CGRectGetHeight(group) * 0.95122 + 0.5) - floor(CGRectGetHeight(group) * 0.04878 + 0.5));
                CGContextSaveGState(context);
                UIRectClip(symbolRect);
                CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);
                CGContextScaleCTM(context, symbolRect.size.width / 40, symbolRect.size.height / 40);

                [TungPodcastStyleKit drawRecordIconWithColor: TungPodcastStyleKit.tungColor];
                CGContextRestoreGState(context);


                //// record text Drawing
                CGRect recordTextRect = CGRectMake(CGRectGetMinX(group) + floor(CGRectGetWidth(group) * 0.37662 + 0.5), CGRectGetMinY(group) + floor(CGRectGetHeight(group) * 0.24390 + 0.5), floor(CGRectGetWidth(group) * 0.94805 + 0.5) - floor(CGRectGetWidth(group) * 0.37662 + 0.5), floor(CGRectGetHeight(group) * 0.75610 + 0.5) - floor(CGRectGetHeight(group) * 0.24390 + 0.5));
                {
                    NSString* textContent = @"Record";
                    NSMutableParagraphStyle* recordTextStyle = [NSMutableParagraphStyle new];
                    recordTextStyle.alignment = NSTextAlignmentCenter;

                    NSDictionary* recordTextFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 10], NSForegroundColorAttributeName: TungPodcastStyleKit.tungColor, NSParagraphStyleAttributeName: recordTextStyle};

                    CGFloat recordTextTextHeight = [textContent boundingRectWithSize: CGSizeMake(recordTextRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: recordTextFontAttributes context: nil].size.height;
                    CGContextSaveGState(context);
                    CGContextClipToRect(context, recordTextRect);
                    [textContent drawInRect: CGRectMake(CGRectGetMinX(recordTextRect), CGRectGetMinY(recordTextRect) + (CGRectGetHeight(recordTextRect) - recordTextTextHeight) / 2, CGRectGetWidth(recordTextRect), recordTextTextHeight) withAttributes: recordTextFontAttributes];
                    CGContextRestoreGState(context);
                }
            }


            if (disabled)
            {
                //// Symbol 3 Drawing
                CGRect symbol3Rect = CGRectMake(CGRectGetMinX(group) + floor(CGRectGetWidth(group) * 0.01299 + 0.5), CGRectGetMinY(group) + floor(CGRectGetHeight(group) * 0.04878 + 0.5), floor(CGRectGetWidth(group) * 0.49351 + 0.5) - floor(CGRectGetWidth(group) * 0.01299 + 0.5), floor(CGRectGetHeight(group) * 0.95122 + 0.5) - floor(CGRectGetHeight(group) * 0.04878 + 0.5));
                CGContextSaveGState(context);
                UIRectClip(symbol3Rect);
                CGContextTranslateCTM(context, symbol3Rect.origin.x, symbol3Rect.origin.y);
                CGContextScaleCTM(context, symbol3Rect.size.width / 40, symbol3Rect.size.height / 40);

                [TungPodcastStyleKit drawRecordIconWithColor: black15Alpha];
                CGContextRestoreGState(context);


                //// record text 2 Drawing
                CGRect recordText2Rect = CGRectMake(CGRectGetMinX(group) + floor(CGRectGetWidth(group) * 0.37662 + 0.5), CGRectGetMinY(group) + floor(CGRectGetHeight(group) * 0.24390 + 0.5), floor(CGRectGetWidth(group) * 0.94805 + 0.5) - floor(CGRectGetWidth(group) * 0.37662 + 0.5), floor(CGRectGetHeight(group) * 0.75610 + 0.5) - floor(CGRectGetHeight(group) * 0.24390 + 0.5));
                {
                    NSString* textContent = @"Record";
                    NSMutableParagraphStyle* recordText2Style = [NSMutableParagraphStyle new];
                    recordText2Style.alignment = NSTextAlignmentCenter;

                    NSDictionary* recordText2FontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 10], NSForegroundColorAttributeName: black15Alpha, NSParagraphStyleAttributeName: recordText2Style};

                    CGFloat recordText2TextHeight = [textContent boundingRectWithSize: CGSizeMake(recordText2Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: recordText2FontAttributes context: nil].size.height;
                    CGContextSaveGState(context);
                    CGContextClipToRect(context, recordText2Rect);
                    [textContent drawInRect: CGRectMake(CGRectGetMinX(recordText2Rect), CGRectGetMinY(recordText2Rect) + (CGRectGetHeight(recordText2Rect) - recordText2TextHeight) / 2, CGRectGetWidth(recordText2Rect), recordText2TextHeight) withAttributes: recordText2FontAttributes];
                    CGContextRestoreGState(context);
                }
            }
        }
    }


    if (on)
    {
        //// Recording
        {
            //// Bezier 2 Drawing
            UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
            [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(recording) + 0.73486 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.00000 * CGRectGetHeight(recording))];
            [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(recording) + 0.26511 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.00000 * CGRectGetHeight(recording))];
            [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(recording) + 0.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.50000 * CGRectGetHeight(recording)) controlPoint1: CGPointMake(CGRectGetMinX(recording) + 0.11869 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.00000 * CGRectGetHeight(recording)) controlPoint2: CGPointMake(CGRectGetMinX(recording) + 0.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.22386 * CGRectGetHeight(recording))];
            [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(recording) + 0.26511 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 1.00000 * CGRectGetHeight(recording)) controlPoint1: CGPointMake(CGRectGetMinX(recording) + 0.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.77611 * CGRectGetHeight(recording)) controlPoint2: CGPointMake(CGRectGetMinX(recording) + 0.11869 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 1.00000 * CGRectGetHeight(recording))];
            [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(recording) + 0.73486 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 1.00000 * CGRectGetHeight(recording))];
            [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(recording) + 1.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.50000 * CGRectGetHeight(recording)) controlPoint1: CGPointMake(CGRectGetMinX(recording) + 0.88130 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 1.00000 * CGRectGetHeight(recording)) controlPoint2: CGPointMake(CGRectGetMinX(recording) + 1.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.77611 * CGRectGetHeight(recording))];
            [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(recording) + 0.73486 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.00000 * CGRectGetHeight(recording)) controlPoint1: CGPointMake(CGRectGetMinX(recording) + 1.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.22386 * CGRectGetHeight(recording)) controlPoint2: CGPointMake(CGRectGetMinX(recording) + 0.88130 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.00000 * CGRectGetHeight(recording))];
            [bezier2Path closePath];
            [red setFill];
            [bezier2Path fill];


            //// Symbol 2 Drawing
            CGRect symbol2Rect = CGRectMake(CGRectGetMinX(recording) + floor(CGRectGetWidth(recording) * 0.03896 + 0.5), CGRectGetMinY(recording) + floor(CGRectGetHeight(recording) * 0.09756 + 0.5), floor(CGRectGetWidth(recording) * 0.48052 + 0.5) - floor(CGRectGetWidth(recording) * 0.03896 + 0.5), floor(CGRectGetHeight(recording) * 0.92683 + 0.5) - floor(CGRectGetHeight(recording) * 0.09756 + 0.5));
            CGContextSaveGState(context);
            UIRectClip(symbol2Rect);
            CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);

            [TungPodcastStyleKit drawStopIconWithFrame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height) color: white];
            CGContextRestoreGState(context);


            //// stop text Drawing
            CGRect stopTextRect = CGRectMake(CGRectGetMinX(recording) + floor(CGRectGetWidth(recording) * 0.37662 + 0.5), CGRectGetMinY(recording) + floor(CGRectGetHeight(recording) * 0.24390 + 0.5), floor(CGRectGetWidth(recording) * 0.94805 + 0.5) - floor(CGRectGetWidth(recording) * 0.37662 + 0.5), floor(CGRectGetHeight(recording) * 0.75610 + 0.5) - floor(CGRectGetHeight(recording) * 0.24390 + 0.5));
            {
                NSString* textContent = @"Stop";
                NSMutableParagraphStyle* stopTextStyle = [NSMutableParagraphStyle new];
                stopTextStyle.alignment = NSTextAlignmentCenter;

                NSDictionary* stopTextFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 10], NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: stopTextStyle};

                CGFloat stopTextTextHeight = [textContent boundingRectWithSize: CGSizeMake(stopTextRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: stopTextFontAttributes context: nil].size.height;
                CGContextSaveGState(context);
                CGContextClipToRect(context, stopTextRect);
                [textContent drawInRect: CGRectMake(CGRectGetMinX(stopTextRect), CGRectGetMinY(stopTextRect) + (CGRectGetHeight(stopTextRect) - stopTextTextHeight) / 2, CGRectGetWidth(stopTextRect), stopTextTextHeight) withAttributes: stopTextFontAttributes];
                CGContextRestoreGState(context);
            }


            if (downAndOn)
            {
                //// Bezier 4 Drawing
                UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
                [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(recording) + 0.73486 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.00000 * CGRectGetHeight(recording))];
                [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(recording) + 0.26511 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.00000 * CGRectGetHeight(recording))];
                [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(recording) + 0.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.50000 * CGRectGetHeight(recording)) controlPoint1: CGPointMake(CGRectGetMinX(recording) + 0.11869 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.00000 * CGRectGetHeight(recording)) controlPoint2: CGPointMake(CGRectGetMinX(recording) + 0.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.22386 * CGRectGetHeight(recording))];
                [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(recording) + 0.26511 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 1.00000 * CGRectGetHeight(recording)) controlPoint1: CGPointMake(CGRectGetMinX(recording) + 0.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.77611 * CGRectGetHeight(recording)) controlPoint2: CGPointMake(CGRectGetMinX(recording) + 0.11869 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 1.00000 * CGRectGetHeight(recording))];
                [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(recording) + 0.73486 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 1.00000 * CGRectGetHeight(recording))];
                [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(recording) + 1.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.50000 * CGRectGetHeight(recording)) controlPoint1: CGPointMake(CGRectGetMinX(recording) + 0.88130 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 1.00000 * CGRectGetHeight(recording)) controlPoint2: CGPointMake(CGRectGetMinX(recording) + 1.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.77611 * CGRectGetHeight(recording))];
                [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(recording) + 0.73486 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.00000 * CGRectGetHeight(recording)) controlPoint1: CGPointMake(CGRectGetMinX(recording) + 1.00000 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.22386 * CGRectGetHeight(recording)) controlPoint2: CGPointMake(CGRectGetMinX(recording) + 0.88130 * CGRectGetWidth(recording), CGRectGetMinY(recording) + 0.00000 * CGRectGetHeight(recording))];
                [bezier4Path closePath];
                [black15Alpha setFill];
                [bezier4Path fill];
            }
        }
    }
}

+ (void)drawClipPlayButtonWithFrame: (CGRect)frame on: (BOOL)on down: (BOOL)down disabled: (BOOL)disabled
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.25];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notDown = !down;
    BOOL notDisabledNotOn = !disabled && !on;

    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }


    if (notDown)
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalPath fill];
    }


    if (notDisabledNotOn)
    {
        //// play Drawing
        CGRect playRect = CGRectMake(CGRectGetMinX(frame) + 3.5, CGRectGetMinY(frame) + 2.5, CGRectGetWidth(frame) - 5.5, CGRectGetHeight(frame) - 5.5);
        CGContextSaveGState(context);
        UIRectClip(playRect);
        CGContextTranslateCTM(context, playRect.origin.x, playRect.origin.y);
        CGContextScaleCTM(context, playRect.size.width / 40, playRect.size.height / 40);

        [TungPodcastStyleKit drawPlayIconWithColor: TungPodcastStyleKit.tungColor];
        CGContextRestoreGState(context);
    }


    if (disabled)
    {
        //// Symbol 2 Drawing
        CGRect symbol2Rect = CGRectMake(CGRectGetMinX(frame) + 3.5, CGRectGetMinY(frame) + 2.5, CGRectGetWidth(frame) - 5.5, CGRectGetHeight(frame) - 5.5);
        CGContextSaveGState(context);
        UIRectClip(symbol2Rect);
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);
        CGContextScaleCTM(context, symbol2Rect.size.width / 40, symbol2Rect.size.height / 40);

        [TungPodcastStyleKit drawPlayIconWithColor: black15Alpha];
        CGContextRestoreGState(context);
    }


    if (on)
    {
        //// stop Drawing
        CGRect stopRect = CGRectMake(CGRectGetMinX(frame) + 1.79, CGRectGetMinY(frame) + 1.79, CGRectGetWidth(frame) - 3.57, CGRectGetHeight(frame) - 3.57);
        CGContextSaveGState(context);
        UIRectClip(stopRect);
        CGContextTranslateCTM(context, stopRect.origin.x, stopRect.origin.y);

        [TungPodcastStyleKit drawStopIconWithFrame: CGRectMake(0, 0, stopRect.size.width, stopRect.size.height) color: TungPodcastStyleKit.tungColor];
        CGContextRestoreGState(context);
    }
}

+ (void)drawClipCancelButtonWithFrame: (CGRect)frame down: (BOOL)down disabled: (BOOL)disabled
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.25];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notDown = !down;
    BOOL notDisabled = !disabled;

    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }


    if (notDown)
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalPath fill];
    }


    if (notDisabled)
    {
        //// Symbol Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, CGRectGetMinX(frame) + 0.50000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame));

        CGRect symbolRect = CGRectMake(-17.5, -17.5, 35.5, 35.5);
        CGContextSaveGState(context);
        UIRectClip(symbolRect);
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

        [TungPodcastStyleKit drawCancelIconWithFrame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height) color: TungPodcastStyleKit.tungColor];
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);
    }


    if (disabled)
    {
        //// Symbol 2 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, CGRectGetMinX(frame) + 0.50000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame));

        CGRect symbol2Rect = CGRectMake(-17.5, -17.5, 35.5, 35.5);
        CGContextSaveGState(context);
        UIRectClip(symbol2Rect);
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);

        [TungPodcastStyleKit drawCancelIconWithFrame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height) color: black15Alpha];
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);
    }
}

+ (void)drawClipOkButtonWithFrame: (CGRect)frame down: (BOOL)down disabled: (BOOL)disabled
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.25];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notDown = !down;
    BOOL notDisabled = !disabled;

    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }


    if (notDown)
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalPath fill];
    }


    if (notDisabled)
    {
        //// Symbol Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, CGRectGetMinX(frame) + 0.49966 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50567 * CGRectGetHeight(frame));

        CGRect symbolRect = CGRectMake(-18.49, -18.73, 37.5, 38);
        CGContextSaveGState(context);
        UIRectClip(symbolRect);
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

        [TungPodcastStyleKit drawCheckmarkIconWithFrame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height) color: TungPodcastStyleKit.tungColor];
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);
    }


    if (disabled)
    {
        //// Symbol 2 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, CGRectGetMinX(frame) + 0.49966 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50567 * CGRectGetHeight(frame));

        CGRect symbol2Rect = CGRectMake(-18.49, -18.73, 37.5, 38);
        CGContextSaveGState(context);
        UIRectClip(symbol2Rect);
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);

        [TungPodcastStyleKit drawCheckmarkIconWithFrame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height) color: black15Alpha];
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);
    }
}

+ (void)drawHideControlsButtonWithFrame: (CGRect)frame
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* mediumGray = [UIColor colorWithRed: 0.504 green: 0.512 blue: 0.525 alpha: 1];

    //// Symbol Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, CGRectGetMinX(frame) + 0.49194 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 13.5);

    CGRect symbolRect = CGRectMake(-20.5, -6.5, 41, 13);
    CGContextSaveGState(context);
    UIRectClip(symbolRect);
    CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);
    CGContextScaleCTM(context, symbolRect.size.width / 33, symbolRect.size.height / 11);

    [TungPodcastStyleKit drawHideIconWithColor: mediumGray];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);
}

+ (void)drawShowControlsButtonWithFrame: (CGRect)frame
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Symbol Drawing
    CGRect symbolRect = CGRectMake(CGRectGetMinX(frame) + CGRectGetWidth(frame) - 51, CGRectGetMinY(frame) + 9, 41, 13);
    CGContextSaveGState(context);
    UIRectClip(symbolRect);
    CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);
    CGContextScaleCTM(context, symbolRect.size.width / 33, symbolRect.size.height / 11);

    [TungPodcastStyleKit drawShowIconWithColor: TungPodcastStyleKit.tungColor];
    CGContextRestoreGState(context);
}

+ (void)drawCommentButtonWithFrame: (CGRect)frame on: (BOOL)on down: (BOOL)down disabled: (BOOL)disabled
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.25];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];
    UIColor* tung20 = [TungPodcastStyleKit.tungColor colorWithAlphaComponent: 0.2];

    //// Variable Declarations
    BOOL notDown = !down;
    BOOL downAndOn = down && on;
    BOOL notDisabled = !disabled;

    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }


    if (notDown)
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalPath fill];
    }


    if (notDisabled)
    {
        //// Symbol Drawing
        CGRect symbolRect = CGRectMake(CGRectGetMinX(frame) + 3.5, CGRectGetMinY(frame) + 4, CGRectGetWidth(frame) - 7.5, CGRectGetHeight(frame) - 8);
        CGContextSaveGState(context);
        UIRectClip(symbolRect);
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

        [TungPodcastStyleKit drawCommentIconWithFrame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height) color: TungPodcastStyleKit.tungColor];
        CGContextRestoreGState(context);
    }


    if (disabled)
    {
        //// Symbol 3 Drawing
        CGRect symbol3Rect = CGRectMake(CGRectGetMinX(frame) + 3.5, CGRectGetMinY(frame) + 4, CGRectGetWidth(frame) - 7.5, CGRectGetHeight(frame) - 8);
        CGContextSaveGState(context);
        UIRectClip(symbol3Rect);
        CGContextTranslateCTM(context, symbol3Rect.origin.x, symbol3Rect.origin.y);

        [TungPodcastStyleKit drawCommentIconWithFrame: CGRectMake(0, 0, symbol3Rect.size.width, symbol3Rect.size.height) color: tung20];
        CGContextRestoreGState(context);
    }


    if (on)
    {
        //// Oval 3 Drawing
        UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [TungPodcastStyleKit.tungColor setFill];
        [oval3Path fill];


        //// Symbol 2 Drawing
        CGRect symbol2Rect = CGRectMake(CGRectGetMinX(frame) + 3.5, CGRectGetMinY(frame) + 4, CGRectGetWidth(frame) - 7.5, CGRectGetHeight(frame) - 8);
        CGContextSaveGState(context);
        UIRectClip(symbol2Rect);
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);

        [TungPodcastStyleKit drawCommentIconWithFrame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height) color: white];
        CGContextRestoreGState(context);
    }


    if (downAndOn)
    {
        //// Oval 4 Drawing
        UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black15Alpha setFill];
        [oval4Path fill];
    }
}

+ (void)drawTwitterButtonWithFrame: (CGRect)frame on: (BOOL)on down: (BOOL)down
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.25];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notOn = !on;
    BOOL notDown = !down;

    if (notDown)
    {
        //// Oval off Drawing
        UIBezierPath* ovalOffPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalOffPath fill];
    }


    if (on)
    {
        //// Oval on Drawing
        UIBezierPath* ovalOnPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [TungPodcastStyleKit.twitterBlue setFill];
        [ovalOnPath fill];
    }


    if (notOn)
    {
        //// twitter off Drawing
        CGRect twitterOffRect = CGRectMake(CGRectGetMinX(frame) + 5, CGRectGetMinY(frame) + 5, CGRectGetWidth(frame) - 9, CGRectGetHeight(frame) - 9);
        CGContextSaveGState(context);
        UIRectClip(twitterOffRect);
        CGContextTranslateCTM(context, twitterOffRect.origin.x, twitterOffRect.origin.y);

        [TungPodcastStyleKit drawTwitterIconWithFrame: CGRectMake(0, 0, twitterOffRect.size.width, twitterOffRect.size.height) color: black15Alpha];
        CGContextRestoreGState(context);
    }


    if (on)
    {
        //// twitter on Drawing
        CGRect twitterOnRect = CGRectMake(CGRectGetMinX(frame) + 5, CGRectGetMinY(frame) + 5, CGRectGetWidth(frame) - 9, CGRectGetHeight(frame) - 9);
        CGContextSaveGState(context);
        UIRectClip(twitterOnRect);
        CGContextTranslateCTM(context, twitterOnRect.origin.x, twitterOnRect.origin.y);

        [TungPodcastStyleKit drawTwitterIconWithFrame: CGRectMake(0, 0, twitterOnRect.size.width, twitterOnRect.size.height) color: white];
        CGContextRestoreGState(context);
    }


    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }
}

+ (void)drawFacebookButtonWithFrame: (CGRect)frame on: (BOOL)on down: (BOOL)down
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.25];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notOn = !on;

    if (notOn)
    {
        //// Oval off Drawing
        UIBezierPath* ovalOffPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalOffPath fill];
    }


    if (on)
    {
        //// Oval on Drawing
        UIBezierPath* ovalOnPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [TungPodcastStyleKit.facebookBlue setFill];
        [ovalOnPath fill];
    }


    if (notOn)
    {
        //// facebook off Drawing
        CGRect facebookOffRect = CGRectMake(CGRectGetMinX(frame) + 5, CGRectGetMinY(frame) + 5, CGRectGetWidth(frame) - 10, CGRectGetHeight(frame) - 10);
        CGContextSaveGState(context);
        UIRectClip(facebookOffRect);
        CGContextTranslateCTM(context, facebookOffRect.origin.x, facebookOffRect.origin.y);

        [TungPodcastStyleKit drawFacebookIconWithFrame: CGRectMake(0, 0, facebookOffRect.size.width, facebookOffRect.size.height) color: black15Alpha];
        CGContextRestoreGState(context);
    }


    if (on)
    {
        //// facebook on Drawing
        CGRect facebookOnRect = CGRectMake(CGRectGetMinX(frame) + 5, CGRectGetMinY(frame) + 5, CGRectGetWidth(frame) - 10, CGRectGetHeight(frame) - 10);
        CGContextSaveGState(context);
        UIRectClip(facebookOnRect);
        CGContextTranslateCTM(context, facebookOnRect.origin.x, facebookOnRect.origin.y);

        [TungPodcastStyleKit drawFacebookIconWithFrame: CGRectMake(0, 0, facebookOnRect.size.width, facebookOnRect.size.height) color: white];
        CGContextRestoreGState(context);
    }


    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }
}

+ (void)drawPillTextbuttonWithFrame: (CGRect)frame down: (BOOL)down disabled: (BOOL)disabled buttonText: (NSString*)buttonText
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* tung20 = [TungPodcastStyleKit.tungColor colorWithAlphaComponent: 0.2];

    //// Variable Declarations
    BOOL notDisabled = !disabled;

    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.73486 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.26511 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.11869 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22386 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.26511 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.77611 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.11869 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.73486 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.88130 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.77611 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.73486 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22386 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.88130 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
    [bezierPath closePath];
    [tung20 setFill];
    [bezierPath fill];


    if (down)
    {
        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.73486 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.26511 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.11869 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22386 * CGRectGetHeight(frame))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.26511 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.77611 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.11869 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame))];
        [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.73486 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.88130 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.77611 * CGRectGetHeight(frame))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.73486 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22386 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.88130 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezier3Path closePath];
        [black10Alpha setFill];
        [bezier3Path fill];
    }


    if (notDisabled)
    {
        //// pillButtonText Drawing
        CGRect pillButtonTextRect = CGRectMake(CGRectGetMinX(frame) + floor((CGRectGetWidth(frame) - 77) / 2 + 0.5), CGRectGetMinY(frame) + floor((CGRectGetHeight(frame) - 27) * 0.42857 + 0.5), 77, 27);
        NSMutableParagraphStyle* pillButtonTextStyle = [NSMutableParagraphStyle new];
        pillButtonTextStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* pillButtonTextFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 15], NSForegroundColorAttributeName: TungPodcastStyleKit.tungColor, NSParagraphStyleAttributeName: pillButtonTextStyle};

        CGFloat pillButtonTextTextHeight = [buttonText boundingRectWithSize: CGSizeMake(pillButtonTextRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: pillButtonTextFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, pillButtonTextRect);
        [buttonText drawInRect: CGRectMake(CGRectGetMinX(pillButtonTextRect), CGRectGetMinY(pillButtonTextRect) + (CGRectGetHeight(pillButtonTextRect) - pillButtonTextTextHeight) / 2, CGRectGetWidth(pillButtonTextRect), pillButtonTextTextHeight) withAttributes: pillButtonTextFontAttributes];
        CGContextRestoreGState(context);
    }


    if (disabled)
    {
        //// pillButtonText 2 Drawing
        CGRect pillButtonText2Rect = CGRectMake(CGRectGetMinX(frame) + floor((CGRectGetWidth(frame) - 77) / 2 + 0.5), CGRectGetMinY(frame) + floor((CGRectGetHeight(frame) - 27) * 0.42857 + 0.5), 77, 27);
        NSMutableParagraphStyle* pillButtonText2Style = [NSMutableParagraphStyle new];
        pillButtonText2Style.alignment = NSTextAlignmentCenter;

        NSDictionary* pillButtonText2FontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 15], NSForegroundColorAttributeName: tung20, NSParagraphStyleAttributeName: pillButtonText2Style};

        CGFloat pillButtonText2TextHeight = [buttonText boundingRectWithSize: CGSizeMake(pillButtonText2Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: pillButtonText2FontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, pillButtonText2Rect);
        [buttonText drawInRect: CGRectMake(CGRectGetMinX(pillButtonText2Rect), CGRectGetMinY(pillButtonText2Rect) + (CGRectGetHeight(pillButtonText2Rect) - pillButtonText2TextHeight) / 2, CGRectGetWidth(pillButtonText2Rect), pillButtonText2TextHeight) withAttributes: pillButtonText2FontAttributes];
        CGContextRestoreGState(context);
    }
}

+ (void)drawSpeedButtonWithFrame: (CGRect)frame down: (BOOL)down buttonText: (NSString*)buttonText
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notDown = !down;

    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }


    if (notDown)
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalPath fill];
    }


    //// Text Drawing
    CGRect textRect = CGRectMake(CGRectGetMinX(frame) + floor((CGRectGetWidth(frame) - 41) / 2 + 0.5), CGRectGetMinY(frame) + floor((CGRectGetHeight(frame) - 32) * 0.44444 + 0.5), 41, 32);
    NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
    textStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"HelveticaNeue-Light" size: UIFont.labelFontSize], NSForegroundColorAttributeName: TungPodcastStyleKit.tungColor, NSParagraphStyleAttributeName: textStyle};

    CGFloat textTextHeight = [buttonText boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textRect);
    [buttonText drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
    CGContextRestoreGState(context);
}

+ (void)drawSaveButtonWithFrame: (CGRect)frame on: (BOOL)on down: (BOOL)down
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.25];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notOn = !on;
    BOOL downAndOn = down && on;

    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black25Alpha setFill];
        [oval2Path fill];
    }


    if (notOn)
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black10Alpha setFill];
        [ovalPath fill];
    }


    if (on)
    {
        //// Oval 3 Drawing
        UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [TungPodcastStyleKit.tungColor setFill];
        [oval3Path fill];
    }


    if (notOn)
    {
        //// Symbol Drawing
        CGRect symbolRect = CGRectMake(CGRectGetMinX(frame) + 2.5, CGRectGetMinY(frame) + 1, CGRectGetWidth(frame) - 5.5, CGRectGetHeight(frame) - 5);
        CGContextSaveGState(context);
        UIRectClip(symbolRect);
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

        [TungPodcastStyleKit drawSaveIconWithFrame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height) color: TungPodcastStyleKit.tungColor];
        CGContextRestoreGState(context);
    }


    if (on)
    {
        //// Symbol 2 Drawing
        CGRect symbol2Rect = CGRectMake(CGRectGetMinX(frame) + 2.5, CGRectGetMinY(frame) + 1, CGRectGetWidth(frame) - 5.5, CGRectGetHeight(frame) - 5);
        CGContextSaveGState(context);
        UIRectClip(symbol2Rect);
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);

        [TungPodcastStyleKit drawSaveIconWithFrame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height) color: white];
        CGContextRestoreGState(context);
    }


    if (downAndOn)
    {
        //// Oval 4 Drawing
        UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
        [black15Alpha setFill];
        [oval4Path fill];
    }
}

+ (void)drawTungButtonOnWhiteWithFrame: (CGRect)frame down: (BOOL)down buttonText: (NSString*)buttonText
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* tung20 = [TungPodcastStyleKit.tungColor colorWithAlphaComponent: 0.2];

    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.62, CGRectGetMinY(frame) + 0.26728 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.62, CGRectGetMinY(frame) + 0.73272 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 10.46, CGRectGetMinY(frame) + 0.39581 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 10.46, CGRectGetMinY(frame) + 0.60419 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 39, CGRectGetMinY(frame) + 0.82911 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 25.69, CGRectGetMinY(frame) + 0.79698 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 32.35, CGRectGetMinY(frame) + 0.82911 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 41, CGRectGetMinY(frame) + 0.82911 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 22.62, CGRectGetMinY(frame) + 0.73272 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 34.35, CGRectGetMinY(frame) + 0.82911 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 27.69, CGRectGetMinY(frame) + 0.79698 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 22.62, CGRectGetMinY(frame) + 0.26728 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 12.46, CGRectGetMinY(frame) + 0.60419 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 12.46, CGRectGetMinY(frame) + 0.39581 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 41, CGRectGetMinY(frame) + 0.17089 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 27.69, CGRectGetMinY(frame) + 0.20302 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 34.35, CGRectGetMinY(frame) + 0.17089 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 39, CGRectGetMinY(frame) + 0.17089 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.62, CGRectGetMinY(frame) + 0.26728 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 32.35, CGRectGetMinY(frame) + 0.17089 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 25.69, CGRectGetMinY(frame) + 0.20302 * CGRectGetHeight(frame))];
    [bezierPath closePath];
    [UIColor.whiteColor setFill];
    [bezierPath fill];
    [TungPodcastStyleKit.tungColor setStroke];
    bezierPath.lineWidth = 1;
    [bezierPath stroke];


    if (down)
    {
        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 164.88, CGRectGetMinY(frame) + 21.12)];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 164.88, CGRectGetMinY(frame) + 57.88) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 175.04, CGRectGetMinY(frame) + 31.27) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 175.04, CGRectGetMinY(frame) + 47.73)];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 146.5, CGRectGetMinY(frame) + 65.5) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 159.81, CGRectGetMinY(frame) + 62.96) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 153.15, CGRectGetMinY(frame) + 65.5)];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 40.5, CGRectGetMinY(frame) + 65.5)];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 22.12, CGRectGetMinY(frame) + 57.88) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 33.85, CGRectGetMinY(frame) + 65.5) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 27.19, CGRectGetMinY(frame) + 62.96)];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 22.12, CGRectGetMinY(frame) + 21.12) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 11.96, CGRectGetMinY(frame) + 47.73) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 11.96, CGRectGetMinY(frame) + 31.27)];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 40.5, CGRectGetMinY(frame) + 13.5) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 27.19, CGRectGetMinY(frame) + 16.04) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 33.85, CGRectGetMinY(frame) + 13.5)];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 146.5, CGRectGetMinY(frame) + 13.5)];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 164.88, CGRectGetMinY(frame) + 21.12) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 153.15, CGRectGetMinY(frame) + 13.5) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 159.81, CGRectGetMinY(frame) + 16.04)];
        [bezier2Path closePath];
        [tung20 setFill];
        [bezier2Path fill];
        [TungPodcastStyleKit.tungColor setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];
    }


    //// Text Drawing
    CGRect textRect = CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.08065 + 0.5), CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.32911 + 0.5), floor(CGRectGetWidth(frame) * 0.93011 + 0.5) - floor(CGRectGetWidth(frame) * 0.08065 + 0.5), floor(CGRectGetHeight(frame) * 0.68354 + 0.5) - floor(CGRectGetHeight(frame) * 0.32911 + 0.5));
    NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
    textStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: UIFont.buttonFontSize], NSForegroundColorAttributeName: TungPodcastStyleKit.tungColor, NSParagraphStyleAttributeName: textStyle};

    CGFloat textTextHeight = [buttonText boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textRect);
    [buttonText drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
    CGContextRestoreGState(context);
}

+ (void)drawFollowButtonWithFrame: (CGRect)frame on: (BOOL)on down: (BOOL)down
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.25];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notOn = !on;
    BOOL notDown = !down;


    //// Subframes
    CGRect follow = CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame) - 2, 38);
    CGRect followFrame = CGRectMake(CGRectGetMinX(follow) + floor(CGRectGetWidth(follow) * 0.00000 + 0.5), CGRectGetMinY(follow), floor(CGRectGetWidth(follow) * 1.00000 + 0.5) - floor(CGRectGetWidth(follow) * 0.00000 + 0.5), 38);
    CGRect following = CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame) - 4, 38);
    CGRect followingFrame = CGRectMake(CGRectGetMinX(following) + floor(CGRectGetWidth(following) * 0.00000 + 0.5), CGRectGetMinY(following), floor(CGRectGetWidth(following) * 1.00000 + 0.5) - floor(CGRectGetWidth(following) * 0.00000 + 0.5), 38);


    if (notOn)
    {
        //// follow
        {
            //// Bezier 3 Drawing
            UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
            [bezier3Path moveToPoint: CGPointMake(CGRectGetMaxX(followFrame) - 6.49, CGRectGetMinY(followFrame) + 0.18366 * CGRectGetHeight(followFrame))];
            [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMaxX(followFrame) - 6.49, CGRectGetMinY(followFrame) + 0.81634 * CGRectGetHeight(followFrame)) controlPoint1: CGPointMake(CGRectGetMaxX(followFrame) + 0.15, CGRectGetMinY(followFrame) + 0.35837 * CGRectGetHeight(followFrame)) controlPoint2: CGPointMake(CGRectGetMaxX(followFrame) + 0.15, CGRectGetMinY(followFrame) + 0.64163 * CGRectGetHeight(followFrame))];
            [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMaxX(followFrame) - 18.51, CGRectGetMinY(followFrame) + 0.94737 * CGRectGetHeight(followFrame)) controlPoint1: CGPointMake(CGRectGetMaxX(followFrame) - 9.81, CGRectGetMinY(followFrame) + 0.90369 * CGRectGetHeight(followFrame)) controlPoint2: CGPointMake(CGRectGetMaxX(followFrame) - 14.16, CGRectGetMinY(followFrame) + 0.94737 * CGRectGetHeight(followFrame))];
            [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(followFrame) + 18, CGRectGetMinY(followFrame) + 0.94737 * CGRectGetHeight(followFrame))];
            [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(followFrame) + 5.98, CGRectGetMinY(followFrame) + 0.81634 * CGRectGetHeight(followFrame)) controlPoint1: CGPointMake(CGRectGetMinX(followFrame) + 13.65, CGRectGetMinY(followFrame) + 0.94737 * CGRectGetHeight(followFrame)) controlPoint2: CGPointMake(CGRectGetMinX(followFrame) + 9.3, CGRectGetMinY(followFrame) + 0.90369 * CGRectGetHeight(followFrame))];
            [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(followFrame) + 5.98, CGRectGetMinY(followFrame) + 0.18366 * CGRectGetHeight(followFrame)) controlPoint1: CGPointMake(CGRectGetMinX(followFrame) - 0.66, CGRectGetMinY(followFrame) + 0.64163 * CGRectGetHeight(followFrame)) controlPoint2: CGPointMake(CGRectGetMinX(followFrame) - 0.66, CGRectGetMinY(followFrame) + 0.35837 * CGRectGetHeight(followFrame))];
            [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(followFrame) + 18, CGRectGetMinY(followFrame) + 0.05263 * CGRectGetHeight(followFrame)) controlPoint1: CGPointMake(CGRectGetMinX(followFrame) + 9.3, CGRectGetMinY(followFrame) + 0.09631 * CGRectGetHeight(followFrame)) controlPoint2: CGPointMake(CGRectGetMinX(followFrame) + 13.65, CGRectGetMinY(followFrame) + 0.05263 * CGRectGetHeight(followFrame))];
            [bezier3Path addLineToPoint: CGPointMake(CGRectGetMaxX(followFrame) - 18.51, CGRectGetMinY(followFrame) + 0.05263 * CGRectGetHeight(followFrame))];
            [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMaxX(followFrame) - 6.49, CGRectGetMinY(followFrame) + 0.18366 * CGRectGetHeight(followFrame)) controlPoint1: CGPointMake(CGRectGetMaxX(followFrame) - 14.16, CGRectGetMinY(followFrame) + 0.05263 * CGRectGetHeight(followFrame)) controlPoint2: CGPointMake(CGRectGetMaxX(followFrame) - 9.81, CGRectGetMinY(followFrame) + 0.09631 * CGRectGetHeight(followFrame))];
            [bezier3Path closePath];
            [TungPodcastStyleKit.tungColorMediumLight setFill];
            [bezier3Path fill];


            if (down)
            {
                //// Bezier 2 Drawing
                UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
                [bezier2Path moveToPoint: CGPointMake(CGRectGetMaxX(followFrame) - 6.49, CGRectGetMinY(followFrame) + 0.18366 * CGRectGetHeight(followFrame))];
                [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMaxX(followFrame) - 6.49, CGRectGetMinY(followFrame) + 0.81634 * CGRectGetHeight(followFrame)) controlPoint1: CGPointMake(CGRectGetMaxX(followFrame) + 0.15, CGRectGetMinY(followFrame) + 0.35837 * CGRectGetHeight(followFrame)) controlPoint2: CGPointMake(CGRectGetMaxX(followFrame) + 0.15, CGRectGetMinY(followFrame) + 0.64163 * CGRectGetHeight(followFrame))];
                [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMaxX(followFrame) - 18.51, CGRectGetMinY(followFrame) + 0.94737 * CGRectGetHeight(followFrame)) controlPoint1: CGPointMake(CGRectGetMaxX(followFrame) - 9.81, CGRectGetMinY(followFrame) + 0.90369 * CGRectGetHeight(followFrame)) controlPoint2: CGPointMake(CGRectGetMaxX(followFrame) - 14.16, CGRectGetMinY(followFrame) + 0.94737 * CGRectGetHeight(followFrame))];
                [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(followFrame) + 18, CGRectGetMinY(followFrame) + 0.94737 * CGRectGetHeight(followFrame))];
                [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(followFrame) + 5.98, CGRectGetMinY(followFrame) + 0.81634 * CGRectGetHeight(followFrame)) controlPoint1: CGPointMake(CGRectGetMinX(followFrame) + 13.65, CGRectGetMinY(followFrame) + 0.94737 * CGRectGetHeight(followFrame)) controlPoint2: CGPointMake(CGRectGetMinX(followFrame) + 9.3, CGRectGetMinY(followFrame) + 0.90369 * CGRectGetHeight(followFrame))];
                [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(followFrame) + 5.98, CGRectGetMinY(followFrame) + 0.18366 * CGRectGetHeight(followFrame)) controlPoint1: CGPointMake(CGRectGetMinX(followFrame) - 0.66, CGRectGetMinY(followFrame) + 0.64163 * CGRectGetHeight(followFrame)) controlPoint2: CGPointMake(CGRectGetMinX(followFrame) - 0.66, CGRectGetMinY(followFrame) + 0.35837 * CGRectGetHeight(followFrame))];
                [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(followFrame) + 18, CGRectGetMinY(followFrame) + 0.05263 * CGRectGetHeight(followFrame)) controlPoint1: CGPointMake(CGRectGetMinX(followFrame) + 9.3, CGRectGetMinY(followFrame) + 0.09631 * CGRectGetHeight(followFrame)) controlPoint2: CGPointMake(CGRectGetMinX(followFrame) + 13.65, CGRectGetMinY(followFrame) + 0.05263 * CGRectGetHeight(followFrame))];
                [bezier2Path addLineToPoint: CGPointMake(CGRectGetMaxX(followFrame) - 18.51, CGRectGetMinY(followFrame) + 0.05263 * CGRectGetHeight(followFrame))];
                [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMaxX(followFrame) - 6.49, CGRectGetMinY(followFrame) + 0.18366 * CGRectGetHeight(followFrame)) controlPoint1: CGPointMake(CGRectGetMaxX(followFrame) - 14.16, CGRectGetMinY(followFrame) + 0.05263 * CGRectGetHeight(followFrame)) controlPoint2: CGPointMake(CGRectGetMaxX(followFrame) - 9.81, CGRectGetMinY(followFrame) + 0.09631 * CGRectGetHeight(followFrame))];
                [bezier2Path closePath];
                [black25Alpha setFill];
                [bezier2Path fill];
                [white setStroke];
                bezier2Path.lineWidth = 1;
                [bezier2Path stroke];
            }


            if (notDown)
            {
                //// Bezier Drawing
                UIBezierPath* bezierPath = [UIBezierPath bezierPath];
                [bezierPath moveToPoint: CGPointMake(CGRectGetMaxX(followFrame) - 6.49, CGRectGetMinY(followFrame) + 0.18366 * CGRectGetHeight(followFrame))];
                [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(followFrame) - 6.49, CGRectGetMinY(followFrame) + 0.81634 * CGRectGetHeight(followFrame)) controlPoint1: CGPointMake(CGRectGetMaxX(followFrame) + 0.15, CGRectGetMinY(followFrame) + 0.35837 * CGRectGetHeight(followFrame)) controlPoint2: CGPointMake(CGRectGetMaxX(followFrame) + 0.15, CGRectGetMinY(followFrame) + 0.64163 * CGRectGetHeight(followFrame))];
                [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(followFrame) - 18.51, CGRectGetMinY(followFrame) + 0.94737 * CGRectGetHeight(followFrame)) controlPoint1: CGPointMake(CGRectGetMaxX(followFrame) - 9.81, CGRectGetMinY(followFrame) + 0.90369 * CGRectGetHeight(followFrame)) controlPoint2: CGPointMake(CGRectGetMaxX(followFrame) - 14.16, CGRectGetMinY(followFrame) + 0.94737 * CGRectGetHeight(followFrame))];
                [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(followFrame) + 18, CGRectGetMinY(followFrame) + 0.94737 * CGRectGetHeight(followFrame))];
                [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(followFrame) + 5.98, CGRectGetMinY(followFrame) + 0.81634 * CGRectGetHeight(followFrame)) controlPoint1: CGPointMake(CGRectGetMinX(followFrame) + 13.65, CGRectGetMinY(followFrame) + 0.94737 * CGRectGetHeight(followFrame)) controlPoint2: CGPointMake(CGRectGetMinX(followFrame) + 9.3, CGRectGetMinY(followFrame) + 0.90369 * CGRectGetHeight(followFrame))];
                [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(followFrame) + 5.98, CGRectGetMinY(followFrame) + 0.18366 * CGRectGetHeight(followFrame)) controlPoint1: CGPointMake(CGRectGetMinX(followFrame) - 0.66, CGRectGetMinY(followFrame) + 0.64163 * CGRectGetHeight(followFrame)) controlPoint2: CGPointMake(CGRectGetMinX(followFrame) - 0.66, CGRectGetMinY(followFrame) + 0.35837 * CGRectGetHeight(followFrame))];
                [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(followFrame) + 18, CGRectGetMinY(followFrame) + 0.05263 * CGRectGetHeight(followFrame)) controlPoint1: CGPointMake(CGRectGetMinX(followFrame) + 9.3, CGRectGetMinY(followFrame) + 0.09631 * CGRectGetHeight(followFrame)) controlPoint2: CGPointMake(CGRectGetMinX(followFrame) + 13.65, CGRectGetMinY(followFrame) + 0.05263 * CGRectGetHeight(followFrame))];
                [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(followFrame) - 18.51, CGRectGetMinY(followFrame) + 0.05263 * CGRectGetHeight(followFrame))];
                [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(followFrame) - 6.49, CGRectGetMinY(followFrame) + 0.18366 * CGRectGetHeight(followFrame)) controlPoint1: CGPointMake(CGRectGetMaxX(followFrame) - 14.16, CGRectGetMinY(followFrame) + 0.05263 * CGRectGetHeight(followFrame)) controlPoint2: CGPointMake(CGRectGetMaxX(followFrame) - 9.81, CGRectGetMinY(followFrame) + 0.09631 * CGRectGetHeight(followFrame))];
                [bezierPath closePath];
                [TungPodcastStyleKit.tungColorMediumLight setFill];
                [bezierPath fill];
                [white setStroke];
                bezierPath.lineWidth = 1;
                [bezierPath stroke];
            }


            if (notOn)
            {
                //// Text off Drawing
                CGRect textOffRect = CGRectMake(CGRectGetMinX(followFrame) + 34.11, CGRectGetMinY(followFrame) + 1.91, CGRectGetWidth(followFrame) - 46.11, 34);
                {
                    NSString* textContent = @"Follow";
                    NSMutableParagraphStyle* textOffStyle = [NSMutableParagraphStyle new];
                    textOffStyle.alignment = NSTextAlignmentCenter;

                    NSDictionary* textOffFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 13], NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: textOffStyle};

                    CGFloat textOffTextHeight = [textContent boundingRectWithSize: CGSizeMake(textOffRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textOffFontAttributes context: nil].size.height;
                    CGContextSaveGState(context);
                    CGContextClipToRect(context, textOffRect);
                    [textContent drawInRect: CGRectMake(CGRectGetMinX(textOffRect), CGRectGetMinY(textOffRect) + (CGRectGetHeight(textOffRect) - textOffTextHeight) / 2, CGRectGetWidth(textOffRect), textOffTextHeight) withAttributes: textOffFontAttributes];
                    CGContextRestoreGState(context);
                }
            }


            //// Oval 2 Drawing
            UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(followFrame) + 3.55, CGRectGetMinY(followFrame) + 4.57, 28.86, 28.86)];
            [white setFill];
            [oval2Path fill];


            //// Symbol 2 Drawing
            CGRect symbol2Rect = CGRectMake(CGRectGetMinX(followFrame) + 4.36, CGRectGetMinY(followFrame) + 5.38, 27.24, 27.24);
            CGContextSaveGState(context);
            UIRectClip(symbol2Rect);
            CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);

            [TungPodcastStyleKit drawAddIconWithFrame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height) color: TungPodcastStyleKit.tungColorMediumLight];
            CGContextRestoreGState(context);
        }
    }


    if (on)
    {
        //// following
        {
            //// Bezier 6 Drawing
            UIBezierPath* bezier6Path = [UIBezierPath bezierPath];
            [bezier6Path moveToPoint: CGPointMake(CGRectGetMaxX(followingFrame) - 6.56, CGRectGetMinY(followingFrame) + 0.18455 * CGRectGetHeight(followingFrame))];
            [bezier6Path addCurveToPoint: CGPointMake(CGRectGetMaxX(followingFrame) - 6.56, CGRectGetMinY(followingFrame) + 0.82030 * CGRectGetHeight(followingFrame)) controlPoint1: CGPointMake(CGRectGetMaxX(followingFrame) + 0.08, CGRectGetMinY(followingFrame) + 0.36011 * CGRectGetHeight(followingFrame)) controlPoint2: CGPointMake(CGRectGetMaxX(followingFrame) + 0.08, CGRectGetMinY(followingFrame) + 0.64474 * CGRectGetHeight(followingFrame))];
            [bezier6Path addCurveToPoint: CGPointMake(CGRectGetMaxX(followingFrame) - 18.58, CGRectGetMinY(followingFrame) + 0.95197 * CGRectGetHeight(followingFrame)) controlPoint1: CGPointMake(CGRectGetMaxX(followingFrame) - 9.88, CGRectGetMinY(followingFrame) + 0.90808 * CGRectGetHeight(followingFrame)) controlPoint2: CGPointMake(CGRectGetMaxX(followingFrame) - 14.23, CGRectGetMinY(followingFrame) + 0.95197 * CGRectGetHeight(followingFrame))];
            [bezier6Path addLineToPoint: CGPointMake(CGRectGetMinX(followingFrame) + 18, CGRectGetMinY(followingFrame) + 0.95197 * CGRectGetHeight(followingFrame))];
            [bezier6Path addCurveToPoint: CGPointMake(CGRectGetMinX(followingFrame) + 5.98, CGRectGetMinY(followingFrame) + 0.82030 * CGRectGetHeight(followingFrame)) controlPoint1: CGPointMake(CGRectGetMinX(followingFrame) + 13.65, CGRectGetMinY(followingFrame) + 0.95197 * CGRectGetHeight(followingFrame)) controlPoint2: CGPointMake(CGRectGetMinX(followingFrame) + 9.3, CGRectGetMinY(followingFrame) + 0.90808 * CGRectGetHeight(followingFrame))];
            [bezier6Path addCurveToPoint: CGPointMake(CGRectGetMinX(followingFrame) + 5.98, CGRectGetMinY(followingFrame) + 0.18455 * CGRectGetHeight(followingFrame)) controlPoint1: CGPointMake(CGRectGetMinX(followingFrame) - 0.66, CGRectGetMinY(followingFrame) + 0.64474 * CGRectGetHeight(followingFrame)) controlPoint2: CGPointMake(CGRectGetMinX(followingFrame) - 0.66, CGRectGetMinY(followingFrame) + 0.36011 * CGRectGetHeight(followingFrame))];
            [bezier6Path addCurveToPoint: CGPointMake(CGRectGetMinX(followingFrame) + 18, CGRectGetMinY(followingFrame) + 0.05289 * CGRectGetHeight(followingFrame)) controlPoint1: CGPointMake(CGRectGetMinX(followingFrame) + 9.3, CGRectGetMinY(followingFrame) + 0.09678 * CGRectGetHeight(followingFrame)) controlPoint2: CGPointMake(CGRectGetMinX(followingFrame) + 13.65, CGRectGetMinY(followingFrame) + 0.05289 * CGRectGetHeight(followingFrame))];
            [bezier6Path addLineToPoint: CGPointMake(CGRectGetMaxX(followingFrame) - 18.58, CGRectGetMinY(followingFrame) + 0.05289 * CGRectGetHeight(followingFrame))];
            [bezier6Path addCurveToPoint: CGPointMake(CGRectGetMaxX(followingFrame) - 6.56, CGRectGetMinY(followingFrame) + 0.18455 * CGRectGetHeight(followingFrame)) controlPoint1: CGPointMake(CGRectGetMaxX(followingFrame) - 14.23, CGRectGetMinY(followingFrame) + 0.05289 * CGRectGetHeight(followingFrame)) controlPoint2: CGPointMake(CGRectGetMaxX(followingFrame) - 9.88, CGRectGetMinY(followingFrame) + 0.09678 * CGRectGetHeight(followingFrame))];
            [bezier6Path closePath];
            [UIColor.whiteColor setFill];
            [bezier6Path fill];


            if (down)
            {
                //// Bezier 5 Drawing
                UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
                [bezier5Path moveToPoint: CGPointMake(CGRectGetMaxX(followingFrame) - 6.56, CGRectGetMinY(followingFrame) + 0.18455 * CGRectGetHeight(followingFrame))];
                [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMaxX(followingFrame) - 6.56, CGRectGetMinY(followingFrame) + 0.82030 * CGRectGetHeight(followingFrame)) controlPoint1: CGPointMake(CGRectGetMaxX(followingFrame) + 0.08, CGRectGetMinY(followingFrame) + 0.36011 * CGRectGetHeight(followingFrame)) controlPoint2: CGPointMake(CGRectGetMaxX(followingFrame) + 0.08, CGRectGetMinY(followingFrame) + 0.64474 * CGRectGetHeight(followingFrame))];
                [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMaxX(followingFrame) - 18.58, CGRectGetMinY(followingFrame) + 0.95197 * CGRectGetHeight(followingFrame)) controlPoint1: CGPointMake(CGRectGetMaxX(followingFrame) - 9.88, CGRectGetMinY(followingFrame) + 0.90808 * CGRectGetHeight(followingFrame)) controlPoint2: CGPointMake(CGRectGetMaxX(followingFrame) - 14.23, CGRectGetMinY(followingFrame) + 0.95197 * CGRectGetHeight(followingFrame))];
                [bezier5Path addLineToPoint: CGPointMake(CGRectGetMinX(followingFrame) + 18, CGRectGetMinY(followingFrame) + 0.95197 * CGRectGetHeight(followingFrame))];
                [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(followingFrame) + 5.98, CGRectGetMinY(followingFrame) + 0.82030 * CGRectGetHeight(followingFrame)) controlPoint1: CGPointMake(CGRectGetMinX(followingFrame) + 13.65, CGRectGetMinY(followingFrame) + 0.95197 * CGRectGetHeight(followingFrame)) controlPoint2: CGPointMake(CGRectGetMinX(followingFrame) + 9.3, CGRectGetMinY(followingFrame) + 0.90808 * CGRectGetHeight(followingFrame))];
                [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(followingFrame) + 5.98, CGRectGetMinY(followingFrame) + 0.18455 * CGRectGetHeight(followingFrame)) controlPoint1: CGPointMake(CGRectGetMinX(followingFrame) - 0.66, CGRectGetMinY(followingFrame) + 0.64474 * CGRectGetHeight(followingFrame)) controlPoint2: CGPointMake(CGRectGetMinX(followingFrame) - 0.66, CGRectGetMinY(followingFrame) + 0.36011 * CGRectGetHeight(followingFrame))];
                [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMinX(followingFrame) + 18, CGRectGetMinY(followingFrame) + 0.05289 * CGRectGetHeight(followingFrame)) controlPoint1: CGPointMake(CGRectGetMinX(followingFrame) + 9.3, CGRectGetMinY(followingFrame) + 0.09678 * CGRectGetHeight(followingFrame)) controlPoint2: CGPointMake(CGRectGetMinX(followingFrame) + 13.65, CGRectGetMinY(followingFrame) + 0.05289 * CGRectGetHeight(followingFrame))];
                [bezier5Path addLineToPoint: CGPointMake(CGRectGetMaxX(followingFrame) - 18.58, CGRectGetMinY(followingFrame) + 0.05289 * CGRectGetHeight(followingFrame))];
                [bezier5Path addCurveToPoint: CGPointMake(CGRectGetMaxX(followingFrame) - 6.56, CGRectGetMinY(followingFrame) + 0.18455 * CGRectGetHeight(followingFrame)) controlPoint1: CGPointMake(CGRectGetMaxX(followingFrame) - 14.23, CGRectGetMinY(followingFrame) + 0.05289 * CGRectGetHeight(followingFrame)) controlPoint2: CGPointMake(CGRectGetMaxX(followingFrame) - 9.88, CGRectGetMinY(followingFrame) + 0.09678 * CGRectGetHeight(followingFrame))];
                [bezier5Path closePath];
                [black15Alpha setFill];
                [bezier5Path fill];
            }


            //// Bezier 4 Drawing
            UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
            [bezier4Path moveToPoint: CGPointMake(CGRectGetMaxX(followingFrame) - 6.56, CGRectGetMinY(followingFrame) + 0.18455 * CGRectGetHeight(followingFrame))];
            [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMaxX(followingFrame) - 6.56, CGRectGetMinY(followingFrame) + 0.82030 * CGRectGetHeight(followingFrame)) controlPoint1: CGPointMake(CGRectGetMaxX(followingFrame) + 0.08, CGRectGetMinY(followingFrame) + 0.36011 * CGRectGetHeight(followingFrame)) controlPoint2: CGPointMake(CGRectGetMaxX(followingFrame) + 0.08, CGRectGetMinY(followingFrame) + 0.64474 * CGRectGetHeight(followingFrame))];
            [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMaxX(followingFrame) - 18.58, CGRectGetMinY(followingFrame) + 0.95197 * CGRectGetHeight(followingFrame)) controlPoint1: CGPointMake(CGRectGetMaxX(followingFrame) - 9.88, CGRectGetMinY(followingFrame) + 0.90808 * CGRectGetHeight(followingFrame)) controlPoint2: CGPointMake(CGRectGetMaxX(followingFrame) - 14.23, CGRectGetMinY(followingFrame) + 0.95197 * CGRectGetHeight(followingFrame))];
            [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(followingFrame) + 18, CGRectGetMinY(followingFrame) + 0.95197 * CGRectGetHeight(followingFrame))];
            [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(followingFrame) + 5.98, CGRectGetMinY(followingFrame) + 0.82030 * CGRectGetHeight(followingFrame)) controlPoint1: CGPointMake(CGRectGetMinX(followingFrame) + 13.65, CGRectGetMinY(followingFrame) + 0.95197 * CGRectGetHeight(followingFrame)) controlPoint2: CGPointMake(CGRectGetMinX(followingFrame) + 9.3, CGRectGetMinY(followingFrame) + 0.90808 * CGRectGetHeight(followingFrame))];
            [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(followingFrame) + 5.98, CGRectGetMinY(followingFrame) + 0.18455 * CGRectGetHeight(followingFrame)) controlPoint1: CGPointMake(CGRectGetMinX(followingFrame) - 0.66, CGRectGetMinY(followingFrame) + 0.64474 * CGRectGetHeight(followingFrame)) controlPoint2: CGPointMake(CGRectGetMinX(followingFrame) - 0.66, CGRectGetMinY(followingFrame) + 0.36011 * CGRectGetHeight(followingFrame))];
            [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(followingFrame) + 18, CGRectGetMinY(followingFrame) + 0.05289 * CGRectGetHeight(followingFrame)) controlPoint1: CGPointMake(CGRectGetMinX(followingFrame) + 9.3, CGRectGetMinY(followingFrame) + 0.09678 * CGRectGetHeight(followingFrame)) controlPoint2: CGPointMake(CGRectGetMinX(followingFrame) + 13.65, CGRectGetMinY(followingFrame) + 0.05289 * CGRectGetHeight(followingFrame))];
            [bezier4Path addLineToPoint: CGPointMake(CGRectGetMaxX(followingFrame) - 18.58, CGRectGetMinY(followingFrame) + 0.05289 * CGRectGetHeight(followingFrame))];
            [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMaxX(followingFrame) - 6.56, CGRectGetMinY(followingFrame) + 0.18455 * CGRectGetHeight(followingFrame)) controlPoint1: CGPointMake(CGRectGetMaxX(followingFrame) - 14.23, CGRectGetMinY(followingFrame) + 0.05289 * CGRectGetHeight(followingFrame)) controlPoint2: CGPointMake(CGRectGetMaxX(followingFrame) - 9.88, CGRectGetMinY(followingFrame) + 0.09678 * CGRectGetHeight(followingFrame))];
            [bezier4Path closePath];
            [TungPodcastStyleKit.tungColorMediumLight setStroke];
            bezier4Path.lineWidth = 1;
            [bezier4Path stroke];


            //// Text on Drawing
            CGRect textOnRect = CGRectMake(CGRectGetMinX(followingFrame) + 31.47, CGRectGetMinY(followingFrame) + 1.91, CGRectGetWidth(followingFrame) - 38.47, CGRectGetHeight(followingFrame) - 4);
            {
                NSString* textContent = @"Following";
                NSMutableParagraphStyle* textOnStyle = [NSMutableParagraphStyle new];
                textOnStyle.alignment = NSTextAlignmentCenter;

                NSDictionary* textOnFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: UIFont.smallSystemFontSize], NSForegroundColorAttributeName: TungPodcastStyleKit.tungColorMediumLight, NSParagraphStyleAttributeName: textOnStyle};

                CGFloat textOnTextHeight = [textContent boundingRectWithSize: CGSizeMake(textOnRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textOnFontAttributes context: nil].size.height;
                CGContextSaveGState(context);
                CGContextClipToRect(context, textOnRect);
                [textContent drawInRect: CGRectMake(CGRectGetMinX(textOnRect), CGRectGetMinY(textOnRect) + (CGRectGetHeight(textOnRect) - textOnTextHeight) / 2, CGRectGetWidth(textOnRect), textOnTextHeight) withAttributes: textOnFontAttributes];
                CGContextRestoreGState(context);
            }


            //// Oval Drawing
            UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(followingFrame) + 3.42, CGRectGetMinY(followingFrame) + 4.57, 28.86, 28.86)];
            [TungPodcastStyleKit.tungColorMediumLight setStroke];
            ovalPath.lineWidth = 1;
            [ovalPath stroke];


            //// Symbol Drawing
            CGRect symbolRect = CGRectMake(CGRectGetMinX(followingFrame) + 4.23, CGRectGetMinY(followingFrame) + 5.38, 27.24, 27.24);
            CGContextSaveGState(context);
            UIRectClip(symbolRect);
            CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

            [TungPodcastStyleKit drawCheckmarkIconWithFrame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height) color: TungPodcastStyleKit.green];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawPillButtonOnDarkWithFrame: (CGRect)frame down: (BOOL)down buttonText: (NSString*)buttonText
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notDown = !down;

    if (notDown)
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMaxX(frame) - 6.49, CGRectGetMinY(frame) + 0.18455 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 6.49, CGRectGetMinY(frame) + 0.82030 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame) + 0.15, CGRectGetMinY(frame) + 0.36011 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame) + 0.15, CGRectGetMinY(frame) + 0.64474 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 18.51, CGRectGetMinY(frame) + 0.95197 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 9.81, CGRectGetMinY(frame) + 0.90808 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 14.16, CGRectGetMinY(frame) + 0.95197 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 18, CGRectGetMinY(frame) + 0.95197 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 5.98, CGRectGetMinY(frame) + 0.82030 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 13.65, CGRectGetMinY(frame) + 0.95197 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 9.3, CGRectGetMinY(frame) + 0.90808 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 5.98, CGRectGetMinY(frame) + 0.18455 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) - 0.66, CGRectGetMinY(frame) + 0.64474 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) - 0.66, CGRectGetMinY(frame) + 0.36011 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 18, CGRectGetMinY(frame) + 0.05289 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 9.3, CGRectGetMinY(frame) + 0.09678 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 13.65, CGRectGetMinY(frame) + 0.05289 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 18.51, CGRectGetMinY(frame) + 0.05289 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 6.49, CGRectGetMinY(frame) + 0.18455 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 14.16, CGRectGetMinY(frame) + 0.05289 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 9.81, CGRectGetMinY(frame) + 0.09678 * CGRectGetHeight(frame))];
        [bezierPath closePath];
        [TungPodcastStyleKit.tungColorMediumLight setFill];
        [bezierPath fill];
        [white setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];
    }


    if (down)
    {
        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMaxX(frame) - 6.49, CGRectGetMinY(frame) + 0.18455 * CGRectGetHeight(frame))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 6.49, CGRectGetMinY(frame) + 0.82030 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame) + 0.15, CGRectGetMinY(frame) + 0.36011 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame) + 0.15, CGRectGetMinY(frame) + 0.64474 * CGRectGetHeight(frame))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 18.51, CGRectGetMinY(frame) + 0.95197 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 9.81, CGRectGetMinY(frame) + 0.90808 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 14.16, CGRectGetMinY(frame) + 0.95197 * CGRectGetHeight(frame))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 18, CGRectGetMinY(frame) + 0.95197 * CGRectGetHeight(frame))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 5.98, CGRectGetMinY(frame) + 0.82030 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 13.65, CGRectGetMinY(frame) + 0.95197 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 9.3, CGRectGetMinY(frame) + 0.90808 * CGRectGetHeight(frame))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 5.98, CGRectGetMinY(frame) + 0.18455 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) - 0.66, CGRectGetMinY(frame) + 0.64474 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) - 0.66, CGRectGetMinY(frame) + 0.36011 * CGRectGetHeight(frame))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 18, CGRectGetMinY(frame) + 0.05289 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 9.3, CGRectGetMinY(frame) + 0.09678 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 13.65, CGRectGetMinY(frame) + 0.05289 * CGRectGetHeight(frame))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 18.51, CGRectGetMinY(frame) + 0.05289 * CGRectGetHeight(frame))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 6.49, CGRectGetMinY(frame) + 0.18455 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 14.16, CGRectGetMinY(frame) + 0.05289 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 9.81, CGRectGetMinY(frame) + 0.09678 * CGRectGetHeight(frame))];
        [bezier2Path closePath];
        [black25Alpha setFill];
        [bezier2Path fill];
        [white setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];
    }


    //// Text on Drawing
    CGRect textOnRect = CGRectMake(CGRectGetMinX(frame) + floor((CGRectGetWidth(frame) - 84) * 0.50000 + 0.5), CGRectGetMinY(frame) + floor((CGRectGetHeight(frame) - 34) * 0.52405 - 0.32) + 0.82, 84, 34);
    NSMutableParagraphStyle* textOnStyle = [NSMutableParagraphStyle new];
    textOnStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* textOnFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 15], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textOnStyle};

    CGFloat textOnTextHeight = [buttonText boundingRectWithSize: CGSizeMake(textOnRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textOnFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textOnRect);
    [buttonText drawInRect: CGRectMake(CGRectGetMinX(textOnRect), CGRectGetMinY(textOnRect) + (CGRectGetHeight(textOnRect) - textOnTextHeight) / 2, CGRectGetWidth(textOnRect), textOnTextHeight) withAttributes: textOnFontAttributes];
    CGContextRestoreGState(context);
}

+ (void)drawPlayButtonWithFrame: (CGRect)frame color: (UIColor*)color on: (BOOL)on down: (BOOL)down
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.25];
    UIColor* black10Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.098];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notOn = !on;
    BOOL notDown = !down;

    if (on)
    {
        //// Group
        {
            if (on)
            {
                //// Bezier 3 Drawing
                UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
                [bezier3Path moveToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.42, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
                [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 20.41, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
                [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame), CGRectGetMinY(frame) + 0.33065 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 9.14, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame), CGRectGetMinY(frame) + 0.14804 * CGRectGetHeight(frame))];
                [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 20.41, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame), CGRectGetMinY(frame) + 0.51323 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 9.14, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame))];
                [bezier3Path addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.42, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame))];
                [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMaxX(frame), CGRectGetMinY(frame) + 0.33065 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 9.14, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame), CGRectGetMinY(frame) + 0.51323 * CGRectGetHeight(frame))];
                [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.42, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame), CGRectGetMinY(frame) + 0.14804 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 9.14, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
                [bezier3Path closePath];
                [UIColor.whiteColor setFill];
                [bezier3Path fill];
            }


            if (down)
            {
                //// Bezier 4 Drawing
                UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
                [bezier4Path moveToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.42, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
                [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 20.41, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
                [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame), CGRectGetMinY(frame) + 0.33065 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 9.14, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame), CGRectGetMinY(frame) + 0.14804 * CGRectGetHeight(frame))];
                [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 20.41, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame), CGRectGetMinY(frame) + 0.51323 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 9.14, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame))];
                [bezier4Path addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.42, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame))];
                [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMaxX(frame), CGRectGetMinY(frame) + 0.33065 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 9.14, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame), CGRectGetMinY(frame) + 0.51323 * CGRectGetHeight(frame))];
                [bezier4Path addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.42, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame), CGRectGetMinY(frame) + 0.14804 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 9.14, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
                [bezier4Path closePath];
                [black10Alpha setFill];
                [bezier4Path fill];
            }


            if (on)
            {
                //// Text Drawing
                CGRect textRect = CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame) + 7.55, 86.02, 24.77);
                {
                    NSString* textContent = @"Playing";
                    NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
                    textStyle.alignment = NSTextAlignmentCenter;

                    NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: UIFont.systemFontSize], NSForegroundColorAttributeName: color, NSParagraphStyleAttributeName: textStyle};

                    CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
                    CGContextSaveGState(context);
                    CGContextClipToRect(context, textRect);
                    [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
                    CGContextRestoreGState(context);
                }
            }
        }
    }


    if (notOn)
    {
        //// Group 2
        {
            if (down)
            {
                //// Bezier 2 Drawing
                UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
                [bezier2Path moveToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.42, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
                [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 20.41, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
                [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame), CGRectGetMinY(frame) + 0.33065 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 9.14, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame), CGRectGetMinY(frame) + 0.14804 * CGRectGetHeight(frame))];
                [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 20.41, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame), CGRectGetMinY(frame) + 0.51323 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 9.14, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame))];
                [bezier2Path addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.42, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame))];
                [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMaxX(frame), CGRectGetMinY(frame) + 0.33065 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 9.14, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame), CGRectGetMinY(frame) + 0.51323 * CGRectGetHeight(frame))];
                [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.42, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame), CGRectGetMinY(frame) + 0.14804 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 9.14, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
                [bezier2Path closePath];
                [black25Alpha setFill];
                [bezier2Path fill];
            }


            if (notDown)
            {
                //// Bezier Drawing
                UIBezierPath* bezierPath = [UIBezierPath bezierPath];
                [bezierPath moveToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.42, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
                [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 20.41, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
                [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame), CGRectGetMinY(frame) + 0.33065 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 9.14, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame), CGRectGetMinY(frame) + 0.14804 * CGRectGetHeight(frame))];
                [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 20.41, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame), CGRectGetMinY(frame) + 0.51323 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 9.14, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame))];
                [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.42, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame))];
                [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame), CGRectGetMinY(frame) + 0.33065 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 9.14, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame), CGRectGetMinY(frame) + 0.51323 * CGRectGetHeight(frame))];
                [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.42, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame), CGRectGetMinY(frame) + 0.14804 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 9.14, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
                [bezierPath closePath];
                [black15Alpha setFill];
                [bezierPath fill];
            }


            if (notOn)
            {
                //// Symbol Drawing
                CGRect symbolRect = CGRectMake(CGRectGetMinX(frame) + 25.58, CGRectGetMinY(frame) + 3.06, 34.87, 34.87);
                CGContextSaveGState(context);
                UIRectClip(symbolRect);
                CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);
                CGContextScaleCTM(context, symbolRect.size.width / 40, symbolRect.size.height / 40);

                [TungPodcastStyleKit drawPlayIconWithColor: white];
                CGContextRestoreGState(context);


                //// Text 2 Drawing
                CGRect text2Rect = CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame) + 41, 86, 21);
                {
                    NSString* textContent = @"Play";
                    NSMutableParagraphStyle* text2Style = [NSMutableParagraphStyle new];
                    text2Style.alignment = NSTextAlignmentCenter;

                    NSDictionary* text2FontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 11], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: text2Style};

                    CGFloat text2TextHeight = [textContent boundingRectWithSize: CGSizeMake(text2Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: text2FontAttributes context: nil].size.height;
                    CGContextSaveGState(context);
                    CGContextClipToRect(context, text2Rect);
                    [textContent drawInRect: CGRectMake(CGRectGetMinX(text2Rect), CGRectGetMinY(text2Rect) + (CGRectGetHeight(text2Rect) - text2TextHeight) / 2, CGRectGetWidth(text2Rect), text2TextHeight) withAttributes: text2FontAttributes];
                    CGContextRestoreGState(context);
                }
            }
        }
    }
}

+ (void)drawSignUpWithTwitterWithFrame: (CGRect)frame down: (BOOL)down
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* twitter20 = [TungPodcastStyleKit.twitterBlue colorWithAlphaComponent: 0.2];

    //// Variable Declarations
    BOOL notDown = !down;

    if (down)
    {
        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.94993 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.15625 * CGRectGetHeight(frame))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.94993 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.84372 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 1.01068 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.34609 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 1.01068 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.65388 * CGRectGetHeight(frame))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.83992 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.98610 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.91955 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.93864 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.87973 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.98610 * CGRectGetHeight(frame))];
        [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.16008 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.98610 * CGRectGetHeight(frame))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.05007 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.84372 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.12027 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.98610 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.08045 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.93864 * CGRectGetHeight(frame))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.05007 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.15625 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + -0.01068 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.65388 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + -0.01068 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.34609 * CGRectGetHeight(frame))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.16008 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.01388 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.08045 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.06133 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.12027 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.01388 * CGRectGetHeight(frame))];
        [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.83992 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.01388 * CGRectGetHeight(frame))];
        [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.94993 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.15625 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.87973 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.01388 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.91955 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.06133 * CGRectGetHeight(frame))];
        [bezier3Path closePath];
        [twitter20 setFill];
        [bezier3Path fill];
        [TungPodcastStyleKit.twitterBlue setStroke];
        bezier3Path.lineWidth = 1;
        [bezier3Path stroke];
    }


    if (notDown)
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMaxX(frame) - 11.12, CGRectGetMinY(frame) + 0.15625 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 11.12, CGRectGetMinY(frame) + 0.84372 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame) + 2.37, CGRectGetMinY(frame) + 0.34609 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame) + 2.37, CGRectGetMinY(frame) + 0.65388 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 35.54, CGRectGetMinY(frame) + 0.98610 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 17.86, CGRectGetMinY(frame) + 0.93864 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 26.7, CGRectGetMinY(frame) + 0.98610 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 35.54, CGRectGetMinY(frame) + 0.98610 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 11.12, CGRectGetMinY(frame) + 0.84372 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 26.7, CGRectGetMinY(frame) + 0.98610 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 17.86, CGRectGetMinY(frame) + 0.93864 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 11.12, CGRectGetMinY(frame) + 0.15625 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) - 2.37, CGRectGetMinY(frame) + 0.65388 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) - 2.37, CGRectGetMinY(frame) + 0.34609 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 35.54, CGRectGetMinY(frame) + 0.01388 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 17.86, CGRectGetMinY(frame) + 0.06133 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 26.7, CGRectGetMinY(frame) + 0.01388 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 35.54, CGRectGetMinY(frame) + 0.01388 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 11.12, CGRectGetMinY(frame) + 0.15625 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 26.7, CGRectGetMinY(frame) + 0.01388 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 17.86, CGRectGetMinY(frame) + 0.06133 * CGRectGetHeight(frame))];
        [bezierPath closePath];
        [UIColor.whiteColor setFill];
        [bezierPath fill];
        [TungPodcastStyleKit.twitterBlue setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];
    }


    //// Text Drawing
    CGRect textRect = CGRectMake(CGRectGetMinX(frame) + floor((CGRectGetWidth(frame) - 150) * 0.80226 - 0.09) + 0.59, CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.23173 + 0.18) + 0.32, 150, floor(CGRectGetHeight(frame) * 0.75950 + 0.18) - floor(CGRectGetHeight(frame) * 0.23173 + 0.18));
    {
        NSString* textContent = @"sign-in or sign-up";
        NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
        textStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: UIFont.labelFontSize], NSForegroundColorAttributeName: TungPodcastStyleKit.twitterBlue, NSParagraphStyleAttributeName: textStyle};

        CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, textRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
        CGContextRestoreGState(context);
    }


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame) + 5.59, CGRectGetMinY(frame) + 4.68, 61, 62)];
    [TungPodcastStyleKit.twitterBlue setFill];
    [ovalPath fill];


    //// Symbol Drawing
    CGRect symbolRect = CGRectMake(CGRectGetMinX(frame) + 17, CGRectGetMinY(frame) + 16.93, 39, 40);
    CGContextSaveGState(context);
    UIRectClip(symbolRect);
    CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

    [TungPodcastStyleKit drawTwitterIconWithFrame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height) color: white];
    CGContextRestoreGState(context);
}

+ (void)drawSignUpWithFacebookWithFrame: (CGRect)frame down: (BOOL)down
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* facebook20 = [TungPodcastStyleKit.facebookBlue colorWithAlphaComponent: 0.2];

    //// Variable Declarations
    BOOL notDown = !down;

    if (down)
    {
        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.94993 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.15627 * CGRectGetHeight(frame))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.94993 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.84373 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 1.01068 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.34611 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 1.01068 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.65389 * CGRectGetHeight(frame))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.83992 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.98611 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.91955 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.93865 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.87973 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.98611 * CGRectGetHeight(frame))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.16008 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.98611 * CGRectGetHeight(frame))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.05007 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.84373 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.12027 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.98611 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.08045 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.93865 * CGRectGetHeight(frame))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.05007 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.15627 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + -0.01068 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.65389 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + -0.01068 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.34611 * CGRectGetHeight(frame))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.16008 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.01389 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.08045 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.06135 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.12027 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.01389 * CGRectGetHeight(frame))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.83992 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.01389 * CGRectGetHeight(frame))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.94993 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.15627 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.87973 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.01389 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.91955 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.06135 * CGRectGetHeight(frame))];
        [bezier2Path closePath];
        [facebook20 setFill];
        [bezier2Path fill];
        [TungPodcastStyleKit.facebookBlue setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];
    }


    if (notDown)
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMaxX(frame) - 11.12, CGRectGetMinY(frame) + 0.15627 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 11.12, CGRectGetMinY(frame) + 0.84373 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame) + 2.37, CGRectGetMinY(frame) + 0.34611 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame) + 2.37, CGRectGetMinY(frame) + 0.65389 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 35.54, CGRectGetMinY(frame) + 0.98611 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 17.86, CGRectGetMinY(frame) + 0.93865 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 26.7, CGRectGetMinY(frame) + 0.98611 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 35.54, CGRectGetMinY(frame) + 0.98611 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 11.11, CGRectGetMinY(frame) + 0.84373 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 26.7, CGRectGetMinY(frame) + 0.98611 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 17.86, CGRectGetMinY(frame) + 0.93865 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 11.11, CGRectGetMinY(frame) + 0.15627 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) - 2.37, CGRectGetMinY(frame) + 0.65389 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) - 2.37, CGRectGetMinY(frame) + 0.34611 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 35.54, CGRectGetMinY(frame) + 0.01389 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 17.86, CGRectGetMinY(frame) + 0.06135 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 26.7, CGRectGetMinY(frame) + 0.01389 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 35.54, CGRectGetMinY(frame) + 0.01389 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 11.12, CGRectGetMinY(frame) + 0.15627 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 26.7, CGRectGetMinY(frame) + 0.01389 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 17.86, CGRectGetMinY(frame) + 0.06135 * CGRectGetHeight(frame))];
        [bezierPath closePath];
        [UIColor.whiteColor setFill];
        [bezierPath fill];
        [TungPodcastStyleKit.facebookBlue setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];
    }


    //// Text Drawing
    CGRect textRect = CGRectMake(CGRectGetMinX(frame) + floor((CGRectGetWidth(frame) - 150) * 0.80416 - 0.09) + 0.59, CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.23794 - 0.37) + 0.87, 150, floor(CGRectGetHeight(frame) * 0.76572 - 0.37) - floor(CGRectGetHeight(frame) * 0.23794 - 0.37));
    {
        NSString* textContent = @"sign-in or sign-up";
        NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
        textStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: UIFont.labelFontSize], NSForegroundColorAttributeName: TungPodcastStyleKit.facebookBlue, NSParagraphStyleAttributeName: textStyle};

        CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, textRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
        CGContextRestoreGState(context);
    }


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame) + 5.59, CGRectGetMinY(frame) + 5.13, 62, 62)];
    [TungPodcastStyleKit.facebookBlue setFill];
    [ovalPath fill];


    //// Symbol Drawing
    CGRect symbolRect = CGRectMake(CGRectGetMinX(frame) + 15, CGRectGetMinY(frame) + 16.38, 40, 40);
    CGContextSaveGState(context);
    UIRectClip(symbolRect);
    CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

    [TungPodcastStyleKit drawFacebookIconWithFrame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height) color: white];
    CGContextRestoreGState(context);
}

+ (void)drawSupportButtonWithFrame: (CGRect)frame down: (BOOL)down
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.25];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notDown = !down;

    if (down)
    {
        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.44, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 20.39, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezier2Path addCurveToPoint: CGPointMake(-0.02, 20.5) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 9.12, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(-0.02, 9.18)];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 20.39, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(-0.02, 31.82) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 9.12, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.44, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 0.02, CGRectGetMinY(frame) + 0.33065 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 9.16, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 0.02, CGRectGetMinY(frame) + 0.51323 * CGRectGetHeight(frame))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.44, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 0.02, CGRectGetMinY(frame) + 0.14804 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 9.16, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezier2Path closePath];
        [black25Alpha setFill];
        [bezier2Path fill];
    }


    if (notDown)
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.42, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 20.41, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame), CGRectGetMinY(frame) + 0.33065 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 9.14, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame), CGRectGetMinY(frame) + 0.14804 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 20.41, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame), CGRectGetMinY(frame) + 0.51323 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 9.14, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.42, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame), CGRectGetMinY(frame) + 0.33065 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 9.14, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame), CGRectGetMinY(frame) + 0.51323 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.42, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame), CGRectGetMinY(frame) + 0.14804 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 9.14, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezierPath closePath];
        [black15Alpha setFill];
        [bezierPath fill];
    }


    //// Symbol Drawing
    CGRect symbolRect = CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.28494 - 0.01) + 0.51, CGRectGetMinY(frame) + 2, floor(CGRectGetWidth(frame) * 0.71506 - 0.01) - floor(CGRectGetWidth(frame) * 0.28494 - 0.01), CGRectGetHeight(frame) - 25);
    CGContextSaveGState(context);
    UIRectClip(symbolRect);
    CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

    [TungPodcastStyleKit drawDonateIconWithFrame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height) color: white];
    CGContextRestoreGState(context);


    //// Text 2 Drawing
    CGRect text2Rect = CGRectMake(CGRectGetMinX(frame) + floor((CGRectGetWidth(frame) - 86) * 0.00000 + 0.5), CGRectGetMinY(frame) + floor((CGRectGetHeight(frame) - 21) * 1.00000 + 0.5), 86, 21);
    {
        NSString* textContent = @"Support";
        NSMutableParagraphStyle* text2Style = [NSMutableParagraphStyle new];
        text2Style.alignment = NSTextAlignmentCenter;

        NSDictionary* text2FontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 11], NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text2Style};

        CGFloat text2TextHeight = [textContent boundingRectWithSize: CGSizeMake(text2Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: text2FontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, text2Rect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(text2Rect), CGRectGetMinY(text2Rect) + (CGRectGetHeight(text2Rect) - text2TextHeight) / 2, CGRectGetWidth(text2Rect), text2TextHeight) withAttributes: text2FontAttributes];
        CGContextRestoreGState(context);
    }
}

+ (void)drawSaveWithProgressWithFrame: (CGRect)frame on: (BOOL)on arc: (CGFloat)arc queued: (BOOL)queued
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];

    //// Variable Declarations
    BOOL notOn = !on;
    BOOL notQueued = !queued;

    if (on)
    {
        //// Group 2
        {
            //// Oval 2 Drawing
            UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), 30, 30)];
            [TungPodcastStyleKit.tungColor setFill];
            [oval2Path fill];


            //// downloaded Drawing
            CGRect downloadedRect = CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame) - 1, 30, 30);
            CGContextSaveGState(context);
            UIRectClip(downloadedRect);
            CGContextTranslateCTM(context, downloadedRect.origin.x, downloadedRect.origin.y);

            [TungPodcastStyleKit drawSaveIconWithFrame: CGRectMake(0, 0, downloadedRect.size.width, downloadedRect.size.height) color: white];
            CGContextRestoreGState(context);
        }
    }


    if (notOn)
    {
        //// Group
        {
            //// Oval Drawing
            CGContextSaveGState(context);
            CGContextTranslateCTM(context, 15, 15);
            CGContextRotateCTM(context, -90 * M_PI / 180);

            CGRect ovalRect = CGRectMake(-14.5, -14.5, 29, 29);
            UIBezierPath* ovalPath = [UIBezierPath bezierPath];
            [ovalPath addArcWithCenter: CGPointMake(CGRectGetMidX(ovalRect), CGRectGetMidY(ovalRect)) radius: CGRectGetWidth(ovalRect) / 2 startAngle: 0 * M_PI/180 endAngle: -arc * M_PI/180 clockwise: YES];

            [TungPodcastStyleKit.tungColor setStroke];
            ovalPath.lineWidth = 1;
            [ovalPath stroke];

            CGContextRestoreGState(context);


            if (notQueued)
            {
                //// download Drawing
                CGRect downloadRect = CGRectMake(0, -1, 30, 30);
                CGContextSaveGState(context);
                UIRectClip(downloadRect);
                CGContextTranslateCTM(context, downloadRect.origin.x, downloadRect.origin.y);

                [TungPodcastStyleKit drawSaveIconWithFrame: CGRectMake(0, 0, downloadRect.size.width, downloadRect.size.height) color: TungPodcastStyleKit.tungColor];
                CGContextRestoreGState(context);
            }


            if (queued)
            {
                //// cancel Drawing
                CGRect cancelRect = CGRectMake(0, 0, 30, 30);
                CGContextSaveGState(context);
                UIRectClip(cancelRect);
                CGContextTranslateCTM(context, cancelRect.origin.x, cancelRect.origin.y);

                [TungPodcastStyleKit drawCancelIconWithFrame: CGRectMake(0, 0, cancelRect.size.width, cancelRect.size.height) color: TungPodcastStyleKit.tungColor];
                CGContextRestoreGState(context);
            }
        }
    }
}

+ (void)drawMagicButtonWithFrame: (CGRect)frame down: (BOOL)down buttonText: (NSString*)buttonText subtitle: (NSString*)subtitle
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* black15Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.25];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notDown = !down;

    if (down)
    {
        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.44, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 20.39, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezier2Path addCurveToPoint: CGPointMake(-0.02, 20.5) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 9.12, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(-0.02, 9.18)];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 20.39, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(-0.02, 31.82) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 9.12, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame))];
        [bezier2Path addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.44, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 0.02, CGRectGetMinY(frame) + 0.33065 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 9.16, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 0.02, CGRectGetMinY(frame) + 0.51323 * CGRectGetHeight(frame))];
        [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.44, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 0.02, CGRectGetMinY(frame) + 0.14804 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 9.16, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezier2Path closePath];
        [black25Alpha setFill];
        [bezier2Path fill];
    }


    if (notDown)
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.42, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 20.41, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame), CGRectGetMinY(frame) + 0.33065 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 9.14, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame), CGRectGetMinY(frame) + 0.14804 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 20.41, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame), CGRectGetMinY(frame) + 0.51323 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 9.14, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame))];
        [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.42, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame), CGRectGetMinY(frame) + 0.33065 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 9.14, CGRectGetMinY(frame) + 0.66129 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame), CGRectGetMinY(frame) + 0.51323 * CGRectGetHeight(frame))];
        [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.42, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame), CGRectGetMinY(frame) + 0.14804 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 9.14, CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
        [bezierPath closePath];
        [black15Alpha setFill];
        [bezierPath fill];
    }


    //// Magic Drawing
    CGRect magicRect = CGRectMake(CGRectGetMinX(frame) + floor((CGRectGetWidth(frame) - 86) * 0.00000 + 0.5), CGRectGetMinY(frame) + floor((CGRectGetHeight(frame) - 21) * 1.00000 + 0.5), 86, 21);
    NSMutableParagraphStyle* magicStyle = [NSMutableParagraphStyle new];
    magicStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* magicFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 11], NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: magicStyle};

    CGFloat magicTextHeight = [subtitle boundingRectWithSize: CGSizeMake(magicRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: magicFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, magicRect);
    [subtitle drawInRect: CGRectMake(CGRectGetMinX(magicRect), CGRectGetMinY(magicRect) + (CGRectGetHeight(magicRect) - magicTextHeight) / 2, CGRectGetWidth(magicRect), magicTextHeight) withAttributes: magicFontAttributes];
    CGContextRestoreGState(context);


    //// Text Drawing
    CGRect textRect = CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), 86, 41);
    NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
    textStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 23], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: textStyle};

    CGFloat textTextHeight = [buttonText boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textRect);
    [buttonText drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
    CGContextRestoreGState(context);
}

+ (void)drawShareButtonOnDarkWithFrame: (CGRect)frame down: (BOOL)down
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* black25Alpha = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.251];

    //// Variable Declarations
    BOOL notDown = !down;

    if (down)
    {
        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame) + 2, CGRectGetMinY(frame) + 2, CGRectGetWidth(frame) - 4, CGRectGetHeight(frame) - 4)];
        [black25Alpha setFill];
        [oval2Path fill];
        [white setStroke];
        oval2Path.lineWidth = 1;
        [oval2Path stroke];
    }


    if (notDown)
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame) + 2, CGRectGetMinY(frame) + 2, CGRectGetWidth(frame) - 4, CGRectGetHeight(frame) - 4)];
        [TungPodcastStyleKit.tungColorMediumLight setFill];
        [ovalPath fill];
        [white setStroke];
        ovalPath.lineWidth = 1;
        [ovalPath stroke];
    }


    //// Symbol Drawing
    CGRect symbolRect = CGRectMake(CGRectGetMinX(frame) + 1, CGRectGetMinY(frame) + 1, CGRectGetWidth(frame) - 2, CGRectGetHeight(frame) - 2);
    CGContextSaveGState(context);
    UIRectClip(symbolRect);
    CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

    [TungPodcastStyleKit drawShareIconWithFrame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height) color: white];
    CGContextRestoreGState(context);
}

+ (void)drawClipProgressWithFrame: (CGRect)frame buttonText: (NSString*)buttonText arc: (CGFloat)arc
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* white50 = [white colorWithAlphaComponent: 0.5];

    //// Oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, CGRectGetMinX(frame) + 20, CGRectGetMinY(frame) + 20);
    CGContextRotateCTM(context, -90 * M_PI / 180);

    CGRect ovalRect = CGRectMake(-19.5, -19.5, 39, 39);
    UIBezierPath* ovalPath = [UIBezierPath bezierPath];
    [ovalPath addArcWithCenter: CGPointMake(CGRectGetMidX(ovalRect), CGRectGetMidY(ovalRect)) radius: CGRectGetWidth(ovalRect) / 2 startAngle: 0 * M_PI/180 endAngle: -arc * M_PI/180 clockwise: YES];

    [white setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];

    CGContextRestoreGState(context);


    //// Text Drawing
    CGRect textRect = CGRectMake(CGRectGetMinX(frame) + 1.5, CGRectGetMinY(frame) + 9, 39, 21.13);
    NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
    textStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 21], NSForegroundColorAttributeName: white50, NSParagraphStyleAttributeName: textStyle};

    CGFloat textTextHeight = [buttonText boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textRect);
    [buttonText drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
    CGContextRestoreGState(context);
}

+ (void)drawCommentBkgdWithOuterFrame: (CGRect)outerFrame
{
    //// Color Declarations
    UIColor* black = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.1];
    UIColor* color2 = [black colorWithAlphaComponent: 0.1];

    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(CGRectGetMaxX(outerFrame) - 12.72, CGRectGetMinY(outerFrame) + 0.71)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(outerFrame) + 18.88, CGRectGetMinY(outerFrame) + 0.71)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(outerFrame) + 6.88, CGRectGetMinY(outerFrame) + 12.71) controlPoint1: CGPointMake(CGRectGetMinX(outerFrame) + 12.28, CGRectGetMinY(outerFrame) + 0.71) controlPoint2: CGPointMake(CGRectGetMinX(outerFrame) + 6.88, CGRectGetMinY(outerFrame) + 6.11)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(outerFrame) + 6.88, CGRectGetMaxY(outerFrame) - 13.11)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(outerFrame) + 0.87, CGRectGetMaxY(outerFrame) - 6.61) controlPoint1: CGPointMake(CGRectGetMinX(outerFrame) + 6.88, CGRectGetMaxY(outerFrame) - 10.15) controlPoint2: CGPointMake(CGRectGetMinX(outerFrame) + 3.82, CGRectGetMaxY(outerFrame) - 7.72)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(outerFrame) + 8.4, CGRectGetMaxY(outerFrame) - 7.29) controlPoint1: CGPointMake(CGRectGetMinX(outerFrame) + 0.87, CGRectGetMaxY(outerFrame) - 6.61) controlPoint2: CGPointMake(CGRectGetMinX(outerFrame) + 7.08, CGRectGetMaxY(outerFrame) - 5.65)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(outerFrame) + 18.88, CGRectGetMaxY(outerFrame) - 1.11) controlPoint1: CGPointMake(CGRectGetMinX(outerFrame) + 10.46, CGRectGetMaxY(outerFrame) - 3.62) controlPoint2: CGPointMake(CGRectGetMinX(outerFrame) + 14.39, CGRectGetMaxY(outerFrame) - 1.11)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(outerFrame) - 12.72, CGRectGetMaxY(outerFrame) - 1.11)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(outerFrame) - 0.72, CGRectGetMaxY(outerFrame) - 13.11) controlPoint1: CGPointMake(CGRectGetMaxX(outerFrame) - 6.12, CGRectGetMaxY(outerFrame) - 1.11) controlPoint2: CGPointMake(CGRectGetMaxX(outerFrame) - 0.72, CGRectGetMaxY(outerFrame) - 6.51)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(outerFrame) - 0.72, CGRectGetMinY(outerFrame) + 12.71)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(outerFrame) - 12.72, CGRectGetMinY(outerFrame) + 0.71) controlPoint1: CGPointMake(CGRectGetMaxX(outerFrame) - 0.72, CGRectGetMinY(outerFrame) + 6.11) controlPoint2: CGPointMake(CGRectGetMaxX(outerFrame) - 6.12, CGRectGetMinY(outerFrame) + 0.71)];
    [bezierPath closePath];
    [color2 setFill];
    [bezierPath fill];
}

+ (void)drawCommentBkgdUserWithOuterFrame: (CGRect)outerFrame
{

    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(outerFrame) + 12.72, CGRectGetMinY(outerFrame) + 0.71)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(outerFrame) - 18.88, CGRectGetMinY(outerFrame) + 0.71)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(outerFrame) - 6.88, CGRectGetMinY(outerFrame) + 12.71) controlPoint1: CGPointMake(CGRectGetMaxX(outerFrame) - 12.28, CGRectGetMinY(outerFrame) + 0.71) controlPoint2: CGPointMake(CGRectGetMaxX(outerFrame) - 6.88, CGRectGetMinY(outerFrame) + 6.11)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(outerFrame) - 6.88, CGRectGetMaxY(outerFrame) - 13.11)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(outerFrame) - 0.87, CGRectGetMaxY(outerFrame) - 6.61) controlPoint1: CGPointMake(CGRectGetMaxX(outerFrame) - 6.88, CGRectGetMaxY(outerFrame) - 10.15) controlPoint2: CGPointMake(CGRectGetMaxX(outerFrame) - 3.83, CGRectGetMaxY(outerFrame) - 7.72)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(outerFrame) - 8.41, CGRectGetMaxY(outerFrame) - 7.29) controlPoint1: CGPointMake(CGRectGetMaxX(outerFrame) - 0.87, CGRectGetMaxY(outerFrame) - 6.61) controlPoint2: CGPointMake(CGRectGetMaxX(outerFrame) - 7.08, CGRectGetMaxY(outerFrame) - 5.65)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(outerFrame) - 18.88, CGRectGetMaxY(outerFrame) - 1.11) controlPoint1: CGPointMake(CGRectGetMaxX(outerFrame) - 10.46, CGRectGetMaxY(outerFrame) - 3.62) controlPoint2: CGPointMake(CGRectGetMaxX(outerFrame) - 14.39, CGRectGetMaxY(outerFrame) - 1.11)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(outerFrame) + 12.72, CGRectGetMaxY(outerFrame) - 1.11)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(outerFrame) + 0.72, CGRectGetMaxY(outerFrame) - 13.11) controlPoint1: CGPointMake(CGRectGetMinX(outerFrame) + 6.12, CGRectGetMaxY(outerFrame) - 1.11) controlPoint2: CGPointMake(CGRectGetMinX(outerFrame) + 0.72, CGRectGetMaxY(outerFrame) - 6.51)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(outerFrame) + 0.72, CGRectGetMinY(outerFrame) + 12.71)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(outerFrame) + 12.72, CGRectGetMinY(outerFrame) + 0.71) controlPoint1: CGPointMake(CGRectGetMinX(outerFrame) + 0.72, CGRectGetMinY(outerFrame) + 6.11) controlPoint2: CGPointMake(CGRectGetMinX(outerFrame) + 6.12, CGRectGetMinY(outerFrame) + 0.71)];
    [bezierPath closePath];
    [TungPodcastStyleKit.tungColor setFill];
    [bezierPath fill];
}

+ (void)drawEpisodeProgressWithOuterFrame: (CGRect)outerFrame color: (UIColor*)color progress: (CGFloat)progress
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* lightGray = [UIColor colorWithRed: 0.82 green: 0.827 blue: 0.831 alpha: 1];

    //// Variable Declarations
    CGFloat progressFillWidth = progress * 50;
    BOOL displayNew = progress == 0;
    BOOL showProgressBkgd = progress < 1;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextBeginTransparencyLayer(context, NULL);

        //// Clip pill shape
        UIBezierPath* pillShapePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(CGRectGetMinX(outerFrame), CGRectGetMinY(outerFrame), 50, 12) cornerRadius: 4.4];
        [pillShapePath addClip];


        if (showProgressBkgd)
        {
            //// background fill Drawing
            UIBezierPath* backgroundFillPath = [UIBezierPath bezierPathWithRect: CGRectMake(CGRectGetMinX(outerFrame) - 1, CGRectGetMinY(outerFrame) - 1, 52, 14)];
            [color setFill];
            [backgroundFillPath fill];
        }


        //// progress fill Drawing
        UIBezierPath* progressFillPath = [UIBezierPath bezierPathWithRect: CGRectMake(-1, -1, (progressFillWidth + 1), 14)];
        [lightGray setFill];
        [progressFillPath fill];


        if (displayNew)
        {
            //// Text Drawing
            CGRect textRect = CGRectMake(CGRectGetMinX(outerFrame), CGRectGetMinY(outerFrame), 50, 12);
            {
                NSString* textContent = @"NEW";
                NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
                textStyle.alignment = NSTextAlignmentCenter;

                NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont boldSystemFontOfSize: 9], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

                CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
                CGContextSaveGState(context);
                CGContextClipToRect(context, textRect);
                [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
                CGContextRestoreGState(context);
            }
        }


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawPopupWithArrowLeftWithFrame: (CGRect)frame
{
    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];

    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(CGRectGetMaxX(frame) - 13.4, CGRectGetMinY(frame) + 1.31)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 12.63, CGRectGetMinY(frame) + 1.5)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 1.5, CGRectGetMinY(frame) + 12.63) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 7.46, CGRectGetMinY(frame) + 3.38) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 3.38, CGRectGetMinY(frame) + 7.46)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame), CGRectGetMinY(frame) + 30.57) controlPoint1: CGPointMake(CGRectGetMaxX(frame), CGRectGetMinY(frame) + 17.37) controlPoint2: CGPointMake(CGRectGetMaxX(frame), CGRectGetMinY(frame) + 21.77)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(frame), CGRectGetMaxY(frame) - 49.13)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 1.31, CGRectGetMaxY(frame) - 31.96) controlPoint1: CGPointMake(CGRectGetMaxX(frame), CGRectGetMaxY(frame) - 40.33) controlPoint2: CGPointMake(CGRectGetMaxX(frame), CGRectGetMaxY(frame) - 35.93)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 1.5, CGRectGetMaxY(frame) - 31.19)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 12.63, CGRectGetMaxY(frame) - 20.06) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 3.38, CGRectGetMaxY(frame) - 26.02) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 7.46, CGRectGetMaxY(frame) - 21.94)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 30.57, CGRectGetMaxY(frame) - 18.56) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 17.37, CGRectGetMaxY(frame) - 18.56) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 21.77, CGRectGetMaxY(frame) - 18.56)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 59.01, CGRectGetMaxY(frame) - 18.56)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 43.83, CGRectGetMaxY(frame) - 3.38) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 56.63, CGRectGetMaxY(frame) - 16.18) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 43.83, CGRectGetMaxY(frame) - 3.38)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 28.66, CGRectGetMaxY(frame) - 18.56) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 43.83, CGRectGetMaxY(frame) - 3.38) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 31.04, CGRectGetMaxY(frame) - 16.18)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 13.4, CGRectGetMaxY(frame) - 19.87) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 21.11, CGRectGetMaxY(frame) - 18.57) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 17.07, CGRectGetMaxY(frame) - 18.66)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 12.63, CGRectGetMaxY(frame) - 20.06)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 1.5, CGRectGetMaxY(frame) - 31.19) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 7.46, CGRectGetMaxY(frame) - 21.94) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 3.38, CGRectGetMaxY(frame) - 26.02)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame), CGRectGetMaxY(frame) - 49.13) controlPoint1: CGPointMake(CGRectGetMinX(frame), CGRectGetMaxY(frame) - 35.93) controlPoint2: CGPointMake(CGRectGetMinX(frame), CGRectGetMaxY(frame) - 40.33)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame), CGRectGetMinY(frame) + 30.57)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 1.31, CGRectGetMinY(frame) + 13.4) controlPoint1: CGPointMake(CGRectGetMinX(frame), CGRectGetMinY(frame) + 21.77) controlPoint2: CGPointMake(CGRectGetMinX(frame), CGRectGetMinY(frame) + 17.37)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 1.5, CGRectGetMinY(frame) + 12.63)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 12.63, CGRectGetMinY(frame) + 1.5) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 3.38, CGRectGetMinY(frame) + 7.46) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 7.46, CGRectGetMinY(frame) + 3.38)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 19.24, CGRectGetMinY(frame) + 0.25) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 14.76, CGRectGetMinY(frame) + 0.83) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 16.82, CGRectGetMinY(frame) + 0.45)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 30.57, CGRectGetMinY(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 22.21, CGRectGetMinY(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 25.72, CGRectGetMinY(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 30.57, CGRectGetMinY(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 13.4, CGRectGetMinY(frame) + 1.31) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 21.77, CGRectGetMinY(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 17.37, CGRectGetMinY(frame))];
    [bezierPath closePath];
    [white setFill];
    [bezierPath fill];
}

+ (void)drawPopupWithArrowRightWithFrame: (CGRect)frame
{
    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];

    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 13.4, CGRectGetMinY(frame) + 1.31)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 12.63, CGRectGetMinY(frame) + 1.5)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 1.5, CGRectGetMinY(frame) + 12.63) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 7.46, CGRectGetMinY(frame) + 3.38) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 3.38, CGRectGetMinY(frame) + 7.46)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame), CGRectGetMinY(frame) + 30.57) controlPoint1: CGPointMake(CGRectGetMinX(frame), CGRectGetMinY(frame) + 17.37) controlPoint2: CGPointMake(CGRectGetMinX(frame), CGRectGetMinY(frame) + 21.77)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame), CGRectGetMaxY(frame) - 49.13)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 1.31, CGRectGetMaxY(frame) - 31.96) controlPoint1: CGPointMake(CGRectGetMinX(frame), CGRectGetMaxY(frame) - 40.33) controlPoint2: CGPointMake(CGRectGetMinX(frame), CGRectGetMaxY(frame) - 35.93)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 1.5, CGRectGetMaxY(frame) - 31.19)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 12.63, CGRectGetMaxY(frame) - 20.06) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 3.38, CGRectGetMaxY(frame) - 26.02) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 7.46, CGRectGetMaxY(frame) - 21.94)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 30.57, CGRectGetMaxY(frame) - 18.56) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 17.37, CGRectGetMaxY(frame) - 18.56) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 21.77, CGRectGetMaxY(frame) - 18.56)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 59.01, CGRectGetMaxY(frame) - 18.56)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 43.83, CGRectGetMaxY(frame) - 3.38) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 56.63, CGRectGetMaxY(frame) - 16.18) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 43.83, CGRectGetMaxY(frame) - 3.38)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 28.66, CGRectGetMaxY(frame) - 18.56) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 43.83, CGRectGetMaxY(frame) - 3.38) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 31.04, CGRectGetMaxY(frame) - 16.18)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 13.4, CGRectGetMaxY(frame) - 19.87) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 21.11, CGRectGetMaxY(frame) - 18.57) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 17.07, CGRectGetMaxY(frame) - 18.66)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 12.63, CGRectGetMaxY(frame) - 20.06)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 1.5, CGRectGetMaxY(frame) - 31.19) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 7.46, CGRectGetMaxY(frame) - 21.94) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 3.38, CGRectGetMaxY(frame) - 26.02)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame), CGRectGetMaxY(frame) - 49.13) controlPoint1: CGPointMake(CGRectGetMaxX(frame), CGRectGetMaxY(frame) - 35.93) controlPoint2: CGPointMake(CGRectGetMaxX(frame), CGRectGetMaxY(frame) - 40.33)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(frame), CGRectGetMinY(frame) + 30.57)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 1.31, CGRectGetMinY(frame) + 13.4) controlPoint1: CGPointMake(CGRectGetMaxX(frame), CGRectGetMinY(frame) + 21.77) controlPoint2: CGPointMake(CGRectGetMaxX(frame), CGRectGetMinY(frame) + 17.37)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 1.5, CGRectGetMinY(frame) + 12.63)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 12.63, CGRectGetMinY(frame) + 1.5) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 3.38, CGRectGetMinY(frame) + 7.46) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 7.46, CGRectGetMinY(frame) + 3.38)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 19.24, CGRectGetMinY(frame) + 0.25) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 14.76, CGRectGetMinY(frame) + 0.83) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 16.82, CGRectGetMinY(frame) + 0.45)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 30.57, CGRectGetMinY(frame)) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 22.21, CGRectGetMinY(frame)) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 25.72, CGRectGetMinY(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 30.57, CGRectGetMinY(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 13.4, CGRectGetMinY(frame) + 1.31) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 21.77, CGRectGetMinY(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 17.37, CGRectGetMinY(frame))];
    [bezierPath closePath];
    [white setFill];
    [bezierPath fill];
}

+ (void)drawSolidCircleWithFrame: (CGRect)frame
{

    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame))];
    [TungPodcastStyleKit.tungColor setFill];
    [ovalPath fill];
}

+ (void)drawLargeBadgeWithFrame: (CGRect)frame buttonText: (NSString*)buttonText
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(CGRectGetMinX(frame) + 1, CGRectGetMinY(frame) + 1, CGRectGetWidth(frame) - 2, CGRectGetHeight(frame) - 2) cornerRadius: 12];
    [UIColor.redColor setFill];
    [rectanglePath fill];
    [UIColor.whiteColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];


    //// Text Drawing
    CGRect textRect = CGRectMake(CGRectGetMinX(frame) + 1, CGRectGetMinY(frame) + 1, CGRectGetWidth(frame) - 2, CGRectGetHeight(frame) - 2);
    NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
    textStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 15], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

    CGFloat textTextHeight = [buttonText boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textRect);
    [buttonText drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
    CGContextRestoreGState(context);
}

+ (void)drawSmallBadgeWithFrame: (CGRect)frame buttonText: (NSString*)buttonText
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(CGRectGetMinX(frame) + 1, CGRectGetMinY(frame) + 1, CGRectGetWidth(frame) - 2, CGRectGetHeight(frame) - 2) cornerRadius: 10];
    [UIColor.redColor setFill];
    [rectanglePath fill];
    [UIColor.whiteColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];


    //// Text Drawing
    CGRect textRect = CGRectMake(CGRectGetMinX(frame) + 1, CGRectGetMinY(frame) + 1, CGRectGetWidth(frame) - 2, CGRectGetHeight(frame) - 2);
    NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
    textStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: UIFont.smallSystemFontSize], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

    CGFloat textTextHeight = [buttonText boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textRect);
    [buttonText drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
    CGContextRestoreGState(context);
}

@end
